(function(z,l){typeof exports=="object"&&typeof module!="undefined"?l(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],l):(z=typeof globalThis!="undefined"?globalThis:z||self,l(z.LCVueSimulatorRenderer={},z.Vue))})(this,function(z,l){"use strict";var eu=Object.defineProperty;var tu=(z,l,le)=>l in z?eu(z,l,{enumerable:!0,configurable:!0,writable:!0,value:le}):z[l]=le;var Oe=(z,l,le)=>(tu(z,typeof l!="symbol"?l+"":l,le),le);/*!
  * vue-router v4.2.2
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const le=typeof window!="undefined";function hn(e){return e.__esModule||e[Symbol.toStringTag]==="Module"}const W=Object.assign;function dt(e,t){const n={};for(const r in t){const o=t[r];n[r]=de(o)?o.map(e):e(o)}return n}const je=()=>{},de=Array.isArray,Po=/\/$/,Oo=e=>e.replace(Po,"");function pt(e,t,n="/"){let r,o={},i="",s="";const u=t.indexOf("#");let f=t.indexOf("?");return u<f&&u>=0&&(f=-1),f>-1&&(r=t.slice(0,f),i=t.slice(f+1,u>-1?u:t.length),o=e(i)),u>-1&&(r=r||t.slice(0,u),s=t.slice(u,t.length)),r=Ao(r!=null?r:t,n),{fullPath:r+(i&&"?")+i+s,path:r,query:o,hash:s}}function wo(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}function dn(e,t){return!t||!e.toLowerCase().startsWith(t.toLowerCase())?e:e.slice(t.length)||"/"}function To(e,t,n){const r=t.matched.length-1,o=n.matched.length-1;return r>-1&&r===o&&we(t.matched[r],n.matched[o])&&pn(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function we(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function pn(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!No(e[n],t[n]))return!1;return!0}function No(e,t){return de(e)?mn(e,t):de(t)?mn(t,e):e===t}function mn(e,t){return de(t)?e.length===t.length&&e.every((n,r)=>n===t[r]):e.length===1&&e[0]===t}function Ao(e,t){if(e.startsWith("/"))return e;if(!e)return t;const n=t.split("/"),r=e.split("/"),o=r[r.length-1];(o===".."||o===".")&&r.push("");let i=n.length-1,s,u;for(s=0;s<r.length;s++)if(u=r[s],u!==".")if(u==="..")i>1&&i--;else break;return n.slice(0,i).join("/")+"/"+r.slice(s-(s===r.length?1:0)).join("/")}var Te;(function(e){e.pop="pop",e.push="push"})(Te||(Te={}));var Ce;(function(e){e.back="back",e.forward="forward",e.unknown=""})(Ce||(Ce={}));const mt="";function gn(e){if(!e)if(le){const t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),Oo(e)}const Ho=/^[^#]+#/;function yn(e,t){return e.replace(Ho,"#")+t}function Io(e,t){const n=document.documentElement.getBoundingClientRect(),r=e.getBoundingClientRect();return{behavior:t.behavior,left:r.left-n.left-(t.left||0),top:r.top-n.top-(t.top||0)}}const ze=()=>({left:window.pageXOffset,top:window.pageYOffset});function Bo(e){let t;if("el"in e){const n=e.el,r=typeof n=="string"&&n.startsWith("#"),o=typeof n=="string"?r?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!o)return;t=Io(o,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.pageXOffset,t.top!=null?t.top:window.pageYOffset)}function En(e,t){return(history.state?history.state.position-t:-1)+e}const gt=new Map;function Lo(e,t){gt.set(e,t)}function Mo(e){const t=gt.get(e);return gt.delete(e),t}let Uo=()=>location.protocol+"//"+location.host;function bn(e,t){const{pathname:n,search:r,hash:o}=t,i=e.indexOf("#");if(i>-1){let u=o.includes(e.slice(i))?e.slice(i).length:1,f=o.slice(u);return f[0]!=="/"&&(f="/"+f),dn(f,"")}return dn(n,e)+r+o}function Do(e,t,n,r){let o=[],i=[],s=null;const u=({state:c})=>{const p=bn(e,location),y=n.value,O=t.value;let E=0;if(c){if(n.value=p,t.value=c,s&&s===y){s=null;return}E=O?c.position-O.position:0}else r(p);o.forEach(R=>{R(n.value,y,{delta:E,type:Te.pop,direction:E?E>0?Ce.forward:Ce.back:Ce.unknown})})};function f(){s=n.value}function h(c){o.push(c);const p=()=>{const y=o.indexOf(c);y>-1&&o.splice(y,1)};return i.push(p),p}function a(){const{history:c}=window;c.state&&c.replaceState(W({},c.state,{scroll:ze()}),"")}function d(){for(const c of i)c();i=[],window.removeEventListener("popstate",u),window.removeEventListener("beforeunload",a)}return window.addEventListener("popstate",u),window.addEventListener("beforeunload",a,{passive:!0}),{pauseListeners:f,listen:h,destroy:d}}function _n(e,t,n,r=!1,o=!1){return{back:e,current:t,forward:n,replaced:r,position:window.history.length,scroll:o?ze():null}}function jo(e){const{history:t,location:n}=window,r={value:bn(e,n)},o={value:t.state};o.value||i(r.value,{back:null,current:r.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function i(f,h,a){const d=e.indexOf("#"),c=d>-1?(n.host&&document.querySelector("base")?e:e.slice(d))+f:Uo()+e+f;try{t[a?"replaceState":"pushState"](h,"",c),o.value=h}catch(p){console.error(p),n[a?"replace":"assign"](c)}}function s(f,h){const a=W({},t.state,_n(o.value.back,f,o.value.forward,!0),h,{position:o.value.position});i(f,a,!0),r.value=f}function u(f,h){const a=W({},o.value,t.state,{forward:f,scroll:ze()});i(a.current,a,!0);const d=W({},_n(r.value,f,null),{position:a.position+1},h);i(f,d,!1),r.value=f}return{location:r,state:o,push:u,replace:s}}function Sn(e){e=gn(e);const t=jo(e),n=Do(e,t.state,t.location,t.replace);function r(i,s=!0){s||n.pauseListeners(),history.go(i)}const o=W({location:"",base:e,go:r,createHref:yn.bind(null,e)},t,n);return Object.defineProperty(o,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(o,"state",{enumerable:!0,get:()=>t.state.value}),o}function vn(e=""){let t=[],n=[mt],r=0;e=gn(e);function o(u){r++,r===n.length||n.splice(r),n.push(u)}function i(u,f,{direction:h,delta:a}){const d={direction:h,delta:a,type:Te.pop};for(const c of t)c(u,f,d)}const s={location:mt,state:{},base:e,createHref:yn.bind(null,e),replace(u){n.splice(r--,1),o(u)},push(u,f){o(u)},listen(u){return t.push(u),()=>{const f=t.indexOf(u);f>-1&&t.splice(f,1)}},destroy(){t=[],n=[mt],r=0},go(u,f=!0){const h=this.location,a=u<0?Ce.back:Ce.forward;r=Math.max(0,Math.min(r+u,n.length-1)),f&&i(this.location,h,{direction:a,delta:u})}};return Object.defineProperty(s,"location",{enumerable:!0,get:()=>n[r]}),s}function ko(e){return e=location.host?e||location.pathname+location.search:"",e.includes("#")||(e+="#"),Sn(e)}function Go(e){return typeof e=="string"||e&&typeof e=="object"}function xn(e){return typeof e=="string"||typeof e=="symbol"}const be={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Cn=Symbol("");var yt;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(yt||(yt={}));function Ne(e,t){return W(new Error,{type:e,[Cn]:!0},t)}function me(e,t){return e instanceof Error&&Cn in e&&(t==null||!!(e.type&t))}const Rn="[^/]+?",Fo={sensitive:!1,strict:!1,start:!0,end:!0},$o=/[.+*?^${}()[\]/\\]/g;function Vo(e,t){const n=W({},Fo,t),r=[];let o=n.start?"^":"";const i=[];for(const h of e){const a=h.length?[]:[90];n.strict&&!h.length&&(o+="/");for(let d=0;d<h.length;d++){const c=h[d];let p=40+(n.sensitive?.25:0);if(c.type===0)d||(o+="/"),o+=c.value.replace($o,"\\$&"),p+=40;else if(c.type===1){const{value:y,repeatable:O,optional:E,regexp:R}=c;i.push({name:y,repeatable:O,optional:E});const P=R||Rn;if(P!==Rn){p+=10;try{new RegExp(`(${P})`)}catch(N){throw new Error(`Invalid custom RegExp for param "${y}" (${P}): `+N.message)}}let _=O?`((?:${P})(?:/(?:${P}))*)`:`(${P})`;d||(_=E&&h.length<2?`(?:/${_})`:"/"+_),E&&(_+="?"),o+=_,p+=20,E&&(p+=-8),O&&(p+=-20),P===".*"&&(p+=-50)}a.push(p)}r.push(a)}if(n.strict&&n.end){const h=r.length-1;r[h][r[h].length-1]+=.7000000000000001}n.strict||(o+="/?"),n.end?o+="$":n.strict&&(o+="(?:/|$)");const s=new RegExp(o,n.sensitive?"":"i");function u(h){const a=h.match(s),d={};if(!a)return null;for(let c=1;c<a.length;c++){const p=a[c]||"",y=i[c-1];d[y.name]=p&&y.repeatable?p.split("/"):p}return d}function f(h){let a="",d=!1;for(const c of e){(!d||!a.endsWith("/"))&&(a+="/"),d=!1;for(const p of c)if(p.type===0)a+=p.value;else if(p.type===1){const{value:y,repeatable:O,optional:E}=p,R=y in h?h[y]:"";if(de(R)&&!O)throw new Error(`Provided param "${y}" is an array but it is not repeatable (* or + modifiers)`);const P=de(R)?R.join("/"):R;if(!P)if(E)c.length<2&&(a.endsWith("/")?a=a.slice(0,-1):d=!0);else throw new Error(`Missing required param "${y}"`);a+=P}}return a||"/"}return{re:s,score:r,keys:i,parse:u,stringify:f}}function qo(e,t){let n=0;for(;n<e.length&&n<t.length;){const r=t[n]-e[n];if(r)return r;n++}return e.length<t.length?e.length===1&&e[0]===40+40?-1:1:e.length>t.length?t.length===1&&t[0]===40+40?1:-1:0}function Xo(e,t){let n=0;const r=e.score,o=t.score;for(;n<r.length&&n<o.length;){const i=qo(r[n],o[n]);if(i)return i;n++}if(Math.abs(o.length-r.length)===1){if(Pn(r))return 1;if(Pn(o))return-1}return o.length-r.length}function Pn(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const zo={type:0,value:""},Wo=/[a-zA-Z0-9_]/;function Jo(e){if(!e)return[[]];if(e==="/")return[[zo]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(p){throw new Error(`ERR (${n})/"${h}": ${p}`)}let n=0,r=n;const o=[];let i;function s(){i&&o.push(i),i=[]}let u=0,f,h="",a="";function d(){h&&(n===0?i.push({type:0,value:h}):n===1||n===2||n===3?(i.length>1&&(f==="*"||f==="+")&&t(`A repeatable param (${h}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:h,regexp:a,repeatable:f==="*"||f==="+",optional:f==="*"||f==="?"})):t("Invalid state to consume buffer"),h="")}function c(){h+=f}for(;u<e.length;){if(f=e[u++],f==="\\"&&n!==2){r=n,n=4;continue}switch(n){case 0:f==="/"?(h&&d(),s()):f===":"?(d(),n=1):c();break;case 4:c(),n=r;break;case 1:f==="("?n=2:Wo.test(f)?c():(d(),n=0,f!=="*"&&f!=="?"&&f!=="+"&&u--);break;case 2:f===")"?a[a.length-1]=="\\"?a=a.slice(0,-1)+f:n=3:a+=f;break;case 3:d(),n=0,f!=="*"&&f!=="?"&&f!=="+"&&u--,a="";break;default:t("Unknown state");break}}return n===2&&t(`Unfinished custom RegExp for param "${h}"`),d(),s(),o}function Zo(e,t,n){const r=Vo(Jo(e.path),n),o=W(r,{record:e,parent:t,children:[],alias:[]});return t&&!o.record.aliasOf==!t.record.aliasOf&&t.children.push(o),o}function On(e,t){const n=[],r=new Map;t=Nn({strict:!1,end:!0,sensitive:!1},t);function o(a){return r.get(a)}function i(a,d,c){const p=!c,y=Qo(a);y.aliasOf=c&&c.record;const O=Nn(t,a),E=[y];if("alias"in a){const _=typeof a.alias=="string"?[a.alias]:a.alias;for(const N of _)E.push(W({},y,{components:c?c.record.components:y.components,path:N,aliasOf:c?c.record:y}))}let R,P;for(const _ of E){const{path:N}=_;if(d&&N[0]!=="/"){const b=d.record.path,S=b[b.length-1]==="/"?"":"/";_.path=d.record.path+(N&&S+N)}if(R=Zo(_,d,O),c?c.alias.push(R):(P=P||R,P!==R&&P.alias.push(R),p&&a.name&&!Tn(R)&&s(a.name)),y.children){const b=y.children;for(let S=0;S<b.length;S++)i(b[S],R,c&&c.children[S])}c=c||R,(R.record.components&&Object.keys(R.record.components).length||R.record.name||R.record.redirect)&&f(R)}return P?()=>{s(P)}:je}function s(a){if(xn(a)){const d=r.get(a);d&&(r.delete(a),n.splice(n.indexOf(d),1),d.children.forEach(s),d.alias.forEach(s))}else{const d=n.indexOf(a);d>-1&&(n.splice(d,1),a.record.name&&r.delete(a.record.name),a.children.forEach(s),a.alias.forEach(s))}}function u(){return n}function f(a){let d=0;for(;d<n.length&&Xo(a,n[d])>=0&&(a.record.path!==n[d].record.path||!An(a,n[d]));)d++;n.splice(d,0,a),a.record.name&&!Tn(a)&&r.set(a.record.name,a)}function h(a,d){let c,p={},y,O;if("name"in a&&a.name){if(c=r.get(a.name),!c)throw Ne(1,{location:a});O=c.record.name,p=W(wn(d.params,c.keys.filter(P=>!P.optional).map(P=>P.name)),a.params&&wn(a.params,c.keys.map(P=>P.name))),y=c.stringify(p)}else if("path"in a)y=a.path,c=n.find(P=>P.re.test(y)),c&&(p=c.parse(y),O=c.record.name);else{if(c=d.name?r.get(d.name):n.find(P=>P.re.test(d.path)),!c)throw Ne(1,{location:a,currentLocation:d});O=c.record.name,p=W({},d.params,a.params),y=c.stringify(p)}const E=[];let R=c;for(;R;)E.unshift(R.record),R=R.parent;return{name:O,path:y,params:p,matched:E,meta:Ko(E)}}return e.forEach(a=>i(a)),{addRoute:i,resolve:h,removeRoute:s,getRoutes:u,getRecordMatcher:o}}function wn(e,t){const n={};for(const r of t)r in e&&(n[r]=e[r]);return n}function Qo(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:Yo(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}}}function Yo(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const r in e.components)t[r]=typeof n=="boolean"?n:n[r];return t}function Tn(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function Ko(e){return e.reduce((t,n)=>W(t,n.meta),{})}function Nn(e,t){const n={};for(const r in e)n[r]=r in t?t[r]:e[r];return n}function An(e,t){return t.children.some(n=>n===e||An(e,n))}const Hn=/#/g,ei=/&/g,ti=/\//g,ni=/=/g,ri=/\?/g,In=/\+/g,oi=/%5B/g,ii=/%5D/g,Bn=/%5E/g,si=/%60/g,Ln=/%7B/g,ai=/%7C/g,Mn=/%7D/g,ui=/%20/g;function Et(e){return encodeURI(""+e).replace(ai,"|").replace(oi,"[").replace(ii,"]")}function ci(e){return Et(e).replace(Ln,"{").replace(Mn,"}").replace(Bn,"^")}function bt(e){return Et(e).replace(In,"%2B").replace(ui,"+").replace(Hn,"%23").replace(ei,"%26").replace(si,"`").replace(Ln,"{").replace(Mn,"}").replace(Bn,"^")}function li(e){return bt(e).replace(ni,"%3D")}function fi(e){return Et(e).replace(Hn,"%23").replace(ri,"%3F")}function hi(e){return e==null?"":fi(e).replace(ti,"%2F")}function We(e){try{return decodeURIComponent(""+e)}catch(t){}return""+e}function Un(e){const t={};if(e===""||e==="?")return t;const r=(e[0]==="?"?e.slice(1):e).split("&");for(let o=0;o<r.length;++o){const i=r[o].replace(In," "),s=i.indexOf("="),u=We(s<0?i:i.slice(0,s)),f=s<0?null:We(i.slice(s+1));if(u in t){let h=t[u];de(h)||(h=t[u]=[h]),h.push(f)}else t[u]=f}return t}function _t(e){let t="";for(let n in e){const r=e[n];if(n=li(n),r==null){r!==void 0&&(t+=(t.length?"&":"")+n);continue}(de(r)?r.map(i=>i&&bt(i)):[r&&bt(r)]).forEach(i=>{i!==void 0&&(t+=(t.length?"&":"")+n,i!=null&&(t+="="+i))})}return t}function di(e){const t={};for(const n in e){const r=e[n];r!==void 0&&(t[n]=de(r)?r.map(o=>o==null?null:""+o):r==null?r:""+r)}return t}const Je=Symbol(""),St=Symbol(""),ke=Symbol(""),Ze=Symbol(""),Qe=Symbol("");function Ge(){let e=[];function t(r){return e.push(r),()=>{const o=e.indexOf(r);o>-1&&e.splice(o,1)}}function n(){e=[]}return{add:t,list:()=>e,reset:n}}function Dn(e,t,n){const r=()=>{e[t].delete(n)};l.onUnmounted(r),l.onDeactivated(r),l.onActivated(()=>{e[t].add(n)}),e[t].add(n)}function pi(e){const t=l.inject(Je,{}).value;t&&Dn(t,"leaveGuards",e)}function mi(e){const t=l.inject(Je,{}).value;t&&Dn(t,"updateGuards",e)}function Se(e,t,n,r,o){const i=r&&(r.enterCallbacks[o]=r.enterCallbacks[o]||[]);return()=>new Promise((s,u)=>{const f=d=>{d===!1?u(Ne(4,{from:n,to:t})):d instanceof Error?u(d):Go(d)?u(Ne(2,{from:t,to:d})):(i&&r.enterCallbacks[o]===i&&typeof d=="function"&&i.push(d),s())},h=e.call(r&&r.instances[o],t,n,f);let a=Promise.resolve(h);e.length<3&&(a=a.then(f)),a.catch(d=>u(d))})}function vt(e,t,n,r){const o=[];for(const i of e)for(const s in i.components){let u=i.components[s];if(!(t!=="beforeRouteEnter"&&!i.instances[s]))if(gi(u)){const h=(u.__vccOpts||u)[t];h&&o.push(Se(h,n,r,i,s))}else{let f=u();o.push(()=>f.then(h=>{if(!h)return Promise.reject(new Error(`Couldn't resolve component "${s}" at "${i.path}"`));const a=hn(h)?h.default:h;i.components[s]=a;const c=(a.__vccOpts||a)[t];return c&&Se(c,n,r,i,s)()}))}}return o}function gi(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function yi(e){return e.matched.every(t=>t.redirect)?Promise.reject(new Error("Cannot load a route that redirects.")):Promise.all(e.matched.map(t=>t.components&&Promise.all(Object.keys(t.components).reduce((n,r)=>{const o=t.components[r];return typeof o=="function"&&!("displayName"in o)&&n.push(o().then(i=>{if(!i)return Promise.reject(new Error(`Couldn't resolve component "${r}" at "${t.path}". Ensure you passed a function that returns a promise.`));const s=hn(i)?i.default:i;t.components[r]=s})),n},[])))).then(()=>e)}function xt(e){const t=l.inject(ke),n=l.inject(Ze),r=l.computed(()=>t.resolve(l.unref(e.to))),o=l.computed(()=>{const{matched:f}=r.value,{length:h}=f,a=f[h-1],d=n.matched;if(!a||!d.length)return-1;const c=d.findIndex(we.bind(null,a));if(c>-1)return c;const p=kn(f[h-2]);return h>1&&kn(a)===p&&d[d.length-1].path!==p?d.findIndex(we.bind(null,f[h-2])):c}),i=l.computed(()=>o.value>-1&&bi(n.params,r.value.params)),s=l.computed(()=>o.value>-1&&o.value===n.matched.length-1&&pn(n.params,r.value.params));function u(f={}){return Ei(f)?t[l.unref(e.replace)?"replace":"push"](l.unref(e.to)).catch(je):Promise.resolve()}return{route:r,href:l.computed(()=>r.value.href),isActive:i,isExactActive:s,navigate:u}}const jn=l.defineComponent({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:xt,setup(e,{slots:t}){const n=l.reactive(xt(e)),{options:r}=l.inject(ke),o=l.computed(()=>({[Gn(e.activeClass,r.linkActiveClass,"router-link-active")]:n.isActive,[Gn(e.exactActiveClass,r.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive}));return()=>{const i=t.default&&t.default(n);return e.custom?i:l.h("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:o.value},i)}}});function Ei(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function bi(e,t){for(const n in t){const r=t[n],o=e[n];if(typeof r=="string"){if(r!==o)return!1}else if(!de(o)||o.length!==r.length||r.some((i,s)=>i!==o[s]))return!1}return!0}function kn(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const Gn=(e,t,n)=>e!=null?e:t!=null?t:n,_i=l.defineComponent({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){const r=l.inject(Qe),o=l.computed(()=>e.route||r.value),i=l.inject(St,0),s=l.computed(()=>{let h=l.unref(i);const{matched:a}=o.value;let d;for(;(d=a[h])&&!d.components;)h++;return h}),u=l.computed(()=>o.value.matched[s.value]);l.provide(St,l.computed(()=>s.value+1)),l.provide(Je,u),l.provide(Qe,o);const f=l.ref();return l.watch(()=>[f.value,u.value,e.name],([h,a,d],[c,p,y])=>{a&&(a.instances[d]=h,p&&p!==a&&h&&h===c&&(a.leaveGuards.size||(a.leaveGuards=p.leaveGuards),a.updateGuards.size||(a.updateGuards=p.updateGuards))),h&&a&&(!p||!we(a,p)||!c)&&(a.enterCallbacks[d]||[]).forEach(O=>O(h))},{flush:"post"}),()=>{const h=o.value,a=e.name,d=u.value,c=d&&d.components[a];if(!c)return Fn(n.default,{Component:c,route:h});const p=d.props[a],y=p?p===!0?h.params:typeof p=="function"?p(h):p:null,O=R=>{R.component.isUnmounted&&(d.instances[a]=null)},E=l.h(c,W({},y,t,{onVnodeUnmounted:O,ref:f}));return Fn(n.default,{Component:E,route:h})||E}}});function Fn(e,t){if(!e)return null;const n=e(t);return n.length===1?n[0]:n}const Ct=_i;function $n(e){const t=On(e.routes,e),n=e.parseQuery||Un,r=e.stringifyQuery||_t,o=e.history,i=Ge(),s=Ge(),u=Ge(),f=l.shallowRef(be);let h=be;le&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const a=dt.bind(null,g=>""+g),d=dt.bind(null,hi),c=dt.bind(null,We);function p(g,C){let v,T;return xn(g)?(v=t.getRecordMatcher(g),T=C):T=g,t.addRoute(T,v)}function y(g){const C=t.getRecordMatcher(g);C&&t.removeRoute(C)}function O(){return t.getRoutes().map(g=>g.record)}function E(g){return!!t.getRecordMatcher(g)}function R(g,C){if(C=W({},C||f.value),typeof g=="string"){const M=pt(n,g,C.path),ne=t.resolve({path:M.path},C),Xe=o.createHref(M.fullPath);return W(M,ne,{params:c(ne.params),hash:We(M.hash),redirectedFrom:void 0,href:Xe})}let v;if("path"in g)v=W({},g,{path:pt(n,g.path,C.path).path});else{const M=W({},g.params);for(const ne in M)M[ne]==null&&delete M[ne];v=W({},g,{params:d(M)}),C.params=d(C.params)}const T=t.resolve(v,C),j=g.hash||"";T.params=a(c(T.params));const D=wo(r,W({},g,{hash:ci(j),path:T.path})),L=o.createHref(D);return W({fullPath:D,hash:j,query:r===_t?di(g.query):g.query||{}},T,{redirectedFrom:void 0,href:L})}function P(g){return typeof g=="string"?pt(n,g,f.value.path):W({},g)}function _(g,C){if(h!==g)return Ne(8,{from:C,to:g})}function N(g){return w(g)}function b(g){return N(W(P(g),{replace:!0}))}function S(g){const C=g.matched[g.matched.length-1];if(C&&C.redirect){const{redirect:v}=C;let T=typeof v=="function"?v(g):v;return typeof T=="string"&&(T=T.includes("?")||T.includes("#")?T=P(T):{path:T},T.params={}),W({query:g.query,hash:g.hash,params:"path"in T?{}:g.params},T)}}function w(g,C){const v=h=R(g),T=f.value,j=g.state,D=g.force,L=g.replace===!0,M=S(v);if(M)return w(W(P(M),{state:typeof M=="object"?W({},j,M.state):j,force:D,replace:L}),C||v);const ne=v;ne.redirectedFrom=C;let Xe;return!D&&To(r,T,v)&&(Xe=Ne(16,{to:ne,from:T}),ue(T,T,!0,!1)),(Xe?Promise.resolve(Xe):B(ne,T)).catch(ce=>me(ce)?me(ce,2)?ce:te(ce):pe(ce,ne,T)).then(ce=>{if(ce){if(me(ce,2))return w(W({replace:L},P(ce.to),{state:typeof ce.to=="object"?W({},j,ce.to.state):j,force:D}),C||ne)}else ce=U(ne,T,!0,L,j);return G(ne,T,ce),ce})}function A(g,C){const v=_(g,C);return v?Promise.reject(v):Promise.resolve()}function H(g){const C=xe.values().next().value;return C&&typeof C.runWithContext=="function"?C.runWithContext(g):g()}function B(g,C){let v;const[T,j,D]=Si(g,C);v=vt(T.reverse(),"beforeRouteLeave",g,C);for(const M of T)M.leaveGuards.forEach(ne=>{v.push(Se(ne,g,C))});const L=A.bind(null,g,C);return v.push(L),x(v).then(()=>{v=[];for(const M of i.list())v.push(Se(M,g,C));return v.push(L),x(v)}).then(()=>{v=vt(j,"beforeRouteUpdate",g,C);for(const M of j)M.updateGuards.forEach(ne=>{v.push(Se(ne,g,C))});return v.push(L),x(v)}).then(()=>{v=[];for(const M of g.matched)if(M.beforeEnter&&!C.matched.includes(M))if(de(M.beforeEnter))for(const ne of M.beforeEnter)v.push(Se(ne,g,C));else v.push(Se(M.beforeEnter,g,C));return v.push(L),x(v)}).then(()=>(g.matched.forEach(M=>M.enterCallbacks={}),v=vt(D,"beforeRouteEnter",g,C),v.push(L),x(v))).then(()=>{v=[];for(const M of s.list())v.push(Se(M,g,C));return v.push(L),x(v)}).catch(M=>me(M,8)?M:Promise.reject(M))}function G(g,C,v){for(const T of u.list())H(()=>T(g,C,v))}function U(g,C,v,T,j){const D=_(g,C);if(D)return D;const L=C===be,M=le?history.state:{};v&&(T||L?o.replace(g.fullPath,W({scroll:L&&M&&M.scroll},j)):o.push(g.fullPath,j)),f.value=g,ue(g,C,v,L),te()}let I;function J(){I||(I=o.listen((g,C,v)=>{if(!m.listening)return;const T=R(g),j=S(T);if(j){w(W(j,{replace:!0}),T).catch(je);return}h=T;const D=f.value;le&&Lo(En(D.fullPath,v.delta),ze()),B(T,D).catch(L=>me(L,12)?L:me(L,2)?(w(L.to,T).then(M=>{me(M,20)&&!v.delta&&v.type===Te.pop&&o.go(-1,!1)}).catch(je),Promise.reject()):(v.delta&&o.go(-v.delta,!1),pe(L,T,D))).then(L=>{L=L||U(T,D,!1),L&&(v.delta&&!me(L,8)?o.go(-v.delta,!1):v.type===Te.pop&&me(L,20)&&o.go(-1,!1)),G(T,D,L)}).catch(je)}))}let K=Ge(),ie=Ge(),se;function pe(g,C,v){te(g);const T=ie.list();return T.length?T.forEach(j=>j(g,C,v)):console.error(g),Promise.reject(g)}function De(){return se&&f.value!==be?Promise.resolve():new Promise((g,C)=>{K.add([g,C])})}function te(g){return se||(se=!g,J(),K.list().forEach(([C,v])=>g?v(g):C()),K.reset()),g}function ue(g,C,v,T){const{scrollBehavior:j}=e;if(!le||!j)return Promise.resolve();const D=!v&&Mo(En(g.fullPath,0))||(T||!v)&&history.state&&history.state.scroll||null;return l.nextTick().then(()=>j(g,C,D)).then(L=>L&&Bo(L)).catch(L=>pe(L,g,C))}const Ee=g=>o.go(g);let re;const xe=new Set,m={currentRoute:f,listening:!0,addRoute:p,removeRoute:y,hasRoute:E,getRoutes:O,resolve:R,options:e,push:N,replace:b,go:Ee,back:()=>Ee(-1),forward:()=>Ee(1),beforeEach:i.add,beforeResolve:s.add,afterEach:u.add,onError:ie.add,isReady:De,install(g){const C=this;g.component("RouterLink",jn),g.component("RouterView",Ct),g.config.globalProperties.$router=C,Object.defineProperty(g.config.globalProperties,"$route",{enumerable:!0,get:()=>l.unref(f)}),le&&!re&&f.value===be&&(re=!0,N(o.location).catch(j=>{}));const v={};for(const j in be)v[j]=l.computed(()=>f.value[j]);g.provide(ke,C),g.provide(Ze,l.reactive(v)),g.provide(Qe,f);const T=g.unmount;xe.add(g),g.unmount=function(){xe.delete(g),xe.size<1&&(h=be,I&&I(),I=null,f.value=be,re=!1,se=!1),T()}}};function x(g){return g.reduce((C,v)=>C.then(()=>H(v)),Promise.resolve())}return m}function Si(e,t){const n=[],r=[],o=[],i=Math.max(t.matched.length,e.matched.length);for(let s=0;s<i;s++){const u=t.matched[s];u&&(e.matched.find(h=>we(h,u))?r.push(u):n.push(u));const f=e.matched[s];f&&(t.matched.find(h=>we(h,f))||o.push(f))}return[n,r,o]}function vi(){return l.inject(ke)}function xi(){return l.inject(Ze)}const Ci=Object.freeze(Object.defineProperty({__proto__:null,get NavigationFailureType(){return yt},RouterLink:jn,RouterView:Ct,START_LOCATION:be,createMemoryHistory:vn,createRouter:$n,createRouterMatcher:On,createWebHashHistory:ko,createWebHistory:Sn,isNavigationFailure:me,loadRouteLocation:yi,matchedRouteKey:Je,onBeforeRouteLeave:pi,onBeforeRouteUpdate:mi,parseQuery:Un,routeLocationKey:Ze,routerKey:ke,routerViewLocationKey:Qe,stringifyQuery:_t,useLink:xt,useRoute:xi,useRouter:vi,viewDepthKey:St},Symbol.toStringTag,{value:"Module"})),Ae={__scope:{type:Object,default:void 0},__schema:{type:Object,required:!0},__designMode:{type:String,default:"live"},__components:{type:Object,required:!0},__locale:{type:String,default:void 0},__messages:{type:Object,default:()=>({})},__getNode:{type:Function,required:!0},__triggerCompGetCtx:{type:Function,required:!0},__thisRequiredInJSE:{type:Boolean,default:!0},__props:{type:Object,default:()=>({})},__parser:{type:Object,required:!0}},Ri=Object.keys(Ae),Ye={__comp:{type:Object,required:!0},__scope:{type:Object,default:()=>({})},__schema:{type:Object,default:()=>({})},__vnodeProps:{type:Object,default:()=>({})},__isRootNode:Boolean},Vn=Object.keys(Ye);var Rt=function(e,t){return Rt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(n[o]=r[o])},Rt(e,t)};function Ke(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");Rt(e,t);function n(){this.constructor=e}e.prototype=t===null?Object.create(t):(n.prototype=t.prototype,new n)}var $=function(){return $=Object.assign||function(t){for(var n,r=1,o=arguments.length;r<o;r++){n=arguments[r];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},$.apply(this,arguments)};function Pi(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]]);return n}function Pt(e,t,n){if(n||arguments.length===2)for(var r=0,o=t.length,i;r<o;r++)(i||!(r in t))&&(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}var k;(function(e){e[e.EXPECT_ARGUMENT_CLOSING_BRACE=1]="EXPECT_ARGUMENT_CLOSING_BRACE",e[e.EMPTY_ARGUMENT=2]="EMPTY_ARGUMENT",e[e.MALFORMED_ARGUMENT=3]="MALFORMED_ARGUMENT",e[e.EXPECT_ARGUMENT_TYPE=4]="EXPECT_ARGUMENT_TYPE",e[e.INVALID_ARGUMENT_TYPE=5]="INVALID_ARGUMENT_TYPE",e[e.EXPECT_ARGUMENT_STYLE=6]="EXPECT_ARGUMENT_STYLE",e[e.INVALID_NUMBER_SKELETON=7]="INVALID_NUMBER_SKELETON",e[e.INVALID_DATE_TIME_SKELETON=8]="INVALID_DATE_TIME_SKELETON",e[e.EXPECT_NUMBER_SKELETON=9]="EXPECT_NUMBER_SKELETON",e[e.EXPECT_DATE_TIME_SKELETON=10]="EXPECT_DATE_TIME_SKELETON",e[e.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE=11]="UNCLOSED_QUOTE_IN_ARGUMENT_STYLE",e[e.EXPECT_SELECT_ARGUMENT_OPTIONS=12]="EXPECT_SELECT_ARGUMENT_OPTIONS",e[e.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE=13]="EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE=14]="INVALID_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR=15]="EXPECT_SELECT_ARGUMENT_SELECTOR",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR=16]="EXPECT_PLURAL_ARGUMENT_SELECTOR",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT=17]="EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT=18]="EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT",e[e.INVALID_PLURAL_ARGUMENT_SELECTOR=19]="INVALID_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_PLURAL_ARGUMENT_SELECTOR=20]="DUPLICATE_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_SELECT_ARGUMENT_SELECTOR=21]="DUPLICATE_SELECT_ARGUMENT_SELECTOR",e[e.MISSING_OTHER_CLAUSE=22]="MISSING_OTHER_CLAUSE",e[e.INVALID_TAG=23]="INVALID_TAG",e[e.INVALID_TAG_NAME=25]="INVALID_TAG_NAME",e[e.UNMATCHED_CLOSING_TAG=26]="UNMATCHED_CLOSING_TAG",e[e.UNCLOSED_TAG=27]="UNCLOSED_TAG"})(k||(k={}));var Z;(function(e){e[e.literal=0]="literal",e[e.argument=1]="argument",e[e.number=2]="number",e[e.date=3]="date",e[e.time=4]="time",e[e.select=5]="select",e[e.plural=6]="plural",e[e.pound=7]="pound",e[e.tag=8]="tag"})(Z||(Z={}));var He;(function(e){e[e.number=0]="number",e[e.dateTime=1]="dateTime"})(He||(He={}));function qn(e){return e.type===Z.literal}function Oi(e){return e.type===Z.argument}function Xn(e){return e.type===Z.number}function zn(e){return e.type===Z.date}function Wn(e){return e.type===Z.time}function Jn(e){return e.type===Z.select}function Zn(e){return e.type===Z.plural}function wi(e){return e.type===Z.pound}function Qn(e){return e.type===Z.tag}function Yn(e){return!!(e&&typeof e=="object"&&e.type===He.number)}function Ot(e){return!!(e&&typeof e=="object"&&e.type===He.dateTime)}var Kn=/[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,Ti=/(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;function Ni(e){var t={};return e.replace(Ti,function(n){var r=n.length;switch(n[0]){case"G":t.era=r===4?"long":r===5?"narrow":"short";break;case"y":t.year=r===2?"2-digit":"numeric";break;case"Y":case"u":case"U":case"r":throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");case"q":case"Q":throw new RangeError("`q/Q` (quarter) patterns are not supported");case"M":case"L":t.month=["numeric","2-digit","short","long","narrow"][r-1];break;case"w":case"W":throw new RangeError("`w/W` (week) patterns are not supported");case"d":t.day=["numeric","2-digit"][r-1];break;case"D":case"F":case"g":throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");case"E":t.weekday=r===4?"short":r===5?"narrow":"short";break;case"e":if(r<4)throw new RangeError("`e..eee` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][r-4];break;case"c":if(r<4)throw new RangeError("`c..ccc` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][r-4];break;case"a":t.hour12=!0;break;case"b":case"B":throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");case"h":t.hourCycle="h12",t.hour=["numeric","2-digit"][r-1];break;case"H":t.hourCycle="h23",t.hour=["numeric","2-digit"][r-1];break;case"K":t.hourCycle="h11",t.hour=["numeric","2-digit"][r-1];break;case"k":t.hourCycle="h24",t.hour=["numeric","2-digit"][r-1];break;case"j":case"J":case"C":throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");case"m":t.minute=["numeric","2-digit"][r-1];break;case"s":t.second=["numeric","2-digit"][r-1];break;case"S":case"A":throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");case"z":t.timeZoneName=r<4?"short":"long";break;case"Z":case"O":case"v":case"V":case"X":case"x":throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead")}return""}),t}var Ai=/[\t-\r \x85\u200E\u200F\u2028\u2029]/i;function Hi(e){if(e.length===0)throw new Error("Number skeleton cannot be empty");for(var t=e.split(Ai).filter(function(c){return c.length>0}),n=[],r=0,o=t;r<o.length;r++){var i=o[r],s=i.split("/");if(s.length===0)throw new Error("Invalid number skeleton");for(var u=s[0],f=s.slice(1),h=0,a=f;h<a.length;h++){var d=a[h];if(d.length===0)throw new Error("Invalid number skeleton")}n.push({stem:u,options:f})}return n}function Ii(e){return e.replace(/^(.*?)-/,"")}var er=/^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g,tr=/^(@+)?(\+|#+)?[rs]?$/g,Bi=/(\*)(0+)|(#+)(0+)|(0+)/g,nr=/^(0+)$/;function rr(e){var t={};return e[e.length-1]==="r"?t.roundingPriority="morePrecision":e[e.length-1]==="s"&&(t.roundingPriority="lessPrecision"),e.replace(tr,function(n,r,o){return typeof o!="string"?(t.minimumSignificantDigits=r.length,t.maximumSignificantDigits=r.length):o==="+"?t.minimumSignificantDigits=r.length:r[0]==="#"?t.maximumSignificantDigits=r.length:(t.minimumSignificantDigits=r.length,t.maximumSignificantDigits=r.length+(typeof o=="string"?o.length:0)),""}),t}function or(e){switch(e){case"sign-auto":return{signDisplay:"auto"};case"sign-accounting":case"()":return{currencySign:"accounting"};case"sign-always":case"+!":return{signDisplay:"always"};case"sign-accounting-always":case"()!":return{signDisplay:"always",currencySign:"accounting"};case"sign-except-zero":case"+?":return{signDisplay:"exceptZero"};case"sign-accounting-except-zero":case"()?":return{signDisplay:"exceptZero",currencySign:"accounting"};case"sign-never":case"+_":return{signDisplay:"never"}}}function Li(e){var t;if(e[0]==="E"&&e[1]==="E"?(t={notation:"engineering"},e=e.slice(2)):e[0]==="E"&&(t={notation:"scientific"},e=e.slice(1)),t){var n=e.slice(0,2);if(n==="+!"?(t.signDisplay="always",e=e.slice(2)):n==="+?"&&(t.signDisplay="exceptZero",e=e.slice(2)),!nr.test(e))throw new Error("Malformed concise eng/scientific notation");t.minimumIntegerDigits=e.length}return t}function ir(e){var t={},n=or(e);return n||t}function Mi(e){for(var t={},n=0,r=e;n<r.length;n++){var o=r[n];switch(o.stem){case"percent":case"%":t.style="percent";continue;case"%x100":t.style="percent",t.scale=100;continue;case"currency":t.style="currency",t.currency=o.options[0];continue;case"group-off":case",_":t.useGrouping=!1;continue;case"precision-integer":case".":t.maximumFractionDigits=0;continue;case"measure-unit":case"unit":t.style="unit",t.unit=Ii(o.options[0]);continue;case"compact-short":case"K":t.notation="compact",t.compactDisplay="short";continue;case"compact-long":case"KK":t.notation="compact",t.compactDisplay="long";continue;case"scientific":t=$($($({},t),{notation:"scientific"}),o.options.reduce(function(f,h){return $($({},f),ir(h))},{}));continue;case"engineering":t=$($($({},t),{notation:"engineering"}),o.options.reduce(function(f,h){return $($({},f),ir(h))},{}));continue;case"notation-simple":t.notation="standard";continue;case"unit-width-narrow":t.currencyDisplay="narrowSymbol",t.unitDisplay="narrow";continue;case"unit-width-short":t.currencyDisplay="code",t.unitDisplay="short";continue;case"unit-width-full-name":t.currencyDisplay="name",t.unitDisplay="long";continue;case"unit-width-iso-code":t.currencyDisplay="symbol";continue;case"scale":t.scale=parseFloat(o.options[0]);continue;case"integer-width":if(o.options.length>1)throw new RangeError("integer-width stems only accept a single optional option");o.options[0].replace(Bi,function(f,h,a,d,c,p){if(h)t.minimumIntegerDigits=a.length;else{if(d&&c)throw new Error("We currently do not support maximum integer digits");if(p)throw new Error("We currently do not support exact integer digits")}return""});continue}if(nr.test(o.stem)){t.minimumIntegerDigits=o.stem.length;continue}if(er.test(o.stem)){if(o.options.length>1)throw new RangeError("Fraction-precision stems only accept a single optional option");o.stem.replace(er,function(f,h,a,d,c,p){return a==="*"?t.minimumFractionDigits=h.length:d&&d[0]==="#"?t.maximumFractionDigits=d.length:c&&p?(t.minimumFractionDigits=c.length,t.maximumFractionDigits=c.length+p.length):(t.minimumFractionDigits=h.length,t.maximumFractionDigits=h.length),""});var i=o.options[0];i==="w"?t=$($({},t),{trailingZeroDisplay:"stripIfInteger"}):i&&(t=$($({},t),rr(i)));continue}if(tr.test(o.stem)){t=$($({},t),rr(o.stem));continue}var s=or(o.stem);s&&(t=$($({},t),s));var u=Li(o.stem);u&&(t=$($({},t),u))}return t}var et={"001":["H","h"],AC:["H","h","hb","hB"],AD:["H","hB"],AE:["h","hB","hb","H"],AF:["H","hb","hB","h"],AG:["h","hb","H","hB"],AI:["H","h","hb","hB"],AL:["h","H","hB"],AM:["H","hB"],AO:["H","hB"],AR:["H","h","hB","hb"],AS:["h","H"],AT:["H","hB"],AU:["h","hb","H","hB"],AW:["H","hB"],AX:["H"],AZ:["H","hB","h"],BA:["H","hB","h"],BB:["h","hb","H","hB"],BD:["h","hB","H"],BE:["H","hB"],BF:["H","hB"],BG:["H","hB","h"],BH:["h","hB","hb","H"],BJ:["H","hB"],BL:["H","hB"],BM:["h","hb","H","hB"],BN:["hb","hB","h","H"],BO:["H","hB","h","hb"],BQ:["H"],BR:["H","hB"],BS:["h","hb","H","hB"],BT:["h","H"],BW:["H","h","hb","hB"],BZ:["H","h","hb","hB"],CA:["h","hb","H","hB"],CC:["H","h","hb","hB"],CD:["hB","H"],CF:["H","h","hB"],CG:["H","hB"],CH:["H","hB","h"],CI:["H","hB"],CK:["H","h","hb","hB"],CL:["H","h","hB","hb"],CM:["H","h","hB"],CN:["H","hB","hb","h"],CO:["h","H","hB","hb"],CP:["H"],CR:["H","h","hB","hb"],CU:["H","h","hB","hb"],CV:["H","hB"],CX:["H","h","hb","hB"],CY:["h","H","hb","hB"],CZ:["H"],DE:["H","hB"],DG:["H","h","hb","hB"],DJ:["h","H"],DK:["H"],DM:["h","hb","H","hB"],DO:["h","H","hB","hb"],DZ:["h","hB","hb","H"],EA:["H","h","hB","hb"],EC:["H","hB","h","hb"],EE:["H","hB"],EG:["h","hB","hb","H"],EH:["h","hB","hb","H"],ER:["h","H"],ES:["H","hB","h","hb"],ET:["hB","hb","h","H"],FI:["H"],FJ:["h","hb","H","hB"],FK:["H","h","hb","hB"],FM:["h","hb","H","hB"],FR:["H","hB"],GA:["H","hB"],GB:["H","h","hb","hB"],GD:["h","hb","H","hB"],GE:["H","hB","h"],GF:["H","hB"],GG:["H","h","hb","hB"],GH:["h","H"],GI:["H","h","hb","hB"],GM:["h","hb","H","hB"],GN:["H","hB"],GP:["H","hB"],GQ:["H","hB","h","hb"],GR:["h","H","hb","hB"],GT:["H","h","hB","hb"],GU:["h","hb","H","hB"],GW:["H","hB"],GY:["h","hb","H","hB"],HK:["h","hB","hb","H"],HN:["H","h","hB","hb"],HR:["H","hB"],IC:["H","h","hB","hb"],ID:["H"],IE:["H","h","hb","hB"],IL:["H","hB"],IM:["H","h","hb","hB"],IN:["h","H"],IO:["H","h","hb","hB"],IQ:["h","hB","hb","H"],IR:["hB","H"],IS:["H"],IT:["H","hB"],JE:["H","h","hb","hB"],JM:["h","hb","H","hB"],JO:["h","hB","hb","H"],JP:["H","h","K"],KE:["hB","hb","H","h"],KG:["H","h","hB","hb"],KH:["hB","h","H","hb"],KI:["h","hb","H","hB"],KM:["H","h","hB","hb"],KN:["h","hb","H","hB"],KP:["h","H","hB","hb"],KR:["h","H","hB","hb"],KW:["h","hB","hb","H"],KY:["h","hb","H","hB"],KZ:["H","hB"],LA:["H","hb","hB","h"],LB:["h","hB","hb","H"],LC:["h","hb","H","hB"],LI:["H","hB","h"],LK:["H","h","hB","hb"],LR:["h","hb","H","hB"],LS:["h","H"],LT:["H","h","hb","hB"],LU:["H","h","hB"],LV:["H","hB","hb","h"],LY:["h","hB","hb","H"],MA:["H","h","hB","hb"],MC:["H","hB"],MD:["H","hB"],ME:["H","hB","h"],MF:["H","hB"],MH:["h","hb","H","hB"],MK:["H","h","hb","hB"],ML:["H"],MM:["hB","hb","H","h"],MN:["H","h","hb","hB"],MO:["h","hB","hb","H"],MP:["h","hb","H","hB"],MQ:["H","hB"],MR:["h","hB","hb","H"],MS:["H","h","hb","hB"],MW:["h","hb","H","hB"],MX:["H","h","hB","hb"],MY:["hb","hB","h","H"],MZ:["H","hB"],NA:["h","H","hB","hb"],NC:["H","hB"],NE:["H"],NF:["H","h","hb","hB"],NG:["H","h","hb","hB"],NI:["H","h","hB","hb"],NL:["H","hB"],NP:["H","h","hB"],NR:["H","h","hb","hB"],NU:["H","h","hb","hB"],NZ:["h","hb","H","hB"],OM:["h","hB","hb","H"],PA:["h","H","hB","hb"],PE:["H","hB","h","hb"],PF:["H","h","hB"],PG:["h","H"],PH:["h","hB","hb","H"],PK:["h","hB","H"],PM:["H","hB"],PN:["H","h","hb","hB"],PR:["h","H","hB","hb"],PS:["h","hB","hb","H"],PT:["H","hB"],PW:["h","H"],PY:["H","h","hB","hb"],QA:["h","hB","hb","H"],RE:["H","hB"],RO:["H","hB"],RS:["H","hB","h"],RU:["H"],SA:["h","hB","hb","H"],SB:["h","hb","H","hB"],SC:["H","h","hB"],SD:["h","hB","hb","H"],SE:["H"],SG:["h","hb","H","hB"],SH:["H","h","hb","hB"],SI:["H","hB"],SJ:["H"],SK:["H"],SL:["h","hb","H","hB"],SM:["H","h","hB"],SN:["H","h","hB"],SO:["h","H"],SR:["H","hB"],SS:["h","hb","H","hB"],ST:["H","hB"],SV:["H","h","hB","hb"],SX:["H","h","hb","hB"],SY:["h","hB","hb","H"],SZ:["h","hb","H","hB"],TA:["H","h","hb","hB"],TC:["h","hb","H","hB"],TD:["h","H","hB"],TF:["H","h","hB"],TG:["H","hB"],TL:["H","hB","hb","h"],TN:["h","hB","hb","H"],TO:["h","H"],TR:["H","hB"],TT:["h","hb","H","hB"],TW:["hB","hb","h","H"],TZ:["hB","hb","H","h"],UA:["H","hB","h"],UG:["hB","hb","H","h"],UM:["h","hb","H","hB"],US:["h","hb","H","hB"],UY:["H","h","hB","hb"],UZ:["H","hB","h"],VA:["H","h","hB"],VC:["h","hb","H","hB"],VE:["h","H","hB","hb"],VG:["h","hb","H","hB"],VI:["h","hb","H","hB"],VU:["h","H"],WF:["H","hB"],WS:["h","H"],XK:["H","hB","h"],YE:["h","hB","hb","H"],YT:["H","hB"],ZA:["H","h","hb","hB"],ZM:["h","hb","H","hB"],"af-ZA":["H","h","hB","hb"],"ar-001":["h","hB","hb","H"],"ca-ES":["H","h","hB"],"en-001":["h","hb","H","hB"],"es-BO":["H","h","hB","hb"],"es-BR":["H","h","hB","hb"],"es-EC":["H","h","hB","hb"],"es-ES":["H","h","hB","hb"],"es-GQ":["H","h","hB","hb"],"es-PE":["H","h","hB","hb"],"fr-CA":["H","h","hB"],"gl-ES":["H","h","hB"],"gu-IN":["hB","hb","h","H"],"hi-IN":["hB","h","H"],"it-CH":["H","h","hB"],"it-IT":["H","h","hB"],"kn-IN":["hB","h","H"],"ml-IN":["hB","h","H"],"mr-IN":["hB","hb","h","H"],"pa-IN":["hB","hb","h","H"],"ta-IN":["hB","h","hb","H"],"te-IN":["hB","h","H"],"zu-ZA":["H","hB","hb","h"]};function Ui(e,t){for(var n="",r=0;r<e.length;r++){var o=e.charAt(r);if(o==="j"){for(var i=0;r+1<e.length&&e.charAt(r+1)===o;)i++,r++;var s=1+(i&1),u=i<2?1:3+(i>>1),f="a",h=Di(t);for((h=="H"||h=="k")&&(u=0);u-- >0;)n+=f;for(;s-- >0;)n=h+n}else o==="J"?n+="H":n+=o}return n}function Di(e){var t=e.hourCycle;if(t===void 0&&e.hourCycles&&e.hourCycles.length&&(t=e.hourCycles[0]),t)switch(t){case"h24":return"k";case"h23":return"H";case"h12":return"h";case"h11":return"K";default:throw new Error("Invalid hourCycle")}var n=e.language,r;n!=="root"&&(r=e.maximize().region);var o=et[r||""]||et[n||""]||et["".concat(n,"-001")]||et["001"];return o[0]}var wt,ji=new RegExp("^".concat(Kn.source,"*")),ki=new RegExp("".concat(Kn.source,"*$"));function F(e,t){return{start:e,end:t}}var Gi=!!String.prototype.startsWith,Fi=!!String.fromCodePoint,$i=!!Object.fromEntries,Vi=!!String.prototype.codePointAt,qi=!!String.prototype.trimStart,Xi=!!String.prototype.trimEnd,zi=!!Number.isSafeInteger,Wi=zi?Number.isSafeInteger:function(e){return typeof e=="number"&&isFinite(e)&&Math.floor(e)===e&&Math.abs(e)<=9007199254740991},Tt=!0;try{var Ji=cr("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");Tt=((wt=Ji.exec("a"))===null||wt===void 0?void 0:wt[0])==="a"}catch(e){Tt=!1}var sr=Gi?function(t,n,r){return t.startsWith(n,r)}:function(t,n,r){return t.slice(r,r+n.length)===n},Nt=Fi?String.fromCodePoint:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r="",o=t.length,i=0,s;o>i;){if(s=t[i++],s>1114111)throw RangeError(s+" is not a valid code point");r+=s<65536?String.fromCharCode(s):String.fromCharCode(((s-=65536)>>10)+55296,s%1024+56320)}return r},ar=$i?Object.fromEntries:function(t){for(var n={},r=0,o=t;r<o.length;r++){var i=o[r],s=i[0],u=i[1];n[s]=u}return n},ur=Vi?function(t,n){return t.codePointAt(n)}:function(t,n){var r=t.length;if(!(n<0||n>=r)){var o=t.charCodeAt(n),i;return o<55296||o>56319||n+1===r||(i=t.charCodeAt(n+1))<56320||i>57343?o:(o-55296<<10)+(i-56320)+65536}},Zi=qi?function(t){return t.trimStart()}:function(t){return t.replace(ji,"")},Qi=Xi?function(t){return t.trimEnd()}:function(t){return t.replace(ki,"")};function cr(e,t){return new RegExp(e,t)}var At;if(Tt){var lr=cr("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");At=function(t,n){var r;lr.lastIndex=n;var o=lr.exec(t);return(r=o[1])!==null&&r!==void 0?r:""}}else At=function(t,n){for(var r=[];;){var o=ur(t,n);if(o===void 0||fr(o)||ts(o))break;r.push(o),n+=o>=65536?2:1}return Nt.apply(void 0,r)};var Yi=function(){function e(t,n){n===void 0&&(n={}),this.message=t,this.position={offset:0,line:1,column:1},this.ignoreTag=!!n.ignoreTag,this.locale=n.locale,this.requiresOtherClause=!!n.requiresOtherClause,this.shouldParseSkeletons=!!n.shouldParseSkeletons}return e.prototype.parse=function(){if(this.offset()!==0)throw Error("parser can only be used once");return this.parseMessage(0,"",!1)},e.prototype.parseMessage=function(t,n,r){for(var o=[];!this.isEOF();){var i=this.char();if(i===123){var s=this.parseArgument(t,r);if(s.err)return s;o.push(s.val)}else{if(i===125&&t>0)break;if(i===35&&(n==="plural"||n==="selectordinal")){var u=this.clonePosition();this.bump(),o.push({type:Z.pound,location:F(u,this.clonePosition())})}else if(i===60&&!this.ignoreTag&&this.peek()===47){if(r)break;return this.error(k.UNMATCHED_CLOSING_TAG,F(this.clonePosition(),this.clonePosition()))}else if(i===60&&!this.ignoreTag&&Ht(this.peek()||0)){var s=this.parseTag(t,n);if(s.err)return s;o.push(s.val)}else{var s=this.parseLiteral(t,n);if(s.err)return s;o.push(s.val)}}}return{val:o,err:null}},e.prototype.parseTag=function(t,n){var r=this.clonePosition();this.bump();var o=this.parseTagName();if(this.bumpSpace(),this.bumpIf("/>"))return{val:{type:Z.literal,value:"<".concat(o,"/>"),location:F(r,this.clonePosition())},err:null};if(this.bumpIf(">")){var i=this.parseMessage(t+1,n,!0);if(i.err)return i;var s=i.val,u=this.clonePosition();if(this.bumpIf("</")){if(this.isEOF()||!Ht(this.char()))return this.error(k.INVALID_TAG,F(u,this.clonePosition()));var f=this.clonePosition(),h=this.parseTagName();return o!==h?this.error(k.UNMATCHED_CLOSING_TAG,F(f,this.clonePosition())):(this.bumpSpace(),this.bumpIf(">")?{val:{type:Z.tag,value:o,children:s,location:F(r,this.clonePosition())},err:null}:this.error(k.INVALID_TAG,F(u,this.clonePosition())))}else return this.error(k.UNCLOSED_TAG,F(r,this.clonePosition()))}else return this.error(k.INVALID_TAG,F(r,this.clonePosition()))},e.prototype.parseTagName=function(){var t=this.offset();for(this.bump();!this.isEOF()&&es(this.char());)this.bump();return this.message.slice(t,this.offset())},e.prototype.parseLiteral=function(t,n){for(var r=this.clonePosition(),o="";;){var i=this.tryParseQuote(n);if(i){o+=i;continue}var s=this.tryParseUnquoted(t,n);if(s){o+=s;continue}var u=this.tryParseLeftAngleBracket();if(u){o+=u;continue}break}var f=F(r,this.clonePosition());return{val:{type:Z.literal,value:o,location:f},err:null}},e.prototype.tryParseLeftAngleBracket=function(){return!this.isEOF()&&this.char()===60&&(this.ignoreTag||!Ki(this.peek()||0))?(this.bump(),"<"):null},e.prototype.tryParseQuote=function(t){if(this.isEOF()||this.char()!==39)return null;switch(this.peek()){case 39:return this.bump(),this.bump(),"'";case 123:case 60:case 62:case 125:break;case 35:if(t==="plural"||t==="selectordinal")break;return null;default:return null}this.bump();var n=[this.char()];for(this.bump();!this.isEOF();){var r=this.char();if(r===39)if(this.peek()===39)n.push(39),this.bump();else{this.bump();break}else n.push(r);this.bump()}return Nt.apply(void 0,n)},e.prototype.tryParseUnquoted=function(t,n){if(this.isEOF())return null;var r=this.char();return r===60||r===123||r===35&&(n==="plural"||n==="selectordinal")||r===125&&t>0?null:(this.bump(),Nt(r))},e.prototype.parseArgument=function(t,n){var r=this.clonePosition();if(this.bump(),this.bumpSpace(),this.isEOF())return this.error(k.EXPECT_ARGUMENT_CLOSING_BRACE,F(r,this.clonePosition()));if(this.char()===125)return this.bump(),this.error(k.EMPTY_ARGUMENT,F(r,this.clonePosition()));var o=this.parseIdentifierIfPossible().value;if(!o)return this.error(k.MALFORMED_ARGUMENT,F(r,this.clonePosition()));if(this.bumpSpace(),this.isEOF())return this.error(k.EXPECT_ARGUMENT_CLOSING_BRACE,F(r,this.clonePosition()));switch(this.char()){case 125:return this.bump(),{val:{type:Z.argument,value:o,location:F(r,this.clonePosition())},err:null};case 44:return this.bump(),this.bumpSpace(),this.isEOF()?this.error(k.EXPECT_ARGUMENT_CLOSING_BRACE,F(r,this.clonePosition())):this.parseArgumentOptions(t,n,o,r);default:return this.error(k.MALFORMED_ARGUMENT,F(r,this.clonePosition()))}},e.prototype.parseIdentifierIfPossible=function(){var t=this.clonePosition(),n=this.offset(),r=At(this.message,n),o=n+r.length;this.bumpTo(o);var i=this.clonePosition(),s=F(t,i);return{value:r,location:s}},e.prototype.parseArgumentOptions=function(t,n,r,o){var i,s=this.clonePosition(),u=this.parseIdentifierIfPossible().value,f=this.clonePosition();switch(u){case"":return this.error(k.EXPECT_ARGUMENT_TYPE,F(s,f));case"number":case"date":case"time":{this.bumpSpace();var h=null;if(this.bumpIf(",")){this.bumpSpace();var a=this.clonePosition(),d=this.parseSimpleArgStyleIfPossible();if(d.err)return d;var c=Qi(d.val);if(c.length===0)return this.error(k.EXPECT_ARGUMENT_STYLE,F(this.clonePosition(),this.clonePosition()));var p=F(a,this.clonePosition());h={style:c,styleLocation:p}}var y=this.tryParseArgumentClose(o);if(y.err)return y;var O=F(o,this.clonePosition());if(h&&sr(h==null?void 0:h.style,"::",0)){var E=Zi(h.style.slice(2));if(u==="number"){var d=this.parseNumberSkeletonFromString(E,h.styleLocation);return d.err?d:{val:{type:Z.number,value:r,location:O,style:d.val},err:null}}else{if(E.length===0)return this.error(k.EXPECT_DATE_TIME_SKELETON,O);var R=E;this.locale&&(R=Ui(E,this.locale));var c={type:He.dateTime,pattern:R,location:h.styleLocation,parsedOptions:this.shouldParseSkeletons?Ni(R):{}},P=u==="date"?Z.date:Z.time;return{val:{type:P,value:r,location:O,style:c},err:null}}}return{val:{type:u==="number"?Z.number:u==="date"?Z.date:Z.time,value:r,location:O,style:(i=h==null?void 0:h.style)!==null&&i!==void 0?i:null},err:null}}case"plural":case"selectordinal":case"select":{var _=this.clonePosition();if(this.bumpSpace(),!this.bumpIf(","))return this.error(k.EXPECT_SELECT_ARGUMENT_OPTIONS,F(_,$({},_)));this.bumpSpace();var N=this.parseIdentifierIfPossible(),b=0;if(u!=="select"&&N.value==="offset"){if(!this.bumpIf(":"))return this.error(k.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,F(this.clonePosition(),this.clonePosition()));this.bumpSpace();var d=this.tryParseDecimalInteger(k.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,k.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);if(d.err)return d;this.bumpSpace(),N=this.parseIdentifierIfPossible(),b=d.val}var S=this.tryParsePluralOrSelectOptions(t,u,n,N);if(S.err)return S;var y=this.tryParseArgumentClose(o);if(y.err)return y;var w=F(o,this.clonePosition());return u==="select"?{val:{type:Z.select,value:r,options:ar(S.val),location:w},err:null}:{val:{type:Z.plural,value:r,options:ar(S.val),offset:b,pluralType:u==="plural"?"cardinal":"ordinal",location:w},err:null}}default:return this.error(k.INVALID_ARGUMENT_TYPE,F(s,f))}},e.prototype.tryParseArgumentClose=function(t){return this.isEOF()||this.char()!==125?this.error(k.EXPECT_ARGUMENT_CLOSING_BRACE,F(t,this.clonePosition())):(this.bump(),{val:!0,err:null})},e.prototype.parseSimpleArgStyleIfPossible=function(){for(var t=0,n=this.clonePosition();!this.isEOF();){var r=this.char();switch(r){case 39:{this.bump();var o=this.clonePosition();if(!this.bumpUntil("'"))return this.error(k.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,F(o,this.clonePosition()));this.bump();break}case 123:{t+=1,this.bump();break}case 125:{if(t>0)t-=1;else return{val:this.message.slice(n.offset,this.offset()),err:null};break}default:this.bump();break}}return{val:this.message.slice(n.offset,this.offset()),err:null}},e.prototype.parseNumberSkeletonFromString=function(t,n){var r=[];try{r=Hi(t)}catch(o){return this.error(k.INVALID_NUMBER_SKELETON,n)}return{val:{type:He.number,tokens:r,location:n,parsedOptions:this.shouldParseSkeletons?Mi(r):{}},err:null}},e.prototype.tryParsePluralOrSelectOptions=function(t,n,r,o){for(var i,s=!1,u=[],f=new Set,h=o.value,a=o.location;;){if(h.length===0){var d=this.clonePosition();if(n!=="select"&&this.bumpIf("=")){var c=this.tryParseDecimalInteger(k.EXPECT_PLURAL_ARGUMENT_SELECTOR,k.INVALID_PLURAL_ARGUMENT_SELECTOR);if(c.err)return c;a=F(d,this.clonePosition()),h=this.message.slice(d.offset,this.offset())}else break}if(f.has(h))return this.error(n==="select"?k.DUPLICATE_SELECT_ARGUMENT_SELECTOR:k.DUPLICATE_PLURAL_ARGUMENT_SELECTOR,a);h==="other"&&(s=!0),this.bumpSpace();var p=this.clonePosition();if(!this.bumpIf("{"))return this.error(n==="select"?k.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT:k.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,F(this.clonePosition(),this.clonePosition()));var y=this.parseMessage(t+1,n,r);if(y.err)return y;var O=this.tryParseArgumentClose(p);if(O.err)return O;u.push([h,{value:y.val,location:F(p,this.clonePosition())}]),f.add(h),this.bumpSpace(),i=this.parseIdentifierIfPossible(),h=i.value,a=i.location}return u.length===0?this.error(n==="select"?k.EXPECT_SELECT_ARGUMENT_SELECTOR:k.EXPECT_PLURAL_ARGUMENT_SELECTOR,F(this.clonePosition(),this.clonePosition())):this.requiresOtherClause&&!s?this.error(k.MISSING_OTHER_CLAUSE,F(this.clonePosition(),this.clonePosition())):{val:u,err:null}},e.prototype.tryParseDecimalInteger=function(t,n){var r=1,o=this.clonePosition();this.bumpIf("+")||this.bumpIf("-")&&(r=-1);for(var i=!1,s=0;!this.isEOF();){var u=this.char();if(u>=48&&u<=57)i=!0,s=s*10+(u-48),this.bump();else break}var f=F(o,this.clonePosition());return i?(s*=r,Wi(s)?{val:s,err:null}:this.error(n,f)):this.error(t,f)},e.prototype.offset=function(){return this.position.offset},e.prototype.isEOF=function(){return this.offset()===this.message.length},e.prototype.clonePosition=function(){return{offset:this.position.offset,line:this.position.line,column:this.position.column}},e.prototype.char=function(){var t=this.position.offset;if(t>=this.message.length)throw Error("out of bound");var n=ur(this.message,t);if(n===void 0)throw Error("Offset ".concat(t," is at invalid UTF-16 code unit boundary"));return n},e.prototype.error=function(t,n){return{val:null,err:{kind:t,message:this.message,location:n}}},e.prototype.bump=function(){if(!this.isEOF()){var t=this.char();t===10?(this.position.line+=1,this.position.column=1,this.position.offset+=1):(this.position.column+=1,this.position.offset+=t<65536?1:2)}},e.prototype.bumpIf=function(t){if(sr(this.message,t,this.offset())){for(var n=0;n<t.length;n++)this.bump();return!0}return!1},e.prototype.bumpUntil=function(t){var n=this.offset(),r=this.message.indexOf(t,n);return r>=0?(this.bumpTo(r),!0):(this.bumpTo(this.message.length),!1)},e.prototype.bumpTo=function(t){if(this.offset()>t)throw Error("targetOffset ".concat(t," must be greater than or equal to the current offset ").concat(this.offset()));for(t=Math.min(t,this.message.length);;){var n=this.offset();if(n===t)break;if(n>t)throw Error("targetOffset ".concat(t," is at invalid UTF-16 code unit boundary"));if(this.bump(),this.isEOF())break}},e.prototype.bumpSpace=function(){for(;!this.isEOF()&&fr(this.char());)this.bump()},e.prototype.peek=function(){if(this.isEOF())return null;var t=this.char(),n=this.offset(),r=this.message.charCodeAt(n+(t>=65536?2:1));return r!=null?r:null},e}();function Ht(e){return e>=97&&e<=122||e>=65&&e<=90}function Ki(e){return Ht(e)||e===47}function es(e){return e===45||e===46||e>=48&&e<=57||e===95||e>=97&&e<=122||e>=65&&e<=90||e==183||e>=192&&e<=214||e>=216&&e<=246||e>=248&&e<=893||e>=895&&e<=8191||e>=8204&&e<=8205||e>=8255&&e<=8256||e>=8304&&e<=8591||e>=11264&&e<=12271||e>=12289&&e<=55295||e>=63744&&e<=64975||e>=65008&&e<=65533||e>=65536&&e<=983039}function fr(e){return e>=9&&e<=13||e===32||e===133||e>=8206&&e<=8207||e===8232||e===8233}function ts(e){return e>=33&&e<=35||e===36||e>=37&&e<=39||e===40||e===41||e===42||e===43||e===44||e===45||e>=46&&e<=47||e>=58&&e<=59||e>=60&&e<=62||e>=63&&e<=64||e===91||e===92||e===93||e===94||e===96||e===123||e===124||e===125||e===126||e===161||e>=162&&e<=165||e===166||e===167||e===169||e===171||e===172||e===174||e===176||e===177||e===182||e===187||e===191||e===215||e===247||e>=8208&&e<=8213||e>=8214&&e<=8215||e===8216||e===8217||e===8218||e>=8219&&e<=8220||e===8221||e===8222||e===8223||e>=8224&&e<=8231||e>=8240&&e<=8248||e===8249||e===8250||e>=8251&&e<=8254||e>=8257&&e<=8259||e===8260||e===8261||e===8262||e>=8263&&e<=8273||e===8274||e===8275||e>=8277&&e<=8286||e>=8592&&e<=8596||e>=8597&&e<=8601||e>=8602&&e<=8603||e>=8604&&e<=8607||e===8608||e>=8609&&e<=8610||e===8611||e>=8612&&e<=8613||e===8614||e>=8615&&e<=8621||e===8622||e>=8623&&e<=8653||e>=8654&&e<=8655||e>=8656&&e<=8657||e===8658||e===8659||e===8660||e>=8661&&e<=8691||e>=8692&&e<=8959||e>=8960&&e<=8967||e===8968||e===8969||e===8970||e===8971||e>=8972&&e<=8991||e>=8992&&e<=8993||e>=8994&&e<=9e3||e===9001||e===9002||e>=9003&&e<=9083||e===9084||e>=9085&&e<=9114||e>=9115&&e<=9139||e>=9140&&e<=9179||e>=9180&&e<=9185||e>=9186&&e<=9254||e>=9255&&e<=9279||e>=9280&&e<=9290||e>=9291&&e<=9311||e>=9472&&e<=9654||e===9655||e>=9656&&e<=9664||e===9665||e>=9666&&e<=9719||e>=9720&&e<=9727||e>=9728&&e<=9838||e===9839||e>=9840&&e<=10087||e===10088||e===10089||e===10090||e===10091||e===10092||e===10093||e===10094||e===10095||e===10096||e===10097||e===10098||e===10099||e===10100||e===10101||e>=10132&&e<=10175||e>=10176&&e<=10180||e===10181||e===10182||e>=10183&&e<=10213||e===10214||e===10215||e===10216||e===10217||e===10218||e===10219||e===10220||e===10221||e===10222||e===10223||e>=10224&&e<=10239||e>=10240&&e<=10495||e>=10496&&e<=10626||e===10627||e===10628||e===10629||e===10630||e===10631||e===10632||e===10633||e===10634||e===10635||e===10636||e===10637||e===10638||e===10639||e===10640||e===10641||e===10642||e===10643||e===10644||e===10645||e===10646||e===10647||e===10648||e>=10649&&e<=10711||e===10712||e===10713||e===10714||e===10715||e>=10716&&e<=10747||e===10748||e===10749||e>=10750&&e<=11007||e>=11008&&e<=11055||e>=11056&&e<=11076||e>=11077&&e<=11078||e>=11079&&e<=11084||e>=11085&&e<=11123||e>=11124&&e<=11125||e>=11126&&e<=11157||e===11158||e>=11159&&e<=11263||e>=11776&&e<=11777||e===11778||e===11779||e===11780||e===11781||e>=11782&&e<=11784||e===11785||e===11786||e===11787||e===11788||e===11789||e>=11790&&e<=11798||e===11799||e>=11800&&e<=11801||e===11802||e===11803||e===11804||e===11805||e>=11806&&e<=11807||e===11808||e===11809||e===11810||e===11811||e===11812||e===11813||e===11814||e===11815||e===11816||e===11817||e>=11818&&e<=11822||e===11823||e>=11824&&e<=11833||e>=11834&&e<=11835||e>=11836&&e<=11839||e===11840||e===11841||e===11842||e>=11843&&e<=11855||e>=11856&&e<=11857||e===11858||e>=11859&&e<=11903||e>=12289&&e<=12291||e===12296||e===12297||e===12298||e===12299||e===12300||e===12301||e===12302||e===12303||e===12304||e===12305||e>=12306&&e<=12307||e===12308||e===12309||e===12310||e===12311||e===12312||e===12313||e===12314||e===12315||e===12316||e===12317||e>=12318&&e<=12319||e===12320||e===12336||e===64830||e===64831||e>=65093&&e<=65094}function It(e){e.forEach(function(t){if(delete t.location,Jn(t)||Zn(t))for(var n in t.options)delete t.options[n].location,It(t.options[n].value);else Xn(t)&&Yn(t.style)||(zn(t)||Wn(t))&&Ot(t.style)?delete t.style.location:Qn(t)&&It(t.children)})}function ns(e,t){t===void 0&&(t={}),t=$({shouldParseSkeletons:!0,requiresOtherClause:!0},t);var n=new Yi(e,t).parse();if(n.err){var r=SyntaxError(k[n.err.kind]);throw r.location=n.err.location,r.originalMessage=n.err.message,r}return t!=null&&t.captureLocation||It(n.val),n.val}function Bt(e,t){var n=t&&t.cache?t.cache:us,r=t&&t.serializer?t.serializer:as,o=t&&t.strategy?t.strategy:os;return o(e,{cache:n,serializer:r})}function rs(e){return e==null||typeof e=="number"||typeof e=="boolean"}function hr(e,t,n,r){var o=rs(r)?r:n(r),i=t.get(o);return typeof i=="undefined"&&(i=e.call(this,r),t.set(o,i)),i}function dr(e,t,n){var r=Array.prototype.slice.call(arguments,3),o=n(r),i=t.get(o);return typeof i=="undefined"&&(i=e.apply(this,r),t.set(o,i)),i}function Lt(e,t,n,r,o){return n.bind(t,e,r,o)}function os(e,t){var n=e.length===1?hr:dr;return Lt(e,this,n,t.cache.create(),t.serializer)}function is(e,t){return Lt(e,this,dr,t.cache.create(),t.serializer)}function ss(e,t){return Lt(e,this,hr,t.cache.create(),t.serializer)}var as=function(){return JSON.stringify(arguments)};function Mt(){this.cache=Object.create(null)}Mt.prototype.get=function(e){return this.cache[e]},Mt.prototype.set=function(e,t){this.cache[e]=t};var us={create:function(){return new Mt}},Ut={variadic:is,monadic:ss},Ie;(function(e){e.MISSING_VALUE="MISSING_VALUE",e.INVALID_VALUE="INVALID_VALUE",e.MISSING_INTL_API="MISSING_INTL_API"})(Ie||(Ie={}));var tt=function(e){Ke(t,e);function t(n,r,o){var i=e.call(this,n)||this;return i.code=r,i.originalMessage=o,i}return t.prototype.toString=function(){return"[formatjs Error: ".concat(this.code,"] ").concat(this.message)},t}(Error),pr=function(e){Ke(t,e);function t(n,r,o,i){return e.call(this,'Invalid values for "'.concat(n,'": "').concat(r,'". Options are "').concat(Object.keys(o).join('", "'),'"'),Ie.INVALID_VALUE,i)||this}return t}(tt),cs=function(e){Ke(t,e);function t(n,r,o){return e.call(this,'Value for "'.concat(n,'" must be of type ').concat(r),Ie.INVALID_VALUE,o)||this}return t}(tt),ls=function(e){Ke(t,e);function t(n,r){return e.call(this,'The intl string context variable "'.concat(n,'" was not provided to the string "').concat(r,'"'),Ie.MISSING_VALUE,r)||this}return t}(tt),oe;(function(e){e[e.literal=0]="literal",e[e.object=1]="object"})(oe||(oe={}));function fs(e){return e.length<2?e:e.reduce(function(t,n){var r=t[t.length-1];return!r||r.type!==oe.literal||n.type!==oe.literal?t.push(n):r.value+=n.value,t},[])}function hs(e){return typeof e=="function"}function nt(e,t,n,r,o,i,s){if(e.length===1&&qn(e[0]))return[{type:oe.literal,value:e[0].value}];for(var u=[],f=0,h=e;f<h.length;f++){var a=h[f];if(qn(a)){u.push({type:oe.literal,value:a.value});continue}if(wi(a)){typeof i=="number"&&u.push({type:oe.literal,value:n.getNumberFormat(t).format(i)});continue}var d=a.value;if(!(o&&d in o))throw new ls(d,s);var c=o[d];if(Oi(a)){(!c||typeof c=="string"||typeof c=="number")&&(c=typeof c=="string"||typeof c=="number"?String(c):""),u.push({type:typeof c=="string"?oe.literal:oe.object,value:c});continue}if(zn(a)){var p=typeof a.style=="string"?r.date[a.style]:Ot(a.style)?a.style.parsedOptions:void 0;u.push({type:oe.literal,value:n.getDateTimeFormat(t,p).format(c)});continue}if(Wn(a)){var p=typeof a.style=="string"?r.time[a.style]:Ot(a.style)?a.style.parsedOptions:r.time.medium;u.push({type:oe.literal,value:n.getDateTimeFormat(t,p).format(c)});continue}if(Xn(a)){var p=typeof a.style=="string"?r.number[a.style]:Yn(a.style)?a.style.parsedOptions:void 0;p&&p.scale&&(c=c*(p.scale||1)),u.push({type:oe.literal,value:n.getNumberFormat(t,p).format(c)});continue}if(Qn(a)){var y=a.children,O=a.value,E=o[O];if(!hs(E))throw new cs(O,"function",s);var R=nt(y,t,n,r,o,i),P=E(R.map(function(b){return b.value}));Array.isArray(P)||(P=[P]),u.push.apply(u,P.map(function(b){return{type:typeof b=="string"?oe.literal:oe.object,value:b}}))}if(Jn(a)){var _=a.options[c]||a.options.other;if(!_)throw new pr(a.value,c,Object.keys(a.options),s);u.push.apply(u,nt(_.value,t,n,r,o));continue}if(Zn(a)){var _=a.options["=".concat(c)];if(!_){if(!Intl.PluralRules)throw new tt(`Intl.PluralRules is not available in this environment.
Try polyfilling it using "@formatjs/intl-pluralrules"
`,Ie.MISSING_INTL_API,s);var N=n.getPluralRules(t,{type:a.pluralType}).select(c-(a.offset||0));_=a.options[N]||a.options.other}if(!_)throw new pr(a.value,c,Object.keys(a.options),s);u.push.apply(u,nt(_.value,t,n,r,o,c-(a.offset||0)));continue}}return fs(u)}function ds(e,t){return t?$($($({},e||{}),t||{}),Object.keys(e).reduce(function(n,r){return n[r]=$($({},e[r]),t[r]||{}),n},{})):e}function ps(e,t){return t?Object.keys(e).reduce(function(n,r){return n[r]=ds(e[r],t[r]),n},$({},e)):e}function Dt(e){return{create:function(){return{get:function(t){return e[t]},set:function(t,n){e[t]=n}}}}}function ms(e){return e===void 0&&(e={number:{},dateTime:{},pluralRules:{}}),{getNumberFormat:Bt(function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return new((t=Intl.NumberFormat).bind.apply(t,Pt([void 0],n,!1)))},{cache:Dt(e.number),strategy:Ut.variadic}),getDateTimeFormat:Bt(function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return new((t=Intl.DateTimeFormat).bind.apply(t,Pt([void 0],n,!1)))},{cache:Dt(e.dateTime),strategy:Ut.variadic}),getPluralRules:Bt(function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return new((t=Intl.PluralRules).bind.apply(t,Pt([void 0],n,!1)))},{cache:Dt(e.pluralRules),strategy:Ut.variadic})}}var gs=function(){function e(t,n,r,o){n===void 0&&(n=e.defaultLocale);var i=this;if(this.formatterCache={number:{},dateTime:{},pluralRules:{}},this.format=function(f){var h=i.formatToParts(f);if(h.length===1)return h[0].value;var a=h.reduce(function(d,c){return!d.length||c.type!==oe.literal||typeof d[d.length-1]!="string"?d.push(c.value):d[d.length-1]+=c.value,d},[]);return a.length<=1?a[0]||"":a},this.formatToParts=function(f){return nt(i.ast,i.locales,i.formatters,i.formats,f,void 0,i.message)},this.resolvedOptions=function(){var f;return{locale:((f=i.resolvedLocale)===null||f===void 0?void 0:f.toString())||Intl.NumberFormat.supportedLocalesOf(i.locales)[0]}},this.getAst=function(){return i.ast},this.locales=n,this.resolvedLocale=e.resolveLocale(n),typeof t=="string"){if(this.message=t,!e.__parse)throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");var s=o||{};s.formatters;var u=Pi(s,["formatters"]);this.ast=e.__parse(t,$($({},u),{locale:this.resolvedLocale}))}else this.ast=t;if(!Array.isArray(this.ast))throw new TypeError("A message must be provided as a String or AST.");this.formats=ps(e.formats,r),this.formatters=o&&o.formatters||ms(this.formatterCache)}return Object.defineProperty(e,"defaultLocale",{get:function(){return e.memoizedDefaultLocale||(e.memoizedDefaultLocale=new Intl.NumberFormat().resolvedOptions().locale),e.memoizedDefaultLocale},enumerable:!1,configurable:!0}),e.memoizedDefaultLocale=null,e.resolveLocale=function(t){if(typeof Intl.Locale!="undefined"){var n=Intl.NumberFormat.supportedLocalesOf(t);return n.length>0?new Intl.Locale(n[0]):new Intl.Locale(typeof t=="string"?t:t[0])}},e.__parse=ns,e.formats={number:{integer:{maximumFractionDigits:0},currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},e}();function ys(e,t={},n="zh-CN",r={}){return!r||!r[n]||!r[n][e]?"":new gs(r[n][e],n).format(t)}var Es=Object.defineProperty,bs=(e,t,n)=>t in e?Es(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,rt=(e,t,n)=>(bs(e,typeof t!="symbol"?t+"":t,n),n);const mr=()=>{};function _s(e){const t={};for(const n of e)Q(n)&&n.length>=2&&(t[n[0]]=n[1]);return t}function gr(e,t){let n=null;return t?function(){n&&clearTimeout(n),n=setTimeout(()=>{n=null,e.apply(this)},t)}:function(){n||(n=setTimeout(()=>{n=null,e.apply(this)}))}}const jt=e=>Object.prototype.toString.call(e);function Ss(e){return new Promise(t=>setTimeout(t,e))}const kt=e=>{const t=new Set(ve(e)?e.split(","):Q(e)?e:[]),n=q(e)?e:r=>t.has(r);return r=>{const o=Object.keys(r);if(o.every(f=>!n(f)))return[{},r,0];let i=0;const s={},u={};for(const f of o)n(f)?(s[f]=r[f],i++):u[f]=r[f];return[s,u,i]}};function ge(e){return e==null}function yr(e){return e===void 0}function ve(e){return typeof e=="string"}function V(e){return!ge(e)&&typeof e=="object"}function Gt(e){return typeof e=="boolean"}function Q(e){return Array.isArray(e)}function q(e){return typeof e=="function"}function Ft(e){return V(e)&&q(e.then)&&q(e.catch)}function Be(e){return!ge(e)&&jt(e)==="[object Object]"}function Er(e){return e&&(Reflect.get(e,"__esModule")||Reflect.get(e,Symbol.toStringTag)==="Module")}function vs(e){return/\.css$/.test(e)}function xs(e){return V(e)&&e.nodeType===Node.ELEMENT_NODE}function ot(e){return e?V(e)&&(e.type==="JSFunction"||e.extType==="function"):!1}function it(e){return V(e)&&e.type==="JSSlot"}function Le(e){return V(e)&&e.type==="JSExpression"&&e.extType!=="function"}function $t(e){return V(e)&&e.type==="i18n"}function Cs(e){return!!(q(e)||V(e)&&("render"in e||"setup"in e||"template"in e))}function st(e){return e&&e.componentName}function Vt(e){return st(e)&&e.componentName==="Slot"}function Rs(e){return V(e)&&e.componentName==="Component"}function Ps(e){return st(e)&&(e.componentName==="Block"||e.componentName==="Page"||e.componentName==="Component")}function qt(e){return typeof e!="string"?e:window[e]||Os(e)}function Os(e){if(/^[a-z-]+$/.test(e))return l.defineComponent((t,{attrs:n,slots:r})=>()=>l.h(e,n,r))}function br(e,t){const n=t.length;if(n<1||!e)return e;let r=0,o;for(;r<n;){const i=t[r];let s;try{o=e[i]}catch(u){s=u,o=null}if(r===0&&o==null&&i==="default"){if(s)return n===1?e:null;o=e}else if(o==null)return null;e=o,r++}return o}function ws(e,t,n){if(!n)return qt(t);const r=n.exportName||n.componentName||t,o=e[n.package]||r,i=qt(o),s=n.exportName&&n.subName?n.subName.split("."):[];return n.destructuring?s.unshift(r):Er(i)&&s.unshift("default"),br(i,s)}function Ts(e,t,n){const r={};return Object.keys(t).forEach(o=>{let i=t[o];Rs(i)?n&&(r[o]=n(i)):Cs(i)?r[o]=i:(i=ws(e,o,i),i&&(r[o]=i))}),r}function _r(e,t){return t.filter(n=>n&&n.name).reduce((n,r)=>{const{name:o,content:i,type:s}=r;if(s==="npm"){const{package:u,exportName:f,destructuring:h}=i!=null?i:{};if(e[u]){const a=qt(e[u]);a&&(n[o]=h&&f?a[f]:a)}}else s==="function"&&(n[o]=ot(i)?new Function(`return ${i.value}`)():r.content);return n},{})}var ee;(function(e){e[e.Environment=1]="Environment",e[e.Library=2]="Library",e[e.Theme=3]="Theme",e[e.Runtime=4]="Runtime",e[e.Components=5]="Components",e[e.App=6]="App"})(ee||(ee={}));var Ns=[ee.Environment,ee.Library,ee.Theme,ee.Runtime,ee.Components,ee.App],_e;(function(e){e.JSUrl="jsUrl",e.CSSUrl="cssUrl",e.CSSText="cssText",e.JSText="jsText",e.Bundle="bundle"})(_e||(_e={}));function Sr(){const e={},t=new Promise((n,r)=>{e.resolve=n,e.reject=r});return e.promise=()=>t,e}function As(e){const t=document.createElement("script");t.text=e,document.head.appendChild(t),document.head.removeChild(t)}function Hs(e){const t=document.createElement("script");t.onload=r,t.onerror=r;const n=Sr();function r(o){t.onload=null,t.onerror=null,o.type==="load"?n.resolve():n.reject()}return t.src=e,t.async=!1,document.head.appendChild(t),n.promise()}function Is(e){return e&&e.type}function Bs(e){return e&&e.type===_e.Bundle}function Ls(e,t,n,r){return t?{type:e,content:t,level:n,id:r}:null}function vr(e,t,n,r){for(const o of n)Xt(e,t,o,r)}function Xt(e,t,n,r){if(!n)return;if(Q(n))return vr(e,t,n,r);if(Bs(n)){if(n.assets){Q(n.assets)?vr(e,t,n.assets,n.level||r):Xt(e,t,n.assets,n.level||r);return}return}Is(n)||(n=Ls(vs(n)?_e.CSSUrl:_e.JSUrl,n,r));let o=n.level||r;(!o||ee[o]==null)&&(o=ee.App),n.level=o,n.type===_e.CSSUrl||n.type==_e.CSSText?t[o].push(n):e[o].push(n)}class xr{constructor(t,n){rt(this,"lastContent"),rt(this,"lastUrl"),rt(this,"placeholder"),this.level=t,this.id=n;let r=null;if(n&&(r=document.head.querySelector(`style[data-id="${n}"]`)),!r){r=document.createTextNode("");const o=document.head.querySelector(`meta[level="${t}"]`);o?document.head.insertBefore(r,o):document.head.appendChild(r)}this.placeholder=r}applyText(t){if(this.lastContent===t)return;this.lastContent=t,this.lastUrl=void 0;const n=document.createElement("style");n.setAttribute("type","text/css"),this.id&&n.setAttribute("data-id",this.id),n.appendChild(document.createTextNode(t)),document.head.insertBefore(n,this.placeholder.parentNode===document.head?this.placeholder.nextSibling:null),document.head.removeChild(this.placeholder),this.placeholder=n}applyUrl(t){if(this.lastUrl===t)return;this.lastContent=void 0,this.lastUrl=t;const n=document.createElement("link");n.onload=o,n.onerror=o;const r=Sr();function o(i){n.onload=null,n.onerror=null,i.type==="load"?r.resolve():r.reject()}return n.href=t,n.rel="stylesheet",this.id&&n.setAttribute("data-id",this.id),document.head.insertBefore(n,this.placeholder.parentNode===document.head?this.placeholder.nextSibling:null),document.head.removeChild(this.placeholder),this.placeholder=n,r.promise()}}class Ms{constructor(){rt(this,"stylePoints",new Map)}async load(t){const n={},r={};Ns.forEach(s=>{n[s]=[],r[s]=[]}),Xt(r,n,t);const o=n[ee.Environment].concat(n[ee.Library],n[ee.Theme],n[ee.Runtime],n[ee.App]),i=r[ee.Environment].concat(r[ee.Library],r[ee.Theme],r[ee.Runtime],r[ee.App]);await Promise.all(o.map(({content:s,level:u,type:f,id:h})=>this.loadStyle(s,u,f===_e.CSSUrl,h))),await Promise.all(i.map(({content:s,type:u})=>this.loadScript(s,u===_e.JSUrl)))}loadStyle(t,n,r,o){if(!t)return;let i;return o?(i=this.stylePoints.get(o),i||(i=new xr(n,o),this.stylePoints.set(o,i))):i=new xr(n),r?i.applyUrl(t):i.applyText(t)}loadScript(t,n){if(t)return n?Hs(t):As(t)}async loadAsyncLibrary(t){const n=[],r=[];for(const o in t)t[o].async&&(n.push(window[t[o].library]),r.push(t[o].library));await Promise.all(n).then(o=>{o.length>0&&o.map((i,s)=>(window[r[s]]=i,i))})}}function at(e){return e&&e.replace(/-[a-zA-Z]/g,t=>t.charAt(1).toLocaleUpperCase())}var Cr;(function(e){e.Initial="init",e.Loading="loading",e.Loaded="loaded",e.Error="error"})(Cr||(Cr={}));var Rr;(function(e){e.ADDED="added",e.DELETED="deleted",e.MODIFIED="modified",e.COMPOSITE="composite"})(Rr||(Rr={}));var Pr;(function(e){e.Children="Children",e.Prop="Prop"})(Pr||(Pr={}));var Or;(function(e){e.Children="Children",e.Prop="Prop"})(Or||(Or={}));var wr;(function(e){e[e.REPAINT=0]="REPAINT"})(wr||(wr={}));var Tr;(function(e){e[e.REPAINT=0]="REPAINT"})(Tr||(Tr={}));var zt;(function(e){e.Render="render",e.Serilize="serilize",e.Save="save",e.Clone="clone",e.Init="init",e.Upgrade="upgrade"})(zt||(zt={}));var Nr;(function(e){e.Render="render",e.Serilize="serilize",e.Save="save",e.Clone="clone",e.Init="init",e.Upgrade="upgrade"})(Nr||(Nr={}));var Ar;(function(e){e.Node="node",e.NodeData="nodedata"})(Ar||(Ar={}));var Hr;(function(e){e.Node="node",e.NodeData="nodedata"})(Hr||(Hr={}));var Ir;(function(e){e.SET_VALUE="SET_VALUE",e.SUB_VALUE_CHANGE="SUB_VALUE_CHANGE"})(Ir||(Ir={}));var Br;(function(e){e.SET_VALUE="SET_VALUE",e.SUB_VALUE_CHANGE="SUB_VALUE_CHANGE"})(Br||(Br={}));var Lr={},Us={get exports(){return Lr},set exports(e){Lr=e}},X={};/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var Wt,Mr;function Ds(){if(Mr)return Wt;Mr=1;var e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function r(i){if(i==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(i)}function o(){try{if(!Object.assign)return!1;var i=new String("abc");if(i[5]="de",Object.getOwnPropertyNames(i)[0]==="5")return!1;for(var s={},u=0;u<10;u++)s["_"+String.fromCharCode(u)]=u;var f=Object.getOwnPropertyNames(s).map(function(a){return s[a]});if(f.join("")!=="0123456789")return!1;var h={};return"abcdefghijklmnopqrst".split("").forEach(function(a){h[a]=a}),Object.keys(Object.assign({},h)).join("")==="abcdefghijklmnopqrst"}catch(a){return!1}}return Wt=o()?Object.assign:function(i,s){for(var u,f=r(i),h,a=1;a<arguments.length;a++){u=Object(arguments[a]);for(var d in u)t.call(u,d)&&(f[d]=u[d]);if(e){h=e(u);for(var c=0;c<h.length;c++)n.call(u,h[c])&&(f[h[c]]=u[h[c]])}}return f},Wt}/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ur;function js(){if(Ur)return X;Ur=1;var e=Ds(),t=typeof Symbol=="function"&&Symbol.for,n=t?Symbol.for("react.element"):60103,r=t?Symbol.for("react.portal"):60106,o=t?Symbol.for("react.fragment"):60107,i=t?Symbol.for("react.strict_mode"):60108,s=t?Symbol.for("react.profiler"):60114,u=t?Symbol.for("react.provider"):60109,f=t?Symbol.for("react.context"):60110,h=t?Symbol.for("react.forward_ref"):60112,a=t?Symbol.for("react.suspense"):60113,d=t?Symbol.for("react.memo"):60115,c=t?Symbol.for("react.lazy"):60116,p=typeof Symbol=="function"&&Symbol.iterator;function y(m){for(var x="https://reactjs.org/docs/error-decoder.html?invariant="+m,g=1;g<arguments.length;g++)x+="&args[]="+encodeURIComponent(arguments[g]);return"Minified React error #"+m+"; visit "+x+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var O={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function R(m,x,g){this.props=m,this.context=x,this.refs=E,this.updater=g||O}R.prototype.isReactComponent={},R.prototype.setState=function(m,x){if(typeof m!="object"&&typeof m!="function"&&m!=null)throw Error(y(85));this.updater.enqueueSetState(this,m,x,"setState")},R.prototype.forceUpdate=function(m){this.updater.enqueueForceUpdate(this,m,"forceUpdate")};function P(){}P.prototype=R.prototype;function _(m,x,g){this.props=m,this.context=x,this.refs=E,this.updater=g||O}var N=_.prototype=new P;N.constructor=_,e(N,R.prototype),N.isPureReactComponent=!0;var b={current:null},S=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function A(m,x,g){var C,v={},T=null,j=null;if(x!=null)for(C in x.ref!==void 0&&(j=x.ref),x.key!==void 0&&(T=""+x.key),x)S.call(x,C)&&!w.hasOwnProperty(C)&&(v[C]=x[C]);var D=arguments.length-2;if(D===1)v.children=g;else if(1<D){for(var L=Array(D),M=0;M<D;M++)L[M]=arguments[M+2];v.children=L}if(m&&m.defaultProps)for(C in D=m.defaultProps,D)v[C]===void 0&&(v[C]=D[C]);return{$$typeof:n,type:m,key:T,ref:j,props:v,_owner:b.current}}function H(m,x){return{$$typeof:n,type:m.type,key:x,ref:m.ref,props:m.props,_owner:m._owner}}function B(m){return typeof m=="object"&&m!==null&&m.$$typeof===n}function G(m){var x={"=":"=0",":":"=2"};return"$"+(""+m).replace(/[=:]/g,function(g){return x[g]})}var U=/\/+/g,I=[];function J(m,x,g,C){if(I.length){var v=I.pop();return v.result=m,v.keyPrefix=x,v.func=g,v.context=C,v.count=0,v}return{result:m,keyPrefix:x,func:g,context:C,count:0}}function K(m){m.result=null,m.keyPrefix=null,m.func=null,m.context=null,m.count=0,10>I.length&&I.push(m)}function ie(m,x,g,C){var v=typeof m;(v==="undefined"||v==="boolean")&&(m=null);var T=!1;if(m===null)T=!0;else switch(v){case"string":case"number":T=!0;break;case"object":switch(m.$$typeof){case n:case r:T=!0}}if(T)return g(C,m,x===""?"."+pe(m,0):x),1;if(T=0,x=x===""?".":x+":",Array.isArray(m))for(var j=0;j<m.length;j++){v=m[j];var D=x+pe(v,j);T+=ie(v,D,g,C)}else if(m===null||typeof m!="object"?D=null:(D=p&&m[p]||m["@@iterator"],D=typeof D=="function"?D:null),typeof D=="function")for(m=D.call(m),j=0;!(v=m.next()).done;)v=v.value,D=x+pe(v,j++),T+=ie(v,D,g,C);else if(v==="object")throw g=""+m,Error(y(31,g==="[object Object]"?"object with keys {"+Object.keys(m).join(", ")+"}":g,""));return T}function se(m,x,g){return m==null?0:ie(m,"",x,g)}function pe(m,x){return typeof m=="object"&&m!==null&&m.key!=null?G(m.key):x.toString(36)}function De(m,x){m.func.call(m.context,x,m.count++)}function te(m,x,g){var C=m.result,v=m.keyPrefix;m=m.func.call(m.context,x,m.count++),Array.isArray(m)?ue(m,C,g,function(T){return T}):m!=null&&(B(m)&&(m=H(m,v+(!m.key||x&&x.key===m.key?"":(""+m.key).replace(U,"$&/")+"/")+g)),C.push(m))}function ue(m,x,g,C,v){var T="";g!=null&&(T=(""+g).replace(U,"$&/")+"/"),x=J(x,T,C,v),se(m,te,x),K(x)}var Ee={current:null};function re(){var m=Ee.current;if(m===null)throw Error(y(321));return m}var xe={ReactCurrentDispatcher:Ee,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:b,IsSomeRendererActing:{current:!1},assign:e};return X.Children={map:function(m,x,g){if(m==null)return m;var C=[];return ue(m,C,null,x,g),C},forEach:function(m,x,g){if(m==null)return m;x=J(null,null,x,g),se(m,De,x),K(x)},count:function(m){return se(m,function(){return null},null)},toArray:function(m){var x=[];return ue(m,x,null,function(g){return g}),x},only:function(m){if(!B(m))throw Error(y(143));return m}},X.Component=R,X.Fragment=o,X.Profiler=s,X.PureComponent=_,X.StrictMode=i,X.Suspense=a,X.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=xe,X.cloneElement=function(m,x,g){if(m==null)throw Error(y(267,m));var C=e({},m.props),v=m.key,T=m.ref,j=m._owner;if(x!=null){if(x.ref!==void 0&&(T=x.ref,j=b.current),x.key!==void 0&&(v=""+x.key),m.type&&m.type.defaultProps)var D=m.type.defaultProps;for(L in x)S.call(x,L)&&!w.hasOwnProperty(L)&&(C[L]=x[L]===void 0&&D!==void 0?D[L]:x[L])}var L=arguments.length-2;if(L===1)C.children=g;else if(1<L){D=Array(L);for(var M=0;M<L;M++)D[M]=arguments[M+2];C.children=D}return{$$typeof:n,type:m.type,key:v,ref:T,props:C,_owner:j}},X.createContext=function(m,x){return x===void 0&&(x=null),m={$$typeof:f,_calculateChangedBits:x,_currentValue:m,_currentValue2:m,_threadCount:0,Provider:null,Consumer:null},m.Provider={$$typeof:u,_context:m},m.Consumer=m},X.createElement=A,X.createFactory=function(m){var x=A.bind(null,m);return x.type=m,x},X.createRef=function(){return{current:null}},X.forwardRef=function(m){return{$$typeof:h,render:m}},X.isValidElement=B,X.lazy=function(m){return{$$typeof:c,_ctor:m,_status:-1,_result:null}},X.memo=function(m,x){return{$$typeof:d,type:m,compare:x===void 0?null:x}},X.useCallback=function(m,x){return re().useCallback(m,x)},X.useContext=function(m,x){return re().useContext(m,x)},X.useDebugValue=function(){},X.useEffect=function(m,x){return re().useEffect(m,x)},X.useImperativeHandle=function(m,x,g){return re().useImperativeHandle(m,x,g)},X.useLayoutEffect=function(m,x){return re().useLayoutEffect(m,x)},X.useMemo=function(m,x){return re().useMemo(m,x)},X.useReducer=function(m,x,g){return re().useReducer(m,x,g)},X.useRef=function(m){return re().useRef(m)},X.useState=function(m){return re().useState(m)},X.version="16.14.0",X}(function(e){e.exports=js()})(Us);function ut(e){return V(e)&&q(e.export)?e.export(zt.Render):null}function Me(e){console.warn("[vue-renderer]: "+e)}const Dr={};function ks(e){!Dr[e]&&(Dr[e]=!0)&&Me(e)}var ae=(e=>(e[e.OTHER=0]="OTHER",e[e.SETUP=1]="SETUP",e[e.DATA=2]="DATA",e[e.PROPS=3]="PROPS",e[e.CONTEXT=4]="CONTEXT",e))(ae||{});function jr(e,t){switch(t){case 1:return e.$.setupState.__lcSetup?e.$.setupState:e.$.setupState=l.proxyRefs(Object.create(null,{__lcSetup:{get:()=>!0,enumerable:!1,configurable:!1}}));case 2:return l.isReactive(e.$.data)?e.$.data:e.$.data=l.reactive({});case 3:return e.$.props;default:return e.$.ctx}}function fe(e,t,n,r){const o=e.$,i=jr(e,t);if(r){const s=Object.getOwnPropertyDescriptors(n);for(const u in s){if(u in i){Me("重复定义 key: "+u);continue}Object.defineProperty(i,u,s[u]),o.accessCache[u]=t}}else for(const s in n){if(s in i){Me("重复定义 key: "+s);continue}i[s]=Reflect.get(n,s),o.accessCache[s]=t}if(t===3&&Object.keys(n).length>0){const{propsOptions:[s,u]}=o,f={},h=[];for(const a in n){if(s[a])continue;const d=Reflect.get(n,a);Gt(d)?(f[a]={0:!0,1:!0,type:Boolean,default:d},h.push(a)):yr(d)?f[a]={0:!1,1:!1,type:null}:(f[a]={0:!0,1:!1,type:null,default:d},h.push(a))}Object.keys(f).length>0&&(o.propsOptions=[{...s,...f},[...u,...h]])}}function Jt(e){return"$"in e}function Gs(e){return!e||!V(e)?!1:!!(Jt(e)||Object.keys(e).length>0)}function Zt(...e){const t=[];if(e.flat().forEach(o=>{Gs(o)&&t.push(o)}),t.length<=1)return t[0];const[n,...r]=t;return r.reduce((o,i)=>{if(Jt(i)){if(Jt(o))return i;{const u=o;o=i,i=u}}const s=Object.getOwnPropertyDescriptors(i);return o=Object.create(o,s),l.isProxy(i)?l.reactive(o):o},n)}function he(e){return e?Q(e)?e:[e]:[]}const Fs={JSEXPRESSION:"JSExpression",JSFUNCTION:"JSFunction",JSSLOT:"JSSlot",JSBLOCK:"JSBlock",I18N:"i18n"},fn=class{constructor(t){Oe(this,"createFunction");Oe(this,"exports",{});this.createFunction=t&&!t.thisRequired?n=>new Function("__exports__","__scope__",`with(__exports__) { with(__scope__) { ${n} } }`):n=>new Function("__exports__",`with(__exports__) { ${n} }`)}static cleanCacheModules(){this.cacheModules={}}initModule(t){var o;const n=(o=t.lifeCycles)==null?void 0:o.initModule,r=n&&this.parseSchema(n,!1);return this.exports=q(r)?r(fn.cacheModules,window):{},this}parseSlotScope(t,n){const r={};return he(n).forEach((o,i)=>{r[o]=t[i]}),r}parseI18n(t,n){return this.parseExpression({type:Fs.JSEXPRESSION,value:`this.$t(${JSON.stringify(t.key)})`},n)}parseSchema(t,n){if(Le(t)||ot(t))return this.parseExpression(t,n);if($t(t))return this.parseI18n(t,n);if(ve(t))return t.trim();if(Q(t))return t.map(r=>this.parseSchema(r,n));if(q(t))return t.bind(n);if(Be(t)){if(!t)return t;const r={};return Object.keys(t).forEach(o=>{o.startsWith("__")||(r[o]=this.parseSchema(t[o],n))}),r}return t}parseOnlyJsValue(t){if(!(Le(t)||Le(t)||$t(t))){{if(Q(t))return t.map(n=>this.parseOnlyJsValue(n));if(Be(t)){const n={};return Object.keys(t).forEach(r=>{r.startsWith("__")||(n[r]=this.parseOnlyJsValue(t[r]))}),n}}return t}}parseExpression(t,n){try{const r=['"use strict";',"var __self = arguments[1];"];r.push("return ");let o;return o=(t.value||"").trim(),n!==!1&&!o.match(/^\([^)]*\)\s*=>/)&&(o=o.replace(/this(\W|$)/g,(s,u)=>`__self${u}`)),o=r.join(`
`)+o,this.createFunction(o)(this.exports,n||{})}catch(r){console.warn("parseExpression.error",r,t,self);return}}};let ye=fn;Oe(ye,"cacheModules",{});function $s(){let e=window.__currentNode;return e||(e=Symbol("__currentNode"),window.__currentNode=e),e}function kr(){let e=window.__rendererContext;return e||(e=Symbol("__rendererContext"),window.__rendererContext=e),e}function Ue(){const e=kr();return l.inject(e,()=>{var t,n;const r=(n=(t=l.getCurrentInstance())==null?void 0:t.props)!=null?n:{};return{rerender:()=>{},thisRequiredInJSE:!0,components:ct(r,"components",{}),designMode:ct(r,"designMode","live"),getNode:ct(r,"getNode",()=>null),wrapLeafComp:(o,i,s)=>s,triggerCompGetCtx:ct(r,"triggerCompGetCtx",()=>{})}},!0)}function ct(e,t,n){return e[t]||e[`__${t}`]||n}const Gr=Symbol("hocNode"),Vs=e=>{const{rerender:t}=Ue(),n=l.inject(Gr,null),r=gr(e);return l.provide(Gr,{rerenderSlots:r}),n?{rerender:r,rerenderRoot:t,rerenderParent:n.rerenderSlots}:{rerender:r,rerenderRoot:t,rerenderParent:t}},qs=l.defineComponent({name:"Hoc",inheritAttrs:!1,props:Ye,setup(e,{slots:t,attrs:n}){const r=l.shallowRef(!0),o=l.shallowRef(e.__schema),i=l.shallowRef(),s=E=>{o.value=E,i.value=eo(E,c).slots},{rerender:u,rerenderRoot:f,rerenderParent:h}=Vs(()=>{const E=c?ut(c):null;E&&s(E)}),a={};l.onUnmounted(()=>Object.keys(a).forEach(E=>{a[E](),delete a[E]}));const{locked:d,node:c,buildSlots:p,getNode:y,isRootNode:O}=en(e,(E,R)=>{const P=E.id;if(P){if(R&&a[P])a[P](),delete a[P];else if(!R&&!a[P]){const _=y(P);_&&(a[P]=_.onVisibleChange(()=>u()))}}});if(c){const E=c.onChildrenChange(()=>{f()});E&&l.onUnmounted(E),l.onUnmounted(c.onPropChange(R=>{const{key:P,prop:_,newValue:N,oldValue:b}=R;_.path.length===1?P==="___isLocked___"?d.value=N:it(N)||it(b)?f():h():h()})),l.onUnmounted(c.onVisibleChange(R=>{O?r.value=R:h()})),s(ut(c))}return l.watch(()=>e.__schema,E=>s(E)),()=>{var N;const{__comp:E,__vnodeProps:R}=e,P=ro(n)[1];if(O&&!r.value)return null;const _=i.value?p(i.value,c):t;return E?lt(E)?l.h(l.Fragment,(N=_.default)==null?void 0:N.call(_)):l.h(E,l.mergeProps(P,R),_):l.h("div","component not found")}}}),Xs=l.defineComponent({inheritAttrs:!1,props:Ye,setup:(e,{attrs:t,slots:n})=>{const{triggerCompGetCtx:r}=Ue();return()=>{var f;const{__comp:o,__vnodeProps:i,__schema:s}=e,u=ro(t)[1];return lt(o)?l.h(l.Fragment,(f=n.default)==null?void 0:f.call(n)):o?l.h(o,l.mergeProps(u,i,{onVnodeMounted(h){var d;const a=(d=h.component)==null?void 0:d.proxy;debugger;a&&r(s,a)}}),n):null}}});function Fr(e){const t=[];return Object.keys(e).forEach(n=>{const r=e[n];r==null||r===""||(typeof r=="object"?t.push(`${n}=${encodeURIComponent(JSON.stringify(r))}`):t.push(`${n}=${encodeURIComponent(String(r))}`))}),t.join("&")}function zs(e,t){if(!t)return e;const n=Fr(t);return n?e.indexOf("?")>0?`${e}&${n}`:`${e}?${n}`:e}function Ws(e,t){for(const n in e)if(n.toLowerCase()===t)return[e[n],n];return[]}function Js(e){return["arrayBuffer","blob","formData","json","text"].includes(e)}function Zs(e){const t=new FormData;for(const n in e){const r=e[n];r instanceof Blob?t.append(n,r):t.append(n,String(r))}return t}const $r={"application/json":e=>JSON.stringify(e),"multipart/form-data":e=>Be(e)?Zs(e):e,"application/x-www-form-urlencoded":e=>Fr(e)};function Qs(e,t){const n=Object.keys($r).find(r=>e.includes(r));return n?$r[n](t):t}class Fe extends Error{constructor(t,n,r){super(t),this.code=n,this.data=r}}class Vr{constructor(t,n){this.code=t,this.data=n}}async function Ys(e){const{uri:t,method:n,timeout:r,params:o={},headers:i={},responseType:s="json"}=e;let u;const f={Accept:"application/json",...i},h={method:n,headers:f};if(n==="GET"||n==="DELETE"||n==="OPTIONS")u=zs(t,o);else{u=t;const[c,p]=Ws(f,"content-type");h.body=Qs(c!=null?c:"application/json",o),c==="multipart/form-data"&&p&&delete f[p]}if(r){const c=new AbortController;h.signal=c.signal,setTimeout(()=>c.abort(),r)}const a=await fetch(u,h),d=a.status;if(d>=200&&d<300)if(d===204){if(n==="DELETE")return new Vr(d,null);throw new Fe(a.statusText,d)}else{if(!Js(s))throw new Fe(`invalid response type: ${s}`,-1);return new Vr(d,await a[s]())}else if(d>=400)try{const c=await a.json();throw new Fe(a.statusText,d,c)}catch(c){throw new Fe(a.statusText,d)}throw new Fe(a.statusText,d)}var Re=(e=>(e.Initial="init",e.Loading="loading",e.Loaded="loaded",e.Error="error",e))(Re||{});const Ks=e=>e,ea=()=>{},ta=()=>!0;function na(e,t,n){const r=new ye({thisRequired:n.__thisRequired}),o=l.shallowRef(),i=l.shallowRef(),s=l.ref(Re.Initial),u=l.computed(()=>s.value===Re.Loading),f=l.computed(()=>!!r.parseSchema(e.isInit,n)),{willFetch:h,shouldFetch:a,dataHandler:d,errorHandler:c}=e,p={willFetch:h?r.parseSchema(h,n):Ks,shouldFetch:a?r.parseSchema(a,n):ta,dataHandler:d?r.parseSchema(d,n):O=>O.data,errorHandler:c?r.parseSchema(c,n):ea},y=async(O,E={})=>{try{const{type:R,options:P,id:_}=e,{headers:N,assignToScope:b=!0,...S}=E;if(!t)throw new Error("unsupport fetch type: "+R);if(!(q(p.shouldFetch)?p.shouldFetch():Gt(p.shouldFetch)?p.shouldFetch:!0))throw s.value=Re.Error,new Error(`the ${_} request should not fetch, please check the condition`);const{params:A,headers:H,...B}=r.parseSchema(P!=null?P:{},n);s.value=Re.Loading;const G=await t(p.willFetch({...B,...S,headers:{...H,...N},params:Be(A)&&Be(O)?{...A,...O}:O!=null?O:A}));s.value=Re.Loaded;const U=o.value=p.dataHandler(G);return!yr(o)&&b&&(n[_]=U),U}catch(R){throw s.value=Re.Error,i.value=R,p.errorHandler(R),R}};return l.reactive({data:o,error:i,loading:u,status:s,isInit:f,load:y})}function ra({list:e=[],dataHandler:t},n){const r={},o={};return e.forEach(u=>{const f={dataHandler:t,...u},h=na(f,Ys,n),a=(d,c)=>{const p={assignToScope:!1,...c};return h.load(d,p)};r[u.id]=a,o[u.id]=h}),{dataSource:r,dataSourceMap:o,reloadDataSource:(u,f,h)=>{if(u){const d=o[u];if(!d)throw new Error("dataSource not found, id: "+u);return d.load(f,h)}const a=Object.keys(o).map(d=>o[d]).filter(d=>d.isInit).map(d=>d.load());return Promise.all(a)},hasInitDataSource:()=>Object.keys(o).some(u=>o[u].isInit)}}function oa(e,t,n){const r=e.parseSchema(t,n);if(!Be(r))return;const o={};for(const i in r){const s=r[i],u=q(s)?s:q(s.get)?s.get:mr,f=!q(s)&&q(s.set)?s.set:mr,h=l.computed({get:u,set:f});Object.defineProperty(o,i,{enumerable:!0,configurable:!0,get:()=>h.value,set:a=>h.value=a})}fe(n,ae.CONTEXT,o,!0)}function qr(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:e===null?"null":""}function Xr(e,t){return qr(e)===qr(t)}function zr(e,t){return Q(t)?t.findIndex(n=>Xr(n,e)):q(t)&&Xr(t,e)?0:-1}function ia(e,t,n){const r=e.parseSchema(t,!1);if(!r||!V(r)&&!Q(r)||V(r)&&Object.keys(r).length===0||Q(r)&&r.length===0)return;const{propsOptions:[o,i]}=n.$,s={},u=[];for(const f in r){const h=r[f];let a,d;if(ve(h)?(a=at(h),d={}):(a=at(f),d=Q(h)||q(h)?{type:h}:h),o[a]){Me("prop "+a+"声明重复");continue}const c=zr(Boolean,d.type),p=zr(String,d.type);s[a]={0:c>-1,1:p<0||c<p,...d},(c>-1||"default"in d)&&u.push(a)}Object.keys(s).length>0&&(n.$.propsOptions=[{...o,...s},[...i,...u]])}function sa(e,t,n){const r=e.parseSchema(t,!1),o=Q(r)?r.reduce((i,s)=>(i[s]=null,i),{}):V(r)?r:null;!o||Object.keys(o).length===0||(n.$.emitsOptions=Object.create(n.$.emitsOptions,Object.getOwnPropertyDescriptors(o)))}function aa(e,t,n){const r=e.parseSchema(t,n),o=q(r)?r():V(r)?r:null;!o||Object.keys(o).length===0||fe(n,ae.DATA,o)}function ua(e,t){const n=t.split(".");return()=>{let r=e;for(let o=0;o<n.length&&r;o++)r=r[n[o]];return r}}function Wr(e,t,n,r){const o=r.includes(".")?ua(n,r):()=>n[r];if(ve(e)){const i=t[e];q(i)?l.watch(o,i):l.warn(`Invalid watch handler specified by key "${e}"`,i)}else if(q(e))l.watch(o,e);else if(V(e))if(Q(e))e.forEach(i=>Wr(i,t,n,r));else{const i=q(e.handler)?e.handler:ve(e.handler)?t[e.handler]:null;q(i)?l.watch(o,i,e):l.warn(`Invalid watch handler specified by key "${e.handler}"`,i)}else l.warn(`Invalid watch option: "${r}"`,e)}function ca(e,t,n){const r=e.parseSchema(t,n);if(!r||!V(r)||Object.keys(r).length===0)return;const o=jr(n,ae.CONTEXT);for(const i in r)Wr(r[i],o,n,i)}function la(e,t,n){const r=e.parseSchema(t,!1);let o;if(Q(r))o=r.reduce((s,u)=>(s[u]=u,s),{});else if(V(r))o=r;else return;const i={};for(const s in o){const u=o[s];let f;if(V(u)){const h=u.from||s;"default"in u?f=l.inject(h,u.default,!0):f=l.inject(h)}else f=l.inject(u);l.isRef(f)?Object.defineProperty(i,s,{enumerable:!0,configurable:!0,get:()=>f.value,set:h=>f.value=h}):i[s]=f}fe(n,ae.CONTEXT,i,!0)}function fa(e,t,n){const r=e.parseSchema(t,n),o=q(r)?r():r;V(o)&&Reflect.ownKeys(o).forEach(i=>{const s=Reflect.get(o,i);l.provide(i,s)})}function ha(e,t,n,[r,o]){const i=e.parseSchema(t,!1);if(!q(i))return;const s=i.apply(void 0,[r,o]);if(Ft(s))return s.then(u=>Jr(u,n));Jr(s,n)}function Jr(e,t){if(!ge(e)){if(!V(e)){Me("不支持的 setup 返回值类型, type: "+jt(e));return}fe(t,ae.SETUP,l.toRaw(e))}}function da(e,t,n){const r=e.parseSchema(t,!1);q(r)&&r.call(n)}function pa(e,t,n){const r=e.parseSchema(t,!1);q(r)&&r.call(n)}const Zr=Symbol(),Qr=e=>void(e[Zr]=!0),Qt=e=>Zr in e,ma=e=>q(e),ga=["beforeRouteEnter","beforeRouteUpdate","beforeRouteLeave"],Yt=Symbol("LOWCODE_ROUTE_META");function ya(e){const t=e.split(".");return n=>{let r=n;for(let o=0;o<t.length&&r;o++)r=r[t[o]];return r}}function Yr(e,t){var f,h;if(Qt(e))return;Qr(e);const n=(f=t==null?void 0:t.timeout)!=null?f:6e4,r=new ye(t),o=ya((h=t==null?void 0:t.scopePath)!=null?h:"runtimeScope");function i(a,d,c,p){if(!V(c)||!V(c.lifeCycles))return d;const y={};for(const O of ga){const E=c.lifeCycles[O],R=p.parseSchema(E,!1);q(R)&&(y[O]=s(a,R))}return Object.keys(y).length>0?Object.create(d,Object.getOwnPropertyDescriptors(y)):d}function s(a,d){return d.length<3?function(c,p){const y=o(this);return u(d.call(y,c,p))}:function(c,p,y){const O=o(this);return u(d.call(O,c,p,y))}}const u=a=>q(a)?async d=>{let c;const p=Date.now();for(;!(c=o(d));){if(Date.now()-p>=n)throw new Error("lowcode guard wait timeout");await Ss()}return a(c)}:Ft(a)?a.then(u):a;return e.beforeEach((a,d,c)=>{if(a.matched.every(p=>Qt(p)))return c();Promise.all(a.matched.map(async p=>{var R;if(Qt(p))return;const y=(R=p.components)!=null?R:{},O=y.default,E=p.meta[Yt];if(O&&Ps(E)){let P;ma(O)?(P=await O(),Er(P)&&(P=P.default)):P=O,y.default=i(p,P,E,r.initModule(E))}Qr(p)})).then(()=>c())})}const Ea={setup:ha,created:da,beforeCreate:pa,initInject:la,initProvide:fa,initEmits:sa,initProps:ia,initData:aa,initWatch:ca,initComputed:oa};function ba(e,t,n){function r(o,i,s){var a;const f=((a=e.lifeCycles)!=null?a:{})[o],h=Ea[o];if(f&&h)return h(n,f,t,[i,s])}return r}const _a=$s(),Sa={beforeMount:l.onBeforeMount,mounted:l.onMounted,beforeUpdate:l.onBeforeUpdate,updated:l.onUpdated,activated:l.onActivated,deactivated:l.onDeactivated,beforeUnmount:l.onBeforeUnmount,renderTracked:l.onRenderTracked,renderTriggered:l.onRenderTriggered,unmounted:l.onUnmounted,errorCaptured:l.onErrorCaptured,serverPrefetch:l.onServerPrefetch},va={componentDidMount:l.onMounted,componentDidCatch:l.onErrorCaptured,shouldComponentUpdate:l.onBeforeUpdate,componentWillUnmount:l.onBeforeUnmount},Kt={...Sa,...va};function lt(e){return e===l.Fragment}function xa(e){return e in Kt}function Ca(e){const t={};if(V(e))for(const n in e)n in Kt&&(t[n]=e[n]);return t}const Kr=Symbol("IS_LOCKED"),ft=Symbol("IS_ROOT_NODE");function Ra(e){const t=l.ref(e),n=l.inject(Kr,null),r=l.computed({get:()=>(n==null?void 0:n.value)||t.value,set:o=>t.value=o});return l.provide(Kr,r),r}function Pa(e){return e?l.provide(ft,!0):(e=l.inject(ft,null),e==null?l.provide(ft,e=!0):e&&l.provide(ft,!1)),e}function en(e,t=()=>{}){const n=Ue(),{getNode:r,wrapLeafComp:o,designMode:i,thisRequiredInJSE:s}=n,u=new ye({thisRequired:s}),f=e.__schema.id?r(e.__schema.id):null,h=f?Ra(f.isLocked):l.ref(!1),a=i==="design";l.provide(_a,{mode:i,node:f,isDesignerEnv:a});const d=(b,S,w,A)=>{var De;const H=Zt(e.__scope,w);if(ve(b))return l.createTextVNode(b);if(!st(b)){const te=u.parseSchema(b,H);return l.createTextVNode(l.toDisplayString(te))}const{show:B,scence:G}=N(b,H,a);if(!B)return l.createCommentVNode(`${G} ${B}`);const U=b.id?r(b.id):null,{componentName:I}=b;if(!A&&(A=n.components[I],!A)){if(I==="Slot")return he(b.children).flatMap(te=>d(te,S,w)).filter(te=>!ge(te));if(a)return l.h("div",`component[${I}] not found`);A={setup(te,{slots:ue}){return ks("组件未找到, 组件名："+I),l.h("div",l.mergeProps(te,{class:"lc-component-not-found"}),ue)}}}S=o(I,A,S);const J=te=>{debugger;n.triggerCompGetCtx(b,te)},{props:K,slots:ie}=eo(b),{loop:se,buildLoopScope:pe}=_(b,H);if(!se){const te=P(K,H,U,null,{ref:J}),[ue,Ee]=no(te);return l.h(S,{key:(De=ue.key)!=null?De:b.id,__comp:A,__scope:H,__schema:b,__vnodeProps:ue,...Ee},O(ie,U))}return Q(se)?se.map((te,ue,Ee)=>{var g;const re=pe(te,ue,Ee.length),xe=P(K,H,U,re,{ref:J}),[m,x]=no(xe);return l.h(S,{key:(g=m.key)!=null?g:`${b.id}--${ue}`,__comp:A,__scope:re,__schema:b,__vnodeProps:m,...x},O(ie,U))}):(Me("循环对象必须是数组, type: "+jt(se)),null)},y=a?(b,S,w)=>{const A=d(b,qs,S,w);return st(b)&&l.isVNode(A)&&(A.type===l.Comment?t(b,!1):t(b,!0)),A}:(b,S,w)=>d(b,Xs,S,w),O=(b,S,w)=>Object.keys(b).reduce((A,H)=>{const B=b[H],G=H==="default";if(ge(B)||G&&!(S!=null&&S.isContainerNode)&&Q(B)&&B.length===0)return A;let U;return Q(B)?U=()=>B.map(I=>y(I,w)).filter(I=>!ge(I)):Vt(B)?B.id?U=(...I)=>{var K;const J=y(B,[w,u.parseSlotScope(I,(K=B.params)!=null?K:[])]);return he(J)}:U=(...I)=>{var K;const J=u.parseSlotScope(I,(K=B.params)!=null?K:[]);return he(B.children).map(ie=>y(ie,[w,J])).filter(ie=>!ge(ie))}:U=()=>he(y(B,w)),A[H]=G&&a&&(S!=null&&S.isContainerNode)?wa(U,h):U,A},{}),E=(b,S,w,A)=>{var H,B;if(Le(b)||ot(b))return u.parseExpression(b,S);if($t(b))return u.parseI18n(b,S);if(it(b)){let G,U;return A!=null&&A.slotNode?(U=A.slotNode.schema,G=Vt(U)?(H=U.params)!=null?H:[]:[]):(U=he(b.value),G=(B=b.params)!=null?B:[]),(...I)=>{const J=u.parseSlotScope(I,G),K=[];return he(U).forEach(ie=>{const se=y(ie,[w,J]);he(se).forEach(pe=>K.push(pe))}),K}}else{if(Q(b))return b.map((G,U)=>E(G,S,w,A==null?void 0:A.get(U)));if(b&&V(b)){const G={};return Object.keys(b).forEach(U=>{if(U.startsWith("__"))return;const I=b[U],J=A==null?void 0:A.get(U);G[U]=E(I,S,w,J)}),G}}return b},R=(b,S,w,A)=>{if(ve(b)){const H=b;let B=null;return G=>{let U=S.$.refs;if(Object.keys(U).length===0&&(U=S.$.refs={}),ge(S.__loopRefIndex))U[H]=G,H in S&&(S[H]=G);else{let I=U[H];if(!Q(I))I=U[H]=[],H in S&&(I=S[H]=I);else if(H in S){const J=S[H];!Q(J)||l.toRaw(J)!==I?I=S[H]=I:I=J}if(ge(G)){const J=I.indexOf(B);J>=0&&I.splice(J,1)}else I[S.__loopRefIndex]=G}B=G}}else{const H=E(b,S,w,A);return ve(H)?R(H,S,w,A):H}},P=(b,S,w,A,H)=>{const B={};Object.keys(b).forEach(I=>{to(B,I,b[I])});const G={},U=A?Zt(S,A):S;return Object.keys(B).forEach(I=>{const J=B[I];G[I]=I==="ref"?R(J,U,A,w==null?void 0:w.getProp(I)):E(J,U,A,w==null?void 0:w.getProp(I))}),H&&Object.keys(H).forEach(I=>{to(G,I,H[I])}),G},_=(b,S)=>{let w=null;const A=["item","index"];return b.loop&&(w=b.loop),b.loopArgs&&b.loopArgs.forEach((H,B)=>{A[B]=H}),{loop:w?u.parseSchema(w,S):null,loopArgs:A,buildLoopScope(H,B,G){var K;const U=(K=S.__loopRefOffset)!=null?K:0,[I,J]=A;return{[I]:H,[J]:B,__loopScope:!0,__loopRefIndex:U+B,__loopRefOffset:G*B}}}},N=(b,S,w)=>{var B,G;const A=w&&(B=b.hidden)!=null?B:!1,H=(G=b.condition)!=null?G:!0;return A?{scence:"hidden",show:!1}:{scence:"condition",show:typeof H=="boolean"?H:!!u.parseSchema(H,S)}};return{node:f,locked:h,isRootNode:Pa(e.__isRootNode),getNode:r,renderComp:y,buildProps:P,buildSlots:O}}function $e(e,t){const n=l.computed(()=>e.__schema),r={__comp:null,__scope:t,__isRootNode:!0,__vnodeProps:{},__schema:e.__schema},o=l.computed(()=>{var s;return(s=e.__designMode)!=null?s:"live"}),i=l.computed(()=>e.__components);return{scope:t,schemaRef:n,designModeRef:o,componentsRef:i,...en(r)}}function Ve(e,t){var S;const{__schema:n,__scope:r,__parser:o}=e,{props:i,state:s,methods:u,lifeCycles:f}=n!=null?n:{},h=l.getCurrentInstance(),a=h.proxy,d=ba(n,a,o);if(d("initEmits"),d("beforeCreate"),d("initProps"),i){const w=o.parseOnlyJsValue(i);fe(a,ae.PROPS,w)}const c=d("setup",h.props,t);if(d("initInject"),u){const w=o.parseSchema(u,a);w&&fe(a,ae.CONTEXT,w)}if(d("initData"),s){const w=o.parseSchema(s);w&&fe(a,ae.DATA,w)}d("initComputed"),d("initWatch"),d("initProvide");const p=o.parseSchema(Ca(f),a);Object.keys(p).length>0&&Object.keys(p).forEach(w=>{if(xa(w)){const A=p[w];q(A)&&Kt[w](A,h)}}),Oa(n.css,n.id);const y=(w,A)=>{const{__locale:H,__messages:B}=e;return ys(w,A,H,B)},O=l.computed(()=>e.__locale);fe(a,ae.CONTEXT,{i18n:y,$t:y}),fe(a,ae.DATA,{currentLocale:O});const{dataSource:E,dataSourceMap:R,reloadDataSource:P,hasInitDataSource:_}=ra((S=n.dataSource)!=null?S:{list:[],dataHandler:void 0},a),N=Object.keys(R).filter(w=>!(w in a)).map(w=>[w,l.ref()]);return fe(a,ae.CONTEXT,{dataSource:E,dataSourceMap:R,reloadDataSource:P}),fe(a,ae.SETUP,_s(N)),r&&fe(a,ae.SETUP,r),d("created"),{scope:a,wrapRender:w=>{const A=[];return Ft(c)&&A.push(c),_()&&A.push(P()),A.length>0?Promise.all(A).then(()=>w):w}}}function Oa(e,t){var r;let n=null;t&&(n=document.querySelector(`style[data-id="${t}"]`)),e?(n||(n=document.createElement("style"),t&&n.setAttribute("data-id",t),(document.head||document.getElementsByTagName("head")[0]).appendChild(n)),n.innerHTML!==e&&(n.innerHTML=e)):n&&((r=n.parentElement)==null||r.removeChild(n))}const eo=(e,t)=>{var o;const n={},r={};return n.default=he(e.children),Object.entries((o=e.props)!=null?o:{}).forEach(([i,s])=>{if(it(s)){const u=t==null?void 0:t.getProp(i,!1);if(u&&u.slotNode){const f=u.slotNode.schema;Vt(f)&&(n[i]=f)}else s.value&&(n[i]={componentName:"Slot",params:s.params,children:he(s.value)})}else i==="className"?r.class=s:i==="children"?n.default=s:r[i]=s}),{props:r,slots:n}},to=(e,t,n)=>{var r;if(t.startsWith("v-model")){const o=t.match(/v-model(?::(\w+))?$/);if(!o)return e;const i=at((r=o[1])!=null?r:"modelValue"),s=`onUpdate:${i}`;if(Le(n)){const u={type:"JSFunction",value:`function ($event) {${n.value} = $event}`};e[s]=s in e?he(e[s]).concat(u):u}e[i]=n}else if(!(t.startsWith("v-")&&Le(n)))if(t.match(/^on[A-Z]/)&&ot(n)){const o=t.match(/onUpdate(?::?(\w+))$/);o&&(t=`onUpdate:${at(o[1])}`),e[t]=t in e?he(e[t]).concat(n):n}else if(t==="ref"&&"ref"in e){const o=n,i=e.ref;q(i)&&q(o)?e.ref=(...s)=>{o(...s),i(...s)}:e.ref=[i,o].filter(q).pop()}else e[t]=n},wa=(e,t)=>(...n)=>{const r=e(...n);if(!r.length){const o=t.value,i={"lc-container-locked":o,"lc-container-placeholder":!0},s=o?"锁定元素及子元素无法编辑":"拖拽组件或模板到这里";r.push(l.h("div",{class:i},s))}return r},no=kt("key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ro=kt(Vn),Ta=l.defineComponent((e,{slots:t})=>()=>l.h("div",{class:"lc-page",style:{height:"100%"},...e},t)),Na=l.defineComponent({name:"PageRenderer",props:Ae,__renderer__:!0,setup(e,t){const{scope:n,wrapRender:r}=Ve(e,t),{renderComp:o,componentsRef:i,schemaRef:s}=$e(e,n);return r(()=>o(s.value,null,i.value.Page||Ta))}}),Aa=l.defineComponent({name:"TempRenderer",props:Ae,__renderer__:!0,setup(e,t){const{scope:n,wrapRender:r}=Ve(e,t),{triggerCompGetCtx:o}=Ue(),{renderComp:i,schemaRef:s}=$e(e,n),u=l.getCurrentInstance();return l.onMounted(()=>{debugger;u.proxy&&o(s.value,u.proxy)}),r(()=>i(s.value,null,l.Fragment))}}),Ha=l.defineComponent({name:"BlockRenderer",props:Ae,__renderer__:!0,setup(e,t){const{scope:n,wrapRender:r}=Ve(e,t),{triggerCompGetCtx:o}=Ue(),{renderComp:i,schemaRef:s,componentsRef:u}=$e(e,n),f=u.value[s.value.componentName]||l.Fragment,h=l.getCurrentInstance();return lt(f)&&l.onMounted(()=>{debugger;h!=null&&h.proxy&&o(s.value,h.proxy)}),r(()=>i(s.value,null,u.value.Block||l.Fragment))}}),Ia=l.defineComponent({name:"ComponentRenderer",props:Ae,__renderer__:!0,setup(e,t){const{scope:n,wrapRender:r}=Ve(e,t),{triggerCompGetCtx:o}=Ue(),{renderComp:i,schemaRef:s,componentsRef:u}=$e(e,n),f=u.value[s.value.componentName]||l.Fragment,h=l.getCurrentInstance();return lt(f)&&l.onMounted(()=>{debugger;h!=null&&h.proxy&&o(s.value,h.proxy)}),r(()=>i(s.value,null,f))}}),oo={TempRenderer:Aa,PageRenderer:Na,BlockRenderer:Ha,ComponentRenderer:Ia};class Ba{constructor(){Oe(this,"renderers",{...oo});Oe(this,"configProvider",null)}setConfigProvider(t){this.configProvider=t}getConfigProvider(){return this.configProvider}setRenderers(t){this.renderers=t}getRenderers(){return this.renderers}}const qe=new Ba,io={scope:Object,schema:{type:Object,required:!0},passProps:Object,components:{type:Object,required:!0},designMode:{type:String,default:"live"},device:String,locale:String,messages:{type:Object,default:()=>({})},getNode:Function,onCompGetCtx:Function,thisRequiredInJSE:{type:Boolean,default:!0},disableCompMock:{type:[Array,Boolean],default:!1}},La=kt(e=>!e.match(/^[a-z]+([A-Z][a-z]+)*$/)),ht=l.defineComponent({props:io,setup(e,{slots:t,expose:n}){const r=new ye({thisRequired:e.thisRequiredInJSE}).initModule(e.schema),o=(c,p)=>{var y;debugger;p&&((y=e.onCompGetCtx)==null||y.call(e,c,p))},i=c=>{var p,y;return(y=(p=e.getNode)==null?void 0:p.call(e,c))!=null?y:null},s=l.shallowRef(e.schema);l.watch(()=>e.schema,()=>s.value=e.schema);let u=()=>!0;l.watchEffect(()=>{const c=e.disableCompMock;Gt(c)?u=c?()=>!1:()=>!0:c&&(u=p=>!c.includes(p))});const f=new Map,h=l.reactive({designMode:l.computed(()=>e.designMode),components:l.computed(()=>({...qe.getRenderers(),...e.components})),getNode:c=>{var p,y;return(y=(p=e.getNode)==null?void 0:p.call(e,c))!=null?y:null},triggerCompGetCtx:(c,p)=>{var y;debugger;(y=e.onCompGetCtx)==null||y.call(e,c,p)},rerender:gr(()=>{const c=e.schema.id,p=c&&i(c);if(p){const y=ut(p);y&&(s.value=y)}l.triggerRef(s)}),wrapLeafComp:(c,p,y)=>{let O=f.get(y);if(O){if(O.has(p))return O.get(p)}else O=new Map,f.set(y,O);if(u(c)){const[E,R,P]=La(p);P&&(y=Object.create(y,Object.getOwnPropertyDescriptors(E)))}return O.set(p,y),y}});l.provide(kr(),h);const a=l.ref();n({runtimeScope:a});const d=()=>{const{components:c}=h,{scope:p,locale:y,messages:O,designMode:E,thisRequiredInJSE:R,passProps:P}=e,{value:_}=s;if(!_)return null;const{componentName:N}=_;let b=c[N]||c[`${N}Renderer`];return b&&!b.__renderer__&&(b=oo[`${N}Renderer`]),b?l.h(b,{key:_.__ctx?`${_.__ctx.lceKey}_${_.__ctx.idx||"0"}`:_.id,...P,...r.parseOnlyJsValue(_.props),ref:a,__parser:r,__scope:p,__schema:_,__locale:y,__messages:O,__components:c,__designMode:E,__thisRequiredInJSE:R,__getNode:i,__triggerCompGetCtx:o},t):null};return()=>{const{device:c,locale:p}=e,y=qe.getConfigProvider();return y?l.h(y,{device:c,locale:p},{default:d}):d()}}}),Ma=()=>{ye.cleanCacheModules()},Ua=l.defineComponent({props:{simulator:{type:Object,required:!0}},render(){const{simulator:e,$slots:t}=this,{layout:n,getComponent:r}=e;if(n){const{Component:o,props:i={},componentName:s}=n;if(o)return l.h(o,{...i,key:"layout",simulator:e},t);const u=s&&r(s);if(u)return l.h(u,{...i,key:"layout",simulator:e},t)}return l.renderSlot(t,"default")}}),Da=l.defineComponent({props:{simulator:{type:Object,required:!0}},render(){const{simulator:e}=this;return l.h(Ua,{simulator:e},{default:()=>l.h(Ct)})}}),ja=l.defineComponent({props:{simulator:{type:Object,required:!0},documentInstance:{type:Object,required:!0}},setup:()=>({renderer:l.ref()}),render(){const{documentInstance:e,simulator:t}=this,{schema:n,scope:r,messages:o}=e,{designMode:i,device:s,locale:u,components:f}=t;return l.h(l.Suspense,null,{default:()=>l.h(ht,{ref:"renderer",scope:r,schema:n,locale:u,device:s,messages:o,components:f,designMode:i,disableCompMock:t.disableCompMock,thisRequiredInJSE:t.thisRequiredInJSE,getNode:h=>e.getNode(h),onCompGetCtx:(h,a)=>e.mountInstance(h.id,a)})})}}),so=l.defineComponent({name:"Leaf",render(){return l.renderSlot(this.$slots,"default")}});Object.assign(so,{displayName:"Leaf",componentMetadata:{componentName:"Leaf",configure:{props:[{name:"children",setter:"StringSetter"}],supports:!1}}});const ao=l.defineComponent({render(){return l.h("div",{class:"lc-container"},this.$slots)}});Object.assign(ao,{displayName:"Slot",componentMetadata:{componentName:"Slot",configure:{props:[{name:"___title",title:"插槽标题",setter:"StringSetter",defaultValue:"插槽容器"},{name:"___params",title:"插槽入参",setter:{componentName:"ArraySetter",props:{itemSetter:{componentName:"StringSetter",props:{placeholder:"参数名称"}}}}}],component:{isContainer:!0,disableBehaviors:"*"},supports:!1}}});const uo=l.defineComponent((e,{slots:t})=>()=>l.h("div",{class:"lc-page",...e},t));Object.assign(uo,{displayName:"Page",componentMetadata:{componentName:"Page",configure:{supports:{style:!0,className:!0},component:{isContainer:!0,disableBehaviors:"*"}}}});const Y=window.LCSimulatorHost,co=document.createRange();function lo(e){return e.parentNode?xs(e)?[e.getBoundingClientRect()]:(co.selectNode(e),Array.from(co.getClientRects())):[]}const tn=Symbol("_LCDocId"),fo=Symbol("_LCNodeId"),ho=Symbol("_LCVueInstance"),po=Symbol("_LCVueCompRecord");function mo(e){return V(e)&&!ge(e.__vueParentComponent)}function go(e){return V(e)&&tn in e}function ka(e){return V(e)&&po in e}function nn(e,t,n){return{did:e,nid:t,cid:n,[po]:!0}}function rn(e){return{docId:e[tn],nodeId:e[fo],instance:e[ho]}}function Ga(e,t){e[tn]=t.docId,e[fo]=t.nodeId,e[ho]=t.instance}function Fa(e){return e.nodeType===8}function $a(e){return e.nodeType===3}function Va(e){return V(e)&&"nodeType"in e&&(e.nodeType===Node.ELEMENT_NODE||e.nodeType===Node.TEXT_NODE)}function on(e){return Fa(e)||$a(e)&&e.nodeValue===""}function qa(e,t){return document.contains(e)?Xa(e,t):null}function Xa(e,t){for(;e;){if(mo(e)){const n=e.__vueParentComponent;return yo(n,t)}if(go(e)){const{nodeId:n,docId:r,instance:o}=rn(e);if(!t||t===n)return{docId:r,nodeId:n,instance:nn(r,n,o.$.uid)}}e=e.parentElement}return null}function yo(e,t){for(;e;){const n=e.vnode.el;if(n&&go(n)){const{nodeId:r,docId:o,instance:i}=rn(n);if(!t||t===r)return{docId:o,nodeId:r,instance:nn(o,r,i.$.uid)}}e=e.parent}return null}function za(e){const t=[],n=e.$el;if(on(n)){const r=e.$;Eo(t,r,n,o=>o.previousSibling),sn(t,r),Eo(t,r,n,o=>o.nextSibling)}else t.push(n);return t}function Eo(e,t,n,r){let o=r(n);for(;o;){if(on(o)){o=r(o);continue}if(mo(o)){const i=o.__vueParentComponent;if(So(t,i)){e.unshift(o),o=r(o);continue}}break}}function sn(e,t){const n=t.subTree,r=n.el;return _o(r)?(e.push(r),!0):Q(n.children)&&n.children.length>0?bo(e,n.children):n.component?sn(e,n.component):!1}function bo(e,t){const n=t.map(({el:r})=>r).filter(_o);return n.length>0?(e.push(...n),!0):t.length>0&&t.some(r=>Q(r.children)&&r.children.length>0?bo(e,r.children.filter(o=>l.isVNode(o))):r.component?sn(e,r.component):!1)}function _o(e){return e&&Va(e)&&!on(e)?lo(e).some(n=>n.width||n.height):!1}function So(e,t){return t==null||e.uid>t.uid?!1:e.uid===t.uid?!0:So(e,t.parent)}function an(...e){return console.warn("[vue-simulator-renderer]:",...e)}class Wa{constructor(){Oe(this,"states",new Set)}setDragging(t){t?this.addState("dragging"):this.removeState("dragging")}setXResizing(t){t?this.addState("x-resizing"):this.removeState("x-resizing")}setYResizing(t){t?this.addState("y-resizing"):this.removeState("y-resizing")}setCopy(t){t?this.addState("copy"):this.removeState("copy")}isCopy(){return this.states.has("copy")}release(){for(const t of this.states)this.removeState(t)}addState(t){this.states.has(t)||(this.states.add(t),document.documentElement.classList.add(`lc-cursor-${t}`))}removeState(t){this.states.has(t)&&(this.states.delete(t),document.documentElement.classList.remove(`lc-cursor-${t}`))}}const un=new Wa;let vo=!0;const xo=e=>vo?null:(e.preventDefault(),e.stopPropagation(),!1);document.addEventListener("selectstart",xo,!0),document.addEventListener("dragstart",xo,!0);function Ja(e){vo=e}function Co(e,t){if(V(e)&&V(t)){const n=Object.assign({},e);return Object.keys(t).forEach(r=>{Reflect.set(n,r,Co(e[r],t[r]))}),n}return t!=null?t:e}function Ro(e){return"/"+(e.endsWith("/index.vue")?e.slice(0,e.length-10):e.replace(/\.(\w*)$/,"")).replace(/^\//,"")}function Za(e){return Ro(e).replace(/[/-_][\w]/,n=>n[1].toUpperCase())}Object.assign(window,{VueRouter:Ci});const cn=new Ms,Qa={Slot:ao,Leaf:so,Page:uo};function Ya(e,t){const n=new Map,r=new Map,o=l.ref(Date.now()),i=l.computed(()=>{var c;return o.value,(c=ut(e))!=null?c:{fileName:"/",componentName:"Page"}}),s=c=>c.$.isMounted,u=(c,p,y)=>{const O=y?y.map(E=>nn(c,p,E.$.uid)):null;Y.setInstance(c,p,O)},f=c=>r.get(c),h=(c,p)=>{const y=e.id;if(p==null){let P=n.get(c);P&&(P=P.filter(s),P.length>0?(n.set(c,P),u(y,c,P)):(n.delete(c),u(y,c,null)));return}const O=p.$el,E=rn(O).nodeId;E&&E!==c&&a(E,p),l.onUnmounted(()=>a(c,p),p.$),Ga(O,{nodeId:c,docId:y,instance:p});let R=n.get(c);if(R){const P=R.length;R=R.filter(s);let _=R.length!==P;if(R.includes(p)||(R.push(p),_=!0),!_)return}else R=[p];r.set(p.$.uid,p),n.set(c,R),u(y,c,R)},a=(c,p)=>{const y=n.get(c);if(y){const O=y.indexOf(p);if(O>-1){const[E]=y.splice(O,1);r.delete(E.$.uid),u(e.id,c,y)}}},d=c=>c?e.getNode(c):null;return l.reactive({id:l.computed(()=>e.id),path:l.computed(()=>{var c;return Ro((c=i.value.fileName)!=null?c:"")}),key:l.computed(()=>`${e.id}:${o.value}`),scope:l.computed(()=>{var E;const c=i.value,{utils:p,constants:y,...O}=t.appHelper;return{utils:{...p,..._r(Y.libraryMap,(E=Reflect.get(c,"utils"))!=null?E:[])},constants:{...y,...Reflect.get(c,"constants")},...O}}),schema:i,document:l.computed(()=>e),messages:l.computed(()=>Co(t.i18n,Reflect.get(i.value,"i18n"))),instancesMap:l.computed(()=>n),getNode:d,mountInstance:h,unmountIntance:a,getComponentInstance:f,rerender:()=>{o.value=Date.now(),ye.cleanCacheModules()}})}function Ka(){const e=l.shallowRef({}),t=l.shallowRef("default"),n=l.shallowRef(),r=l.shallowRef(Y.autoRender),o=l.shallowRef("design"),i=l.shallowRef({}),s=l.shallowRef({}),u=l.shallowRef({}),f=l.shallowRef(!0),h=l.shallowRef({}),a=l.shallowRef([]),d=l.shallowRef(!0),c=l.reactive({i18n:{},appHelper:{utils:{},constants:{}}});console.log("context-----------------"),console.log(window);const p=[],y=new Map;function O(){s.value={...Qa,...Ts(i.value,u.value,E.createComponent)}}const E=l.reactive({config:l.markRaw(qe),layout:e,device:t,locale:n,designMode:o,libraryMap:i,components:s,autoRender:r,componentsMap:u,disableCompMock:f,documentInstances:a,requestHandlersMap:h,thisRequiredInJSE:d,isSimulatorRenderer:!0});E.app=l.markRaw(l.createApp(Da,{simulator:E})),E.router=l.markRaw($n({history:vn("/"),routes:[]})),E.getComponent=_=>{const N=_.split("."),b=[];for(;N.length>0;){const S=s.value[_];if(S)return br(S,b);const w=N.pop();if(!w)break;b.unshift(w),_=N.join(".")}return null},E.getClosestNodeInstance=(_,N)=>{var b;if(ka(_)){const{cid:S,did:w}=_,A=y.get(w),H=(b=A==null?void 0:A.getComponentInstance(S))!=null?b:null;return H&&yo(H.$,N)}return qa(_,N)},E.findDOMNodes=_=>{if(_){const{did:N,cid:b}=_,S=y.get(N),w=S==null?void 0:S.getComponentInstance(b);return w?za(w):null}return null},E.getComponent=_=>s.value[_];let R=0;E.createComponent=({css:_,...N})=>{const b=`Component-${N.id||R++}`,S=l.defineComponent({props:ht.props,setup:(w,{slots:A})=>{let H=document.getElementById(b);if(_&&!H){const B=window.document;H=B.createElement("style"),H.setAttribute("type","text/css"),H.setAttribute("id",b),H.appendChild(B.createTextNode(_)),B.head.appendChild(H)}return()=>l.h(ht,{schema:N,locale:E.locale,device:E.device,passProps:w,components:s.value},A)}});return N.fileName&&(S.name=Za(N.fileName)),N.props&&(S.props=Object.keys(N.props)),S},E.getClientRects=_=>lo(_),E.setNativeSelection=_=>Ja(_),E.setDraggingState=_=>un.setDragging(_),E.setCopyState=_=>un.setCopy(_),E.clearState=()=>un.release(),E.rerender=()=>a.value.forEach(_=>_.rerender()),E.dispose=()=>{E.app.unmount(),p.forEach(_=>_())},E.getCurrentDocument=()=>{var b;const _=Y.project.currentDocument,N=a.value;return _&&(b=N.find(S=>S.id===_.id))!=null?b:null},E.load=_=>cn.load(_),E.loadAsyncLibrary=async _=>{await cn.loadAsyncLibrary(_),O()};let P=!1;return E.run=()=>{if(P)return;P=!0;const _="app";let N=document.getElementById(_);N||(N=document.createElement("div"),document.body.appendChild(N),N.id=_),document.documentElement.classList.add("engine-page"),document.body.classList.add("engine-document"),E.app.use(E.router).mount(N),Y.project.setRendererReady(E)},p.push(Y.connect(E,()=>{var N,b,S;const _=Y.project.get("config");e.value=(N=_.layout)!=null?N:{},f.value=(b=_.disableCompMock)!=null?b:!1,(i.value!==Y.libraryMap||u.value!==Y.designer.componentsMap)&&(i.value=Y.libraryMap||{},u.value=Y.designer.componentsMap,O()),n.value=Y.locale,t.value=Y.device,o.value=Y.designMode,h.value=Y.requestHandlersMap,d.value=(S=Y.thisRequiredInJSE)!=null?S:!0,a.value.forEach(w=>w.rerender()),Yr(E.router,{thisRequired:d.value,scopePath:"renderer.runtimeScope"})})),p.push(Y.autorun(()=>{const{router:_}=E;a.value=Y.project.documents.map(b=>{let S=y.get(b.id);return S?_.hasRoute(S.id)&&_.removeRoute(S.id):(S=Ya(b,c),y.set(b.id,S)),_.addRoute({name:S.id,path:S.path,meta:{[Yt]:S.schema},component:ja,props:((w,A)=>()=>({key:w.key,simulator:A,documentInstance:w}))(S,E)}),S}),_.getRoutes().forEach(b=>{const S=b.name;a.value.some(A=>A.id===S)||(_.removeRoute(S),y.delete(S))});const N=E.getCurrentDocument();N&&_.replace({name:N.id,force:!0})})),Y.componentsConsumer.consume(async _=>{_&&(await cn.load(_),O())}),Y.injectionConsumer.consume(_=>{var N;if(_.appHelper){const{utils:b,constants:S,...w}=_.appHelper;Object.assign(c.appHelper,{utils:Q(b)?_r(Y.libraryMap,b):b!=null?b:{},constants:S!=null?S:{},...w})}c.i18n=(N=_.i18n)!=null?N:{}}),E}const ln=Ka(),ru="",Pe=window;typeof Pe!="undefined"&&(Pe.SimulatorRenderer=ln),Pe.addEventListener("load",()=>{Pe.__VUE_HMR_RUNTIME__||(an("检测到您正在使用 vue 运行时的生产环境版本"),an("这将导致画布的部分功能异常，请使用非生产环境版本代替"),an("https://unpkg.com/vue/dist/vue.runtime.global.js"))}),Pe.addEventListener("beforeunload",()=>{Pe.LCSimulatorHost=null,Pe.SimulatorRenderer=null,ln.dispose()}),z.LOWCODE_ROUTE_META=Yt,z.SchemaParser=ye,z.VueRenderer=ht,z.baseRendererPropKeys=Ri,z.cleanCacledModules=Ma,z.config=qe,z.default=ln,z.leafPropKeys=Vn,z.leafProps=Ye,z.mergeScope=Zt,z.rendererProps=Ae,z.setupLowCodeRouteGuard=Yr,z.useLeaf=en,z.useRenderer=$e,z.useRootScope=Ve,z.vueRendererConfig=qe,z.vueRendererProps=io,Object.defineProperties(z,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
