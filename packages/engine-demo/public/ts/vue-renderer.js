(function(F,h){typeof exports=="object"&&typeof module!="undefined"?h(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],h):(F=typeof globalThis!="undefined"?globalThis:F||self,h(F.LCVueRenderer={},F.Vue))})(this,function(F,h){"use strict";var Ro=Object.defineProperty;var Po=(F,h,K)=>h in F?Ro(F,h,{enumerable:!0,configurable:!0,writable:!0,value:K}):F[h]=K;var xe=(F,h,K)=>(Po(F,typeof h!="symbol"?h+"":h,K),K);const K={__scope:{type:Object,default:void 0},__schema:{type:Object,required:!0},__designMode:{type:String,default:"live"},__components:{type:Object,required:!0},__locale:{type:String,default:void 0},__messages:{type:Object,default:()=>({})},__getNode:{type:Function,required:!0},__triggerCompGetCtx:{type:Function,required:!0},__thisRequiredInJSE:{type:Boolean,default:!0},__props:{type:Object,default:()=>({})},__parser:{type:Object,required:!0}},Or=Object.keys(K),Te={__comp:{type:Object,required:!0},__scope:{type:Object,default:()=>({})},__schema:{type:Object,default:()=>({})},__vnodeProps:{type:Object,default:()=>({})},__isRootNode:Boolean},mt=Object.keys(Te);var Ue=function(e,t){return Ue=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,n){r.__proto__=n}||function(r,n){for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(r[o]=n[o])},Ue(e,t)};function Oe(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");Ue(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}var L=function(){return L=Object.assign||function(t){for(var r,n=1,o=arguments.length;n<o;n++){r=arguments[n];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i])}return t},L.apply(this,arguments)};function Rr(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]]);return r}function De(e,t,r){if(r||arguments.length===2)for(var n=0,o=t.length,i;n<o;n++)(i||!(n in t))&&(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))}var N;(function(e){e[e.EXPECT_ARGUMENT_CLOSING_BRACE=1]="EXPECT_ARGUMENT_CLOSING_BRACE",e[e.EMPTY_ARGUMENT=2]="EMPTY_ARGUMENT",e[e.MALFORMED_ARGUMENT=3]="MALFORMED_ARGUMENT",e[e.EXPECT_ARGUMENT_TYPE=4]="EXPECT_ARGUMENT_TYPE",e[e.INVALID_ARGUMENT_TYPE=5]="INVALID_ARGUMENT_TYPE",e[e.EXPECT_ARGUMENT_STYLE=6]="EXPECT_ARGUMENT_STYLE",e[e.INVALID_NUMBER_SKELETON=7]="INVALID_NUMBER_SKELETON",e[e.INVALID_DATE_TIME_SKELETON=8]="INVALID_DATE_TIME_SKELETON",e[e.EXPECT_NUMBER_SKELETON=9]="EXPECT_NUMBER_SKELETON",e[e.EXPECT_DATE_TIME_SKELETON=10]="EXPECT_DATE_TIME_SKELETON",e[e.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE=11]="UNCLOSED_QUOTE_IN_ARGUMENT_STYLE",e[e.EXPECT_SELECT_ARGUMENT_OPTIONS=12]="EXPECT_SELECT_ARGUMENT_OPTIONS",e[e.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE=13]="EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE=14]="INVALID_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR=15]="EXPECT_SELECT_ARGUMENT_SELECTOR",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR=16]="EXPECT_PLURAL_ARGUMENT_SELECTOR",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT=17]="EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT=18]="EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT",e[e.INVALID_PLURAL_ARGUMENT_SELECTOR=19]="INVALID_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_PLURAL_ARGUMENT_SELECTOR=20]="DUPLICATE_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_SELECT_ARGUMENT_SELECTOR=21]="DUPLICATE_SELECT_ARGUMENT_SELECTOR",e[e.MISSING_OTHER_CLAUSE=22]="MISSING_OTHER_CLAUSE",e[e.INVALID_TAG=23]="INVALID_TAG",e[e.INVALID_TAG_NAME=25]="INVALID_TAG_NAME",e[e.UNMATCHED_CLOSING_TAG=26]="UNMATCHED_CLOSING_TAG",e[e.UNCLOSED_TAG=27]="UNCLOSED_TAG"})(N||(N={}));var V;(function(e){e[e.literal=0]="literal",e[e.argument=1]="argument",e[e.number=2]="number",e[e.date=3]="date",e[e.time=4]="time",e[e.select=5]="select",e[e.plural=6]="plural",e[e.pound=7]="pound",e[e.tag=8]="tag"})(V||(V={}));var de;(function(e){e[e.number=0]="number",e[e.dateTime=1]="dateTime"})(de||(de={}));function _t(e){return e.type===V.literal}function Pr(e){return e.type===V.argument}function Et(e){return e.type===V.number}function bt(e){return e.type===V.date}function gt(e){return e.type===V.time}function yt(e){return e.type===V.select}function xt(e){return e.type===V.plural}function Hr(e){return e.type===V.pound}function St(e){return e.type===V.tag}function vt(e){return!!(e&&typeof e=="object"&&e.type===de.number)}function Ge(e){return!!(e&&typeof e=="object"&&e.type===de.dateTime)}var Ct=/[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,Br=/(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;function Ar(e){var t={};return e.replace(Br,function(r){var n=r.length;switch(r[0]){case"G":t.era=n===4?"long":n===5?"narrow":"short";break;case"y":t.year=n===2?"2-digit":"numeric";break;case"Y":case"u":case"U":case"r":throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");case"q":case"Q":throw new RangeError("`q/Q` (quarter) patterns are not supported");case"M":case"L":t.month=["numeric","2-digit","short","long","narrow"][n-1];break;case"w":case"W":throw new RangeError("`w/W` (week) patterns are not supported");case"d":t.day=["numeric","2-digit"][n-1];break;case"D":case"F":case"g":throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");case"E":t.weekday=n===4?"short":n===5?"narrow":"short";break;case"e":if(n<4)throw new RangeError("`e..eee` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][n-4];break;case"c":if(n<4)throw new RangeError("`c..ccc` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][n-4];break;case"a":t.hour12=!0;break;case"b":case"B":throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");case"h":t.hourCycle="h12",t.hour=["numeric","2-digit"][n-1];break;case"H":t.hourCycle="h23",t.hour=["numeric","2-digit"][n-1];break;case"K":t.hourCycle="h11",t.hour=["numeric","2-digit"][n-1];break;case"k":t.hourCycle="h24",t.hour=["numeric","2-digit"][n-1];break;case"j":case"J":case"C":throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");case"m":t.minute=["numeric","2-digit"][n-1];break;case"s":t.second=["numeric","2-digit"][n-1];break;case"S":case"A":throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");case"z":t.timeZoneName=n<4?"short":"long";break;case"Z":case"O":case"v":case"V":case"X":case"x":throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead")}return""}),t}var Nr=/[\t-\r \x85\u200E\u200F\u2028\u2029]/i;function wr(e){if(e.length===0)throw new Error("Number skeleton cannot be empty");for(var t=e.split(Nr).filter(function(f){return f.length>0}),r=[],n=0,o=t;n<o.length;n++){var i=o[n],s=i.split("/");if(s.length===0)throw new Error("Invalid number skeleton");for(var u=s[0],d=s.slice(1),c=0,l=d;c<l.length;c++){var p=l[c];if(p.length===0)throw new Error("Invalid number skeleton")}r.push({stem:u,options:d})}return r}function Ir(e){return e.replace(/^(.*?)-/,"")}var Tt=/^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g,Ot=/^(@+)?(\+|#+)?[rs]?$/g,Lr=/(\*)(0+)|(#+)(0+)|(0+)/g,Rt=/^(0+)$/;function Pt(e){var t={};return e[e.length-1]==="r"?t.roundingPriority="morePrecision":e[e.length-1]==="s"&&(t.roundingPriority="lessPrecision"),e.replace(Ot,function(r,n,o){return typeof o!="string"?(t.minimumSignificantDigits=n.length,t.maximumSignificantDigits=n.length):o==="+"?t.minimumSignificantDigits=n.length:n[0]==="#"?t.maximumSignificantDigits=n.length:(t.minimumSignificantDigits=n.length,t.maximumSignificantDigits=n.length+(typeof o=="string"?o.length:0)),""}),t}function Ht(e){switch(e){case"sign-auto":return{signDisplay:"auto"};case"sign-accounting":case"()":return{currencySign:"accounting"};case"sign-always":case"+!":return{signDisplay:"always"};case"sign-accounting-always":case"()!":return{signDisplay:"always",currencySign:"accounting"};case"sign-except-zero":case"+?":return{signDisplay:"exceptZero"};case"sign-accounting-except-zero":case"()?":return{signDisplay:"exceptZero",currencySign:"accounting"};case"sign-never":case"+_":return{signDisplay:"never"}}}function Mr(e){var t;if(e[0]==="E"&&e[1]==="E"?(t={notation:"engineering"},e=e.slice(2)):e[0]==="E"&&(t={notation:"scientific"},e=e.slice(1)),t){var r=e.slice(0,2);if(r==="+!"?(t.signDisplay="always",e=e.slice(2)):r==="+?"&&(t.signDisplay="exceptZero",e=e.slice(2)),!Rt.test(e))throw new Error("Malformed concise eng/scientific notation");t.minimumIntegerDigits=e.length}return t}function Bt(e){var t={},r=Ht(e);return r||t}function Ur(e){for(var t={},r=0,n=e;r<n.length;r++){var o=n[r];switch(o.stem){case"percent":case"%":t.style="percent";continue;case"%x100":t.style="percent",t.scale=100;continue;case"currency":t.style="currency",t.currency=o.options[0];continue;case"group-off":case",_":t.useGrouping=!1;continue;case"precision-integer":case".":t.maximumFractionDigits=0;continue;case"measure-unit":case"unit":t.style="unit",t.unit=Ir(o.options[0]);continue;case"compact-short":case"K":t.notation="compact",t.compactDisplay="short";continue;case"compact-long":case"KK":t.notation="compact",t.compactDisplay="long";continue;case"scientific":t=L(L(L({},t),{notation:"scientific"}),o.options.reduce(function(d,c){return L(L({},d),Bt(c))},{}));continue;case"engineering":t=L(L(L({},t),{notation:"engineering"}),o.options.reduce(function(d,c){return L(L({},d),Bt(c))},{}));continue;case"notation-simple":t.notation="standard";continue;case"unit-width-narrow":t.currencyDisplay="narrowSymbol",t.unitDisplay="narrow";continue;case"unit-width-short":t.currencyDisplay="code",t.unitDisplay="short";continue;case"unit-width-full-name":t.currencyDisplay="name",t.unitDisplay="long";continue;case"unit-width-iso-code":t.currencyDisplay="symbol";continue;case"scale":t.scale=parseFloat(o.options[0]);continue;case"integer-width":if(o.options.length>1)throw new RangeError("integer-width stems only accept a single optional option");o.options[0].replace(Lr,function(d,c,l,p,f,_){if(c)t.minimumIntegerDigits=l.length;else{if(p&&f)throw new Error("We currently do not support maximum integer digits");if(_)throw new Error("We currently do not support exact integer digits")}return""});continue}if(Rt.test(o.stem)){t.minimumIntegerDigits=o.stem.length;continue}if(Tt.test(o.stem)){if(o.options.length>1)throw new RangeError("Fraction-precision stems only accept a single optional option");o.stem.replace(Tt,function(d,c,l,p,f,_){return l==="*"?t.minimumFractionDigits=c.length:p&&p[0]==="#"?t.maximumFractionDigits=p.length:f&&_?(t.minimumFractionDigits=f.length,t.maximumFractionDigits=f.length+_.length):(t.minimumFractionDigits=c.length,t.maximumFractionDigits=c.length),""});var i=o.options[0];i==="w"?t=L(L({},t),{trailingZeroDisplay:"stripIfInteger"}):i&&(t=L(L({},t),Pt(i)));continue}if(Ot.test(o.stem)){t=L(L({},t),Pt(o.stem));continue}var s=Ht(o.stem);s&&(t=L(L({},t),s));var u=Mr(o.stem);u&&(t=L(L({},t),u))}return t}var Re={"001":["H","h"],AC:["H","h","hb","hB"],AD:["H","hB"],AE:["h","hB","hb","H"],AF:["H","hb","hB","h"],AG:["h","hb","H","hB"],AI:["H","h","hb","hB"],AL:["h","H","hB"],AM:["H","hB"],AO:["H","hB"],AR:["H","h","hB","hb"],AS:["h","H"],AT:["H","hB"],AU:["h","hb","H","hB"],AW:["H","hB"],AX:["H"],AZ:["H","hB","h"],BA:["H","hB","h"],BB:["h","hb","H","hB"],BD:["h","hB","H"],BE:["H","hB"],BF:["H","hB"],BG:["H","hB","h"],BH:["h","hB","hb","H"],BJ:["H","hB"],BL:["H","hB"],BM:["h","hb","H","hB"],BN:["hb","hB","h","H"],BO:["H","hB","h","hb"],BQ:["H"],BR:["H","hB"],BS:["h","hb","H","hB"],BT:["h","H"],BW:["H","h","hb","hB"],BZ:["H","h","hb","hB"],CA:["h","hb","H","hB"],CC:["H","h","hb","hB"],CD:["hB","H"],CF:["H","h","hB"],CG:["H","hB"],CH:["H","hB","h"],CI:["H","hB"],CK:["H","h","hb","hB"],CL:["H","h","hB","hb"],CM:["H","h","hB"],CN:["H","hB","hb","h"],CO:["h","H","hB","hb"],CP:["H"],CR:["H","h","hB","hb"],CU:["H","h","hB","hb"],CV:["H","hB"],CX:["H","h","hb","hB"],CY:["h","H","hb","hB"],CZ:["H"],DE:["H","hB"],DG:["H","h","hb","hB"],DJ:["h","H"],DK:["H"],DM:["h","hb","H","hB"],DO:["h","H","hB","hb"],DZ:["h","hB","hb","H"],EA:["H","h","hB","hb"],EC:["H","hB","h","hb"],EE:["H","hB"],EG:["h","hB","hb","H"],EH:["h","hB","hb","H"],ER:["h","H"],ES:["H","hB","h","hb"],ET:["hB","hb","h","H"],FI:["H"],FJ:["h","hb","H","hB"],FK:["H","h","hb","hB"],FM:["h","hb","H","hB"],FR:["H","hB"],GA:["H","hB"],GB:["H","h","hb","hB"],GD:["h","hb","H","hB"],GE:["H","hB","h"],GF:["H","hB"],GG:["H","h","hb","hB"],GH:["h","H"],GI:["H","h","hb","hB"],GM:["h","hb","H","hB"],GN:["H","hB"],GP:["H","hB"],GQ:["H","hB","h","hb"],GR:["h","H","hb","hB"],GT:["H","h","hB","hb"],GU:["h","hb","H","hB"],GW:["H","hB"],GY:["h","hb","H","hB"],HK:["h","hB","hb","H"],HN:["H","h","hB","hb"],HR:["H","hB"],IC:["H","h","hB","hb"],ID:["H"],IE:["H","h","hb","hB"],IL:["H","hB"],IM:["H","h","hb","hB"],IN:["h","H"],IO:["H","h","hb","hB"],IQ:["h","hB","hb","H"],IR:["hB","H"],IS:["H"],IT:["H","hB"],JE:["H","h","hb","hB"],JM:["h","hb","H","hB"],JO:["h","hB","hb","H"],JP:["H","h","K"],KE:["hB","hb","H","h"],KG:["H","h","hB","hb"],KH:["hB","h","H","hb"],KI:["h","hb","H","hB"],KM:["H","h","hB","hb"],KN:["h","hb","H","hB"],KP:["h","H","hB","hb"],KR:["h","H","hB","hb"],KW:["h","hB","hb","H"],KY:["h","hb","H","hB"],KZ:["H","hB"],LA:["H","hb","hB","h"],LB:["h","hB","hb","H"],LC:["h","hb","H","hB"],LI:["H","hB","h"],LK:["H","h","hB","hb"],LR:["h","hb","H","hB"],LS:["h","H"],LT:["H","h","hb","hB"],LU:["H","h","hB"],LV:["H","hB","hb","h"],LY:["h","hB","hb","H"],MA:["H","h","hB","hb"],MC:["H","hB"],MD:["H","hB"],ME:["H","hB","h"],MF:["H","hB"],MH:["h","hb","H","hB"],MK:["H","h","hb","hB"],ML:["H"],MM:["hB","hb","H","h"],MN:["H","h","hb","hB"],MO:["h","hB","hb","H"],MP:["h","hb","H","hB"],MQ:["H","hB"],MR:["h","hB","hb","H"],MS:["H","h","hb","hB"],MW:["h","hb","H","hB"],MX:["H","h","hB","hb"],MY:["hb","hB","h","H"],MZ:["H","hB"],NA:["h","H","hB","hb"],NC:["H","hB"],NE:["H"],NF:["H","h","hb","hB"],NG:["H","h","hb","hB"],NI:["H","h","hB","hb"],NL:["H","hB"],NP:["H","h","hB"],NR:["H","h","hb","hB"],NU:["H","h","hb","hB"],NZ:["h","hb","H","hB"],OM:["h","hB","hb","H"],PA:["h","H","hB","hb"],PE:["H","hB","h","hb"],PF:["H","h","hB"],PG:["h","H"],PH:["h","hB","hb","H"],PK:["h","hB","H"],PM:["H","hB"],PN:["H","h","hb","hB"],PR:["h","H","hB","hb"],PS:["h","hB","hb","H"],PT:["H","hB"],PW:["h","H"],PY:["H","h","hB","hb"],QA:["h","hB","hb","H"],RE:["H","hB"],RO:["H","hB"],RS:["H","hB","h"],RU:["H"],SA:["h","hB","hb","H"],SB:["h","hb","H","hB"],SC:["H","h","hB"],SD:["h","hB","hb","H"],SE:["H"],SG:["h","hb","H","hB"],SH:["H","h","hb","hB"],SI:["H","hB"],SJ:["H"],SK:["H"],SL:["h","hb","H","hB"],SM:["H","h","hB"],SN:["H","h","hB"],SO:["h","H"],SR:["H","hB"],SS:["h","hb","H","hB"],ST:["H","hB"],SV:["H","h","hB","hb"],SX:["H","h","hb","hB"],SY:["h","hB","hb","H"],SZ:["h","hb","H","hB"],TA:["H","h","hb","hB"],TC:["h","hb","H","hB"],TD:["h","H","hB"],TF:["H","h","hB"],TG:["H","hB"],TL:["H","hB","hb","h"],TN:["h","hB","hb","H"],TO:["h","H"],TR:["H","hB"],TT:["h","hb","H","hB"],TW:["hB","hb","h","H"],TZ:["hB","hb","H","h"],UA:["H","hB","h"],UG:["hB","hb","H","h"],UM:["h","hb","H","hB"],US:["h","hb","H","hB"],UY:["H","h","hB","hb"],UZ:["H","hB","h"],VA:["H","h","hB"],VC:["h","hb","H","hB"],VE:["h","H","hB","hb"],VG:["h","hb","H","hB"],VI:["h","hb","H","hB"],VU:["h","H"],WF:["H","hB"],WS:["h","H"],XK:["H","hB","h"],YE:["h","hB","hb","H"],YT:["H","hB"],ZA:["H","h","hb","hB"],ZM:["h","hb","H","hB"],"af-ZA":["H","h","hB","hb"],"ar-001":["h","hB","hb","H"],"ca-ES":["H","h","hB"],"en-001":["h","hb","H","hB"],"es-BO":["H","h","hB","hb"],"es-BR":["H","h","hB","hb"],"es-EC":["H","h","hB","hb"],"es-ES":["H","h","hB","hb"],"es-GQ":["H","h","hB","hb"],"es-PE":["H","h","hB","hb"],"fr-CA":["H","h","hB"],"gl-ES":["H","h","hB"],"gu-IN":["hB","hb","h","H"],"hi-IN":["hB","h","H"],"it-CH":["H","h","hB"],"it-IT":["H","h","hB"],"kn-IN":["hB","h","H"],"ml-IN":["hB","h","H"],"mr-IN":["hB","hb","h","H"],"pa-IN":["hB","hb","h","H"],"ta-IN":["hB","h","hb","H"],"te-IN":["hB","h","H"],"zu-ZA":["H","hB","hb","h"]};function Dr(e,t){for(var r="",n=0;n<e.length;n++){var o=e.charAt(n);if(o==="j"){for(var i=0;n+1<e.length&&e.charAt(n+1)===o;)i++,n++;var s=1+(i&1),u=i<2?1:3+(i>>1),d="a",c=Gr(t);for((c=="H"||c=="k")&&(u=0);u-- >0;)r+=d;for(;s-- >0;)r=c+r}else o==="J"?r+="H":r+=o}return r}function Gr(e){var t=e.hourCycle;if(t===void 0&&e.hourCycles&&e.hourCycles.length&&(t=e.hourCycles[0]),t)switch(t){case"h24":return"k";case"h23":return"H";case"h12":return"h";case"h11":return"K";default:throw new Error("Invalid hourCycle")}var r=e.language,n;r!=="root"&&(n=e.maximize().region);var o=Re[n||""]||Re[r||""]||Re["".concat(r,"-001")]||Re["001"];return o[0]}var Fe,Fr=new RegExp("^".concat(Ct.source,"*")),jr=new RegExp("".concat(Ct.source,"*$"));function w(e,t){return{start:e,end:t}}var kr=!!String.prototype.startsWith,Vr=!!String.fromCodePoint,$r=!!Object.fromEntries,Xr=!!String.prototype.codePointAt,qr=!!String.prototype.trimStart,Wr=!!String.prototype.trimEnd,Jr=!!Number.isSafeInteger,zr=Jr?Number.isSafeInteger:function(e){return typeof e=="number"&&isFinite(e)&&Math.floor(e)===e&&Math.abs(e)<=9007199254740991},je=!0;try{var Zr=It("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");je=((Fe=Zr.exec("a"))===null||Fe===void 0?void 0:Fe[0])==="a"}catch(e){je=!1}var At=kr?function(t,r,n){return t.startsWith(r,n)}:function(t,r,n){return t.slice(n,n+r.length)===r},ke=Vr?String.fromCodePoint:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var n="",o=t.length,i=0,s;o>i;){if(s=t[i++],s>1114111)throw RangeError(s+" is not a valid code point");n+=s<65536?String.fromCharCode(s):String.fromCharCode(((s-=65536)>>10)+55296,s%1024+56320)}return n},Nt=$r?Object.fromEntries:function(t){for(var r={},n=0,o=t;n<o.length;n++){var i=o[n],s=i[0],u=i[1];r[s]=u}return r},wt=Xr?function(t,r){return t.codePointAt(r)}:function(t,r){var n=t.length;if(!(r<0||r>=n)){var o=t.charCodeAt(r),i;return o<55296||o>56319||r+1===n||(i=t.charCodeAt(r+1))<56320||i>57343?o:(o-55296<<10)+(i-56320)+65536}},Yr=qr?function(t){return t.trimStart()}:function(t){return t.replace(Fr,"")},Qr=Wr?function(t){return t.trimEnd()}:function(t){return t.replace(jr,"")};function It(e,t){return new RegExp(e,t)}var Ve;if(je){var Lt=It("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");Ve=function(t,r){var n;Lt.lastIndex=r;var o=Lt.exec(t);return(n=o[1])!==null&&n!==void 0?n:""}}else Ve=function(t,r){for(var n=[];;){var o=wt(t,r);if(o===void 0||Mt(o)||rn(o))break;n.push(o),r+=o>=65536?2:1}return ke.apply(void 0,n)};var Kr=function(){function e(t,r){r===void 0&&(r={}),this.message=t,this.position={offset:0,line:1,column:1},this.ignoreTag=!!r.ignoreTag,this.locale=r.locale,this.requiresOtherClause=!!r.requiresOtherClause,this.shouldParseSkeletons=!!r.shouldParseSkeletons}return e.prototype.parse=function(){if(this.offset()!==0)throw Error("parser can only be used once");return this.parseMessage(0,"",!1)},e.prototype.parseMessage=function(t,r,n){for(var o=[];!this.isEOF();){var i=this.char();if(i===123){var s=this.parseArgument(t,n);if(s.err)return s;o.push(s.val)}else{if(i===125&&t>0)break;if(i===35&&(r==="plural"||r==="selectordinal")){var u=this.clonePosition();this.bump(),o.push({type:V.pound,location:w(u,this.clonePosition())})}else if(i===60&&!this.ignoreTag&&this.peek()===47){if(n)break;return this.error(N.UNMATCHED_CLOSING_TAG,w(this.clonePosition(),this.clonePosition()))}else if(i===60&&!this.ignoreTag&&$e(this.peek()||0)){var s=this.parseTag(t,r);if(s.err)return s;o.push(s.val)}else{var s=this.parseLiteral(t,r);if(s.err)return s;o.push(s.val)}}}return{val:o,err:null}},e.prototype.parseTag=function(t,r){var n=this.clonePosition();this.bump();var o=this.parseTagName();if(this.bumpSpace(),this.bumpIf("/>"))return{val:{type:V.literal,value:"<".concat(o,"/>"),location:w(n,this.clonePosition())},err:null};if(this.bumpIf(">")){var i=this.parseMessage(t+1,r,!0);if(i.err)return i;var s=i.val,u=this.clonePosition();if(this.bumpIf("</")){if(this.isEOF()||!$e(this.char()))return this.error(N.INVALID_TAG,w(u,this.clonePosition()));var d=this.clonePosition(),c=this.parseTagName();return o!==c?this.error(N.UNMATCHED_CLOSING_TAG,w(d,this.clonePosition())):(this.bumpSpace(),this.bumpIf(">")?{val:{type:V.tag,value:o,children:s,location:w(n,this.clonePosition())},err:null}:this.error(N.INVALID_TAG,w(u,this.clonePosition())))}else return this.error(N.UNCLOSED_TAG,w(n,this.clonePosition()))}else return this.error(N.INVALID_TAG,w(n,this.clonePosition()))},e.prototype.parseTagName=function(){var t=this.offset();for(this.bump();!this.isEOF()&&tn(this.char());)this.bump();return this.message.slice(t,this.offset())},e.prototype.parseLiteral=function(t,r){for(var n=this.clonePosition(),o="";;){var i=this.tryParseQuote(r);if(i){o+=i;continue}var s=this.tryParseUnquoted(t,r);if(s){o+=s;continue}var u=this.tryParseLeftAngleBracket();if(u){o+=u;continue}break}var d=w(n,this.clonePosition());return{val:{type:V.literal,value:o,location:d},err:null}},e.prototype.tryParseLeftAngleBracket=function(){return!this.isEOF()&&this.char()===60&&(this.ignoreTag||!en(this.peek()||0))?(this.bump(),"<"):null},e.prototype.tryParseQuote=function(t){if(this.isEOF()||this.char()!==39)return null;switch(this.peek()){case 39:return this.bump(),this.bump(),"'";case 123:case 60:case 62:case 125:break;case 35:if(t==="plural"||t==="selectordinal")break;return null;default:return null}this.bump();var r=[this.char()];for(this.bump();!this.isEOF();){var n=this.char();if(n===39)if(this.peek()===39)r.push(39),this.bump();else{this.bump();break}else r.push(n);this.bump()}return ke.apply(void 0,r)},e.prototype.tryParseUnquoted=function(t,r){if(this.isEOF())return null;var n=this.char();return n===60||n===123||n===35&&(r==="plural"||r==="selectordinal")||n===125&&t>0?null:(this.bump(),ke(n))},e.prototype.parseArgument=function(t,r){var n=this.clonePosition();if(this.bump(),this.bumpSpace(),this.isEOF())return this.error(N.EXPECT_ARGUMENT_CLOSING_BRACE,w(n,this.clonePosition()));if(this.char()===125)return this.bump(),this.error(N.EMPTY_ARGUMENT,w(n,this.clonePosition()));var o=this.parseIdentifierIfPossible().value;if(!o)return this.error(N.MALFORMED_ARGUMENT,w(n,this.clonePosition()));if(this.bumpSpace(),this.isEOF())return this.error(N.EXPECT_ARGUMENT_CLOSING_BRACE,w(n,this.clonePosition()));switch(this.char()){case 125:return this.bump(),{val:{type:V.argument,value:o,location:w(n,this.clonePosition())},err:null};case 44:return this.bump(),this.bumpSpace(),this.isEOF()?this.error(N.EXPECT_ARGUMENT_CLOSING_BRACE,w(n,this.clonePosition())):this.parseArgumentOptions(t,r,o,n);default:return this.error(N.MALFORMED_ARGUMENT,w(n,this.clonePosition()))}},e.prototype.parseIdentifierIfPossible=function(){var t=this.clonePosition(),r=this.offset(),n=Ve(this.message,r),o=r+n.length;this.bumpTo(o);var i=this.clonePosition(),s=w(t,i);return{value:n,location:s}},e.prototype.parseArgumentOptions=function(t,r,n,o){var i,s=this.clonePosition(),u=this.parseIdentifierIfPossible().value,d=this.clonePosition();switch(u){case"":return this.error(N.EXPECT_ARGUMENT_TYPE,w(s,d));case"number":case"date":case"time":{this.bumpSpace();var c=null;if(this.bumpIf(",")){this.bumpSpace();var l=this.clonePosition(),p=this.parseSimpleArgStyleIfPossible();if(p.err)return p;var f=Qr(p.val);if(f.length===0)return this.error(N.EXPECT_ARGUMENT_STYLE,w(this.clonePosition(),this.clonePosition()));var _=w(l,this.clonePosition());c={style:f,styleLocation:_}}var b=this.tryParseArgumentClose(o);if(b.err)return b;var S=w(o,this.clonePosition());if(c&&At(c==null?void 0:c.style,"::",0)){var v=Yr(c.style.slice(2));if(u==="number"){var p=this.parseNumberSkeletonFromString(v,c.styleLocation);return p.err?p:{val:{type:V.number,value:n,location:S,style:p.val},err:null}}else{if(v.length===0)return this.error(N.EXPECT_DATE_TIME_SKELETON,S);var P=v;this.locale&&(P=Dr(v,this.locale));var f={type:de.dateTime,pattern:P,location:c.styleLocation,parsedOptions:this.shouldParseSkeletons?Ar(P):{}},R=u==="date"?V.date:V.time;return{val:{type:R,value:n,location:S,style:f},err:null}}}return{val:{type:u==="number"?V.number:u==="date"?V.date:V.time,value:n,location:S,style:(i=c==null?void 0:c.style)!==null&&i!==void 0?i:null},err:null}}case"plural":case"selectordinal":case"select":{var A=this.clonePosition();if(this.bumpSpace(),!this.bumpIf(","))return this.error(N.EXPECT_SELECT_ARGUMENT_OPTIONS,w(A,L({},A)));this.bumpSpace();var j=this.parseIdentifierIfPossible(),E=0;if(u!=="select"&&j.value==="offset"){if(!this.bumpIf(":"))return this.error(N.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,w(this.clonePosition(),this.clonePosition()));this.bumpSpace();var p=this.tryParseDecimalInteger(N.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,N.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);if(p.err)return p;this.bumpSpace(),j=this.parseIdentifierIfPossible(),E=p.val}var x=this.tryParsePluralOrSelectOptions(t,u,r,j);if(x.err)return x;var b=this.tryParseArgumentClose(o);if(b.err)return b;var g=w(o,this.clonePosition());return u==="select"?{val:{type:V.select,value:n,options:Nt(x.val),location:g},err:null}:{val:{type:V.plural,value:n,options:Nt(x.val),offset:E,pluralType:u==="plural"?"cardinal":"ordinal",location:g},err:null}}default:return this.error(N.INVALID_ARGUMENT_TYPE,w(s,d))}},e.prototype.tryParseArgumentClose=function(t){return this.isEOF()||this.char()!==125?this.error(N.EXPECT_ARGUMENT_CLOSING_BRACE,w(t,this.clonePosition())):(this.bump(),{val:!0,err:null})},e.prototype.parseSimpleArgStyleIfPossible=function(){for(var t=0,r=this.clonePosition();!this.isEOF();){var n=this.char();switch(n){case 39:{this.bump();var o=this.clonePosition();if(!this.bumpUntil("'"))return this.error(N.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,w(o,this.clonePosition()));this.bump();break}case 123:{t+=1,this.bump();break}case 125:{if(t>0)t-=1;else return{val:this.message.slice(r.offset,this.offset()),err:null};break}default:this.bump();break}}return{val:this.message.slice(r.offset,this.offset()),err:null}},e.prototype.parseNumberSkeletonFromString=function(t,r){var n=[];try{n=wr(t)}catch(o){return this.error(N.INVALID_NUMBER_SKELETON,r)}return{val:{type:de.number,tokens:n,location:r,parsedOptions:this.shouldParseSkeletons?Ur(n):{}},err:null}},e.prototype.tryParsePluralOrSelectOptions=function(t,r,n,o){for(var i,s=!1,u=[],d=new Set,c=o.value,l=o.location;;){if(c.length===0){var p=this.clonePosition();if(r!=="select"&&this.bumpIf("=")){var f=this.tryParseDecimalInteger(N.EXPECT_PLURAL_ARGUMENT_SELECTOR,N.INVALID_PLURAL_ARGUMENT_SELECTOR);if(f.err)return f;l=w(p,this.clonePosition()),c=this.message.slice(p.offset,this.offset())}else break}if(d.has(c))return this.error(r==="select"?N.DUPLICATE_SELECT_ARGUMENT_SELECTOR:N.DUPLICATE_PLURAL_ARGUMENT_SELECTOR,l);c==="other"&&(s=!0),this.bumpSpace();var _=this.clonePosition();if(!this.bumpIf("{"))return this.error(r==="select"?N.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT:N.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,w(this.clonePosition(),this.clonePosition()));var b=this.parseMessage(t+1,r,n);if(b.err)return b;var S=this.tryParseArgumentClose(_);if(S.err)return S;u.push([c,{value:b.val,location:w(_,this.clonePosition())}]),d.add(c),this.bumpSpace(),i=this.parseIdentifierIfPossible(),c=i.value,l=i.location}return u.length===0?this.error(r==="select"?N.EXPECT_SELECT_ARGUMENT_SELECTOR:N.EXPECT_PLURAL_ARGUMENT_SELECTOR,w(this.clonePosition(),this.clonePosition())):this.requiresOtherClause&&!s?this.error(N.MISSING_OTHER_CLAUSE,w(this.clonePosition(),this.clonePosition())):{val:u,err:null}},e.prototype.tryParseDecimalInteger=function(t,r){var n=1,o=this.clonePosition();this.bumpIf("+")||this.bumpIf("-")&&(n=-1);for(var i=!1,s=0;!this.isEOF();){var u=this.char();if(u>=48&&u<=57)i=!0,s=s*10+(u-48),this.bump();else break}var d=w(o,this.clonePosition());return i?(s*=n,zr(s)?{val:s,err:null}:this.error(r,d)):this.error(t,d)},e.prototype.offset=function(){return this.position.offset},e.prototype.isEOF=function(){return this.offset()===this.message.length},e.prototype.clonePosition=function(){return{offset:this.position.offset,line:this.position.line,column:this.position.column}},e.prototype.char=function(){var t=this.position.offset;if(t>=this.message.length)throw Error("out of bound");var r=wt(this.message,t);if(r===void 0)throw Error("Offset ".concat(t," is at invalid UTF-16 code unit boundary"));return r},e.prototype.error=function(t,r){return{val:null,err:{kind:t,message:this.message,location:r}}},e.prototype.bump=function(){if(!this.isEOF()){var t=this.char();t===10?(this.position.line+=1,this.position.column=1,this.position.offset+=1):(this.position.column+=1,this.position.offset+=t<65536?1:2)}},e.prototype.bumpIf=function(t){if(At(this.message,t,this.offset())){for(var r=0;r<t.length;r++)this.bump();return!0}return!1},e.prototype.bumpUntil=function(t){var r=this.offset(),n=this.message.indexOf(t,r);return n>=0?(this.bumpTo(n),!0):(this.bumpTo(this.message.length),!1)},e.prototype.bumpTo=function(t){if(this.offset()>t)throw Error("targetOffset ".concat(t," must be greater than or equal to the current offset ").concat(this.offset()));for(t=Math.min(t,this.message.length);;){var r=this.offset();if(r===t)break;if(r>t)throw Error("targetOffset ".concat(t," is at invalid UTF-16 code unit boundary"));if(this.bump(),this.isEOF())break}},e.prototype.bumpSpace=function(){for(;!this.isEOF()&&Mt(this.char());)this.bump()},e.prototype.peek=function(){if(this.isEOF())return null;var t=this.char(),r=this.offset(),n=this.message.charCodeAt(r+(t>=65536?2:1));return n!=null?n:null},e}();function $e(e){return e>=97&&e<=122||e>=65&&e<=90}function en(e){return $e(e)||e===47}function tn(e){return e===45||e===46||e>=48&&e<=57||e===95||e>=97&&e<=122||e>=65&&e<=90||e==183||e>=192&&e<=214||e>=216&&e<=246||e>=248&&e<=893||e>=895&&e<=8191||e>=8204&&e<=8205||e>=8255&&e<=8256||e>=8304&&e<=8591||e>=11264&&e<=12271||e>=12289&&e<=55295||e>=63744&&e<=64975||e>=65008&&e<=65533||e>=65536&&e<=983039}function Mt(e){return e>=9&&e<=13||e===32||e===133||e>=8206&&e<=8207||e===8232||e===8233}function rn(e){return e>=33&&e<=35||e===36||e>=37&&e<=39||e===40||e===41||e===42||e===43||e===44||e===45||e>=46&&e<=47||e>=58&&e<=59||e>=60&&e<=62||e>=63&&e<=64||e===91||e===92||e===93||e===94||e===96||e===123||e===124||e===125||e===126||e===161||e>=162&&e<=165||e===166||e===167||e===169||e===171||e===172||e===174||e===176||e===177||e===182||e===187||e===191||e===215||e===247||e>=8208&&e<=8213||e>=8214&&e<=8215||e===8216||e===8217||e===8218||e>=8219&&e<=8220||e===8221||e===8222||e===8223||e>=8224&&e<=8231||e>=8240&&e<=8248||e===8249||e===8250||e>=8251&&e<=8254||e>=8257&&e<=8259||e===8260||e===8261||e===8262||e>=8263&&e<=8273||e===8274||e===8275||e>=8277&&e<=8286||e>=8592&&e<=8596||e>=8597&&e<=8601||e>=8602&&e<=8603||e>=8604&&e<=8607||e===8608||e>=8609&&e<=8610||e===8611||e>=8612&&e<=8613||e===8614||e>=8615&&e<=8621||e===8622||e>=8623&&e<=8653||e>=8654&&e<=8655||e>=8656&&e<=8657||e===8658||e===8659||e===8660||e>=8661&&e<=8691||e>=8692&&e<=8959||e>=8960&&e<=8967||e===8968||e===8969||e===8970||e===8971||e>=8972&&e<=8991||e>=8992&&e<=8993||e>=8994&&e<=9e3||e===9001||e===9002||e>=9003&&e<=9083||e===9084||e>=9085&&e<=9114||e>=9115&&e<=9139||e>=9140&&e<=9179||e>=9180&&e<=9185||e>=9186&&e<=9254||e>=9255&&e<=9279||e>=9280&&e<=9290||e>=9291&&e<=9311||e>=9472&&e<=9654||e===9655||e>=9656&&e<=9664||e===9665||e>=9666&&e<=9719||e>=9720&&e<=9727||e>=9728&&e<=9838||e===9839||e>=9840&&e<=10087||e===10088||e===10089||e===10090||e===10091||e===10092||e===10093||e===10094||e===10095||e===10096||e===10097||e===10098||e===10099||e===10100||e===10101||e>=10132&&e<=10175||e>=10176&&e<=10180||e===10181||e===10182||e>=10183&&e<=10213||e===10214||e===10215||e===10216||e===10217||e===10218||e===10219||e===10220||e===10221||e===10222||e===10223||e>=10224&&e<=10239||e>=10240&&e<=10495||e>=10496&&e<=10626||e===10627||e===10628||e===10629||e===10630||e===10631||e===10632||e===10633||e===10634||e===10635||e===10636||e===10637||e===10638||e===10639||e===10640||e===10641||e===10642||e===10643||e===10644||e===10645||e===10646||e===10647||e===10648||e>=10649&&e<=10711||e===10712||e===10713||e===10714||e===10715||e>=10716&&e<=10747||e===10748||e===10749||e>=10750&&e<=11007||e>=11008&&e<=11055||e>=11056&&e<=11076||e>=11077&&e<=11078||e>=11079&&e<=11084||e>=11085&&e<=11123||e>=11124&&e<=11125||e>=11126&&e<=11157||e===11158||e>=11159&&e<=11263||e>=11776&&e<=11777||e===11778||e===11779||e===11780||e===11781||e>=11782&&e<=11784||e===11785||e===11786||e===11787||e===11788||e===11789||e>=11790&&e<=11798||e===11799||e>=11800&&e<=11801||e===11802||e===11803||e===11804||e===11805||e>=11806&&e<=11807||e===11808||e===11809||e===11810||e===11811||e===11812||e===11813||e===11814||e===11815||e===11816||e===11817||e>=11818&&e<=11822||e===11823||e>=11824&&e<=11833||e>=11834&&e<=11835||e>=11836&&e<=11839||e===11840||e===11841||e===11842||e>=11843&&e<=11855||e>=11856&&e<=11857||e===11858||e>=11859&&e<=11903||e>=12289&&e<=12291||e===12296||e===12297||e===12298||e===12299||e===12300||e===12301||e===12302||e===12303||e===12304||e===12305||e>=12306&&e<=12307||e===12308||e===12309||e===12310||e===12311||e===12312||e===12313||e===12314||e===12315||e===12316||e===12317||e>=12318&&e<=12319||e===12320||e===12336||e===64830||e===64831||e>=65093&&e<=65094}function Xe(e){e.forEach(function(t){if(delete t.location,yt(t)||xt(t))for(var r in t.options)delete t.options[r].location,Xe(t.options[r].value);else Et(t)&&vt(t.style)||(bt(t)||gt(t))&&Ge(t.style)?delete t.style.location:St(t)&&Xe(t.children)})}function nn(e,t){t===void 0&&(t={}),t=L({shouldParseSkeletons:!0,requiresOtherClause:!0},t);var r=new Kr(e,t).parse();if(r.err){var n=SyntaxError(N[r.err.kind]);throw n.location=r.err.location,n.originalMessage=r.err.message,n}return t!=null&&t.captureLocation||Xe(r.val),r.val}function qe(e,t){var r=t&&t.cache?t.cache:hn,n=t&&t.serializer?t.serializer:ln,o=t&&t.strategy?t.strategy:sn;return o(e,{cache:r,serializer:n})}function on(e){return e==null||typeof e=="number"||typeof e=="boolean"}function Ut(e,t,r,n){var o=on(n)?n:r(n),i=t.get(o);return typeof i=="undefined"&&(i=e.call(this,n),t.set(o,i)),i}function Dt(e,t,r){var n=Array.prototype.slice.call(arguments,3),o=r(n),i=t.get(o);return typeof i=="undefined"&&(i=e.apply(this,n),t.set(o,i)),i}function We(e,t,r,n,o){return r.bind(t,e,n,o)}function sn(e,t){var r=e.length===1?Ut:Dt;return We(e,this,r,t.cache.create(),t.serializer)}function an(e,t){return We(e,this,Dt,t.cache.create(),t.serializer)}function un(e,t){return We(e,this,Ut,t.cache.create(),t.serializer)}var ln=function(){return JSON.stringify(arguments)};function Je(){this.cache=Object.create(null)}Je.prototype.get=function(e){return this.cache[e]},Je.prototype.set=function(e,t){this.cache[e]=t};var hn={create:function(){return new Je}},ze={variadic:an,monadic:un},me;(function(e){e.MISSING_VALUE="MISSING_VALUE",e.INVALID_VALUE="INVALID_VALUE",e.MISSING_INTL_API="MISSING_INTL_API"})(me||(me={}));var Pe=function(e){Oe(t,e);function t(r,n,o){var i=e.call(this,r)||this;return i.code=n,i.originalMessage=o,i}return t.prototype.toString=function(){return"[formatjs Error: ".concat(this.code,"] ").concat(this.message)},t}(Error),Gt=function(e){Oe(t,e);function t(r,n,o,i){return e.call(this,'Invalid values for "'.concat(r,'": "').concat(n,'". Options are "').concat(Object.keys(o).join('", "'),'"'),me.INVALID_VALUE,i)||this}return t}(Pe),cn=function(e){Oe(t,e);function t(r,n,o){return e.call(this,'Value for "'.concat(r,'" must be of type ').concat(n),me.INVALID_VALUE,o)||this}return t}(Pe),fn=function(e){Oe(t,e);function t(r,n){return e.call(this,'The intl string context variable "'.concat(r,'" was not provided to the string "').concat(n,'"'),me.MISSING_VALUE,n)||this}return t}(Pe),z;(function(e){e[e.literal=0]="literal",e[e.object=1]="object"})(z||(z={}));function pn(e){return e.length<2?e:e.reduce(function(t,r){var n=t[t.length-1];return!n||n.type!==z.literal||r.type!==z.literal?t.push(r):n.value+=r.value,t},[])}function dn(e){return typeof e=="function"}function He(e,t,r,n,o,i,s){if(e.length===1&&_t(e[0]))return[{type:z.literal,value:e[0].value}];for(var u=[],d=0,c=e;d<c.length;d++){var l=c[d];if(_t(l)){u.push({type:z.literal,value:l.value});continue}if(Hr(l)){typeof i=="number"&&u.push({type:z.literal,value:r.getNumberFormat(t).format(i)});continue}var p=l.value;if(!(o&&p in o))throw new fn(p,s);var f=o[p];if(Pr(l)){(!f||typeof f=="string"||typeof f=="number")&&(f=typeof f=="string"||typeof f=="number"?String(f):""),u.push({type:typeof f=="string"?z.literal:z.object,value:f});continue}if(bt(l)){var _=typeof l.style=="string"?n.date[l.style]:Ge(l.style)?l.style.parsedOptions:void 0;u.push({type:z.literal,value:r.getDateTimeFormat(t,_).format(f)});continue}if(gt(l)){var _=typeof l.style=="string"?n.time[l.style]:Ge(l.style)?l.style.parsedOptions:n.time.medium;u.push({type:z.literal,value:r.getDateTimeFormat(t,_).format(f)});continue}if(Et(l)){var _=typeof l.style=="string"?n.number[l.style]:vt(l.style)?l.style.parsedOptions:void 0;_&&_.scale&&(f=f*(_.scale||1)),u.push({type:z.literal,value:r.getNumberFormat(t,_).format(f)});continue}if(St(l)){var b=l.children,S=l.value,v=o[S];if(!dn(v))throw new cn(S,"function",s);var P=He(b,t,r,n,o,i),R=v(P.map(function(E){return E.value}));Array.isArray(R)||(R=[R]),u.push.apply(u,R.map(function(E){return{type:typeof E=="string"?z.literal:z.object,value:E}}))}if(yt(l)){var A=l.options[f]||l.options.other;if(!A)throw new Gt(l.value,f,Object.keys(l.options),s);u.push.apply(u,He(A.value,t,r,n,o));continue}if(xt(l)){var A=l.options["=".concat(f)];if(!A){if(!Intl.PluralRules)throw new Pe(`Intl.PluralRules is not available in this environment.
Try polyfilling it using "@formatjs/intl-pluralrules"
`,me.MISSING_INTL_API,s);var j=r.getPluralRules(t,{type:l.pluralType}).select(f-(l.offset||0));A=l.options[j]||l.options.other}if(!A)throw new Gt(l.value,f,Object.keys(l.options),s);u.push.apply(u,He(A.value,t,r,n,o,f-(l.offset||0)));continue}}return pn(u)}function mn(e,t){return t?L(L(L({},e||{}),t||{}),Object.keys(e).reduce(function(r,n){return r[n]=L(L({},e[n]),t[n]||{}),r},{})):e}function _n(e,t){return t?Object.keys(e).reduce(function(r,n){return r[n]=mn(e[n],t[n]),r},L({},e)):e}function Ze(e){return{create:function(){return{get:function(t){return e[t]},set:function(t,r){e[t]=r}}}}}function En(e){return e===void 0&&(e={number:{},dateTime:{},pluralRules:{}}),{getNumberFormat:qe(function(){for(var t,r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return new((t=Intl.NumberFormat).bind.apply(t,De([void 0],r,!1)))},{cache:Ze(e.number),strategy:ze.variadic}),getDateTimeFormat:qe(function(){for(var t,r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return new((t=Intl.DateTimeFormat).bind.apply(t,De([void 0],r,!1)))},{cache:Ze(e.dateTime),strategy:ze.variadic}),getPluralRules:qe(function(){for(var t,r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return new((t=Intl.PluralRules).bind.apply(t,De([void 0],r,!1)))},{cache:Ze(e.pluralRules),strategy:ze.variadic})}}var bn=function(){function e(t,r,n,o){r===void 0&&(r=e.defaultLocale);var i=this;if(this.formatterCache={number:{},dateTime:{},pluralRules:{}},this.format=function(d){var c=i.formatToParts(d);if(c.length===1)return c[0].value;var l=c.reduce(function(p,f){return!p.length||f.type!==z.literal||typeof p[p.length-1]!="string"?p.push(f.value):p[p.length-1]+=f.value,p},[]);return l.length<=1?l[0]||"":l},this.formatToParts=function(d){return He(i.ast,i.locales,i.formatters,i.formats,d,void 0,i.message)},this.resolvedOptions=function(){var d;return{locale:((d=i.resolvedLocale)===null||d===void 0?void 0:d.toString())||Intl.NumberFormat.supportedLocalesOf(i.locales)[0]}},this.getAst=function(){return i.ast},this.locales=r,this.resolvedLocale=e.resolveLocale(r),typeof t=="string"){if(this.message=t,!e.__parse)throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");var s=o||{};s.formatters;var u=Rr(s,["formatters"]);this.ast=e.__parse(t,L(L({},u),{locale:this.resolvedLocale}))}else this.ast=t;if(!Array.isArray(this.ast))throw new TypeError("A message must be provided as a String or AST.");this.formats=_n(e.formats,n),this.formatters=o&&o.formatters||En(this.formatterCache)}return Object.defineProperty(e,"defaultLocale",{get:function(){return e.memoizedDefaultLocale||(e.memoizedDefaultLocale=new Intl.NumberFormat().resolvedOptions().locale),e.memoizedDefaultLocale},enumerable:!1,configurable:!0}),e.memoizedDefaultLocale=null,e.resolveLocale=function(t){if(typeof Intl.Locale!="undefined"){var r=Intl.NumberFormat.supportedLocalesOf(t);return r.length>0?new Intl.Locale(r[0]):new Intl.Locale(typeof t=="string"?t:t[0])}},e.__parse=nn,e.formats={number:{integer:{maximumFractionDigits:0},currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},e}();function gn(e,t={},r="zh-CN",n={}){return!n||!n[r]||!n[r][e]?"":new bn(n[r][e],r).format(t)}const Ft=()=>{};function yn(e){const t={};for(const r of e)W(r)&&r.length>=2&&(t[r[0]]=r[1]);return t}function jt(e,t){let r=null;return t?function(){r&&clearTimeout(r),r=setTimeout(()=>{r=null,e.apply(this)},t)}:function(){r||(r=setTimeout(()=>{r=null,e.apply(this)}))}}const Ye=e=>Object.prototype.toString.call(e);function xn(e){return new Promise(t=>setTimeout(t,e))}const Qe=e=>{const t=new Set(he(e)?e.split(","):W(e)?e:[]),r=D(e)?e:n=>t.has(n);return n=>{const o=Object.keys(n);if(o.every(d=>!r(d)))return[{},n,0];let i=0;const s={},u={};for(const d of o)r(d)?(s[d]=n[d],i++):u[d]=n[d];return[s,u,i]}};function ae(e){return e==null}function kt(e){return e===void 0}function he(e){return typeof e=="string"}function X(e){return!ae(e)&&typeof e=="object"}function Ke(e){return typeof e=="boolean"}function W(e){return Array.isArray(e)}function D(e){return typeof e=="function"}function et(e){return X(e)&&D(e.then)&&D(e.catch)}function _e(e){return!ae(e)&&Ye(e)==="[object Object]"}function Sn(e){return e&&(Reflect.get(e,"__esModule")||Reflect.get(e,Symbol.toStringTag)==="Module")}function tt(e){return e?X(e)&&(e.type==="JSFunction"||e.extType==="function"):!1}function Be(e){return X(e)&&e.type==="JSSlot"}function Ee(e){return X(e)&&e.type==="JSExpression"&&e.extType!=="function"}function rt(e){return X(e)&&e.type==="i18n"}function Ae(e){return e&&e.componentName}function nt(e){return Ae(e)&&e.componentName==="Slot"}function vn(e){return Ae(e)&&(e.componentName==="Block"||e.componentName==="Page"||e.componentName==="Component")}var ce;(function(e){e[e.Environment=1]="Environment",e[e.Library=2]="Library",e[e.Theme=3]="Theme",e[e.Runtime=4]="Runtime",e[e.Components=5]="Components",e[e.App=6]="App"})(ce||(ce={})),ce.Environment,ce.Library,ce.Theme,ce.Runtime,ce.Components,ce.App;var Vt;(function(e){e.JSUrl="jsUrl",e.CSSUrl="cssUrl",e.CSSText="cssText",e.JSText="jsText",e.Bundle="bundle"})(Vt||(Vt={}));function Ne(e){return e&&e.replace(/-[a-zA-Z]/g,t=>t.charAt(1).toLocaleUpperCase())}var $t;(function(e){e.Initial="init",e.Loading="loading",e.Loaded="loaded",e.Error="error"})($t||($t={}));var Xt;(function(e){e.ADDED="added",e.DELETED="deleted",e.MODIFIED="modified",e.COMPOSITE="composite"})(Xt||(Xt={}));var qt;(function(e){e.Children="Children",e.Prop="Prop"})(qt||(qt={}));var Wt;(function(e){e.Children="Children",e.Prop="Prop"})(Wt||(Wt={}));var Jt;(function(e){e[e.REPAINT=0]="REPAINT"})(Jt||(Jt={}));var zt;(function(e){e[e.REPAINT=0]="REPAINT"})(zt||(zt={}));var ot;(function(e){e.Render="render",e.Serilize="serilize",e.Save="save",e.Clone="clone",e.Init="init",e.Upgrade="upgrade"})(ot||(ot={}));var Zt;(function(e){e.Render="render",e.Serilize="serilize",e.Save="save",e.Clone="clone",e.Init="init",e.Upgrade="upgrade"})(Zt||(Zt={}));var Yt;(function(e){e.Node="node",e.NodeData="nodedata"})(Yt||(Yt={}));var Qt;(function(e){e.Node="node",e.NodeData="nodedata"})(Qt||(Qt={}));var Kt;(function(e){e.SET_VALUE="SET_VALUE",e.SUB_VALUE_CHANGE="SUB_VALUE_CHANGE"})(Kt||(Kt={}));var er;(function(e){e.SET_VALUE="SET_VALUE",e.SUB_VALUE_CHANGE="SUB_VALUE_CHANGE"})(er||(er={}));var tr={},Cn={get exports(){return tr},set exports(e){tr=e}},U={};/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var it,rr;function Tn(){if(rr)return it;rr=1;var e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function n(i){if(i==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(i)}function o(){try{if(!Object.assign)return!1;var i=new String("abc");if(i[5]="de",Object.getOwnPropertyNames(i)[0]==="5")return!1;for(var s={},u=0;u<10;u++)s["_"+String.fromCharCode(u)]=u;var d=Object.getOwnPropertyNames(s).map(function(l){return s[l]});if(d.join("")!=="0123456789")return!1;var c={};return"abcdefghijklmnopqrst".split("").forEach(function(l){c[l]=l}),Object.keys(Object.assign({},c)).join("")==="abcdefghijklmnopqrst"}catch(l){return!1}}return it=o()?Object.assign:function(i,s){for(var u,d=n(i),c,l=1;l<arguments.length;l++){u=Object(arguments[l]);for(var p in u)t.call(u,p)&&(d[p]=u[p]);if(e){c=e(u);for(var f=0;f<c.length;f++)r.call(u,c[f])&&(d[c[f]]=u[c[f]])}}return d},it}/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var nr;function On(){if(nr)return U;nr=1;var e=Tn(),t=typeof Symbol=="function"&&Symbol.for,r=t?Symbol.for("react.element"):60103,n=t?Symbol.for("react.portal"):60106,o=t?Symbol.for("react.fragment"):60107,i=t?Symbol.for("react.strict_mode"):60108,s=t?Symbol.for("react.profiler"):60114,u=t?Symbol.for("react.provider"):60109,d=t?Symbol.for("react.context"):60110,c=t?Symbol.for("react.forward_ref"):60112,l=t?Symbol.for("react.suspense"):60113,p=t?Symbol.for("react.memo"):60115,f=t?Symbol.for("react.lazy"):60116,_=typeof Symbol=="function"&&Symbol.iterator;function b(a){for(var m="https://reactjs.org/docs/error-decoder.html?invariant="+a,O=1;O<arguments.length;O++)m+="&args[]="+encodeURIComponent(arguments[O]);return"Minified React error #"+a+"; visit "+m+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var S={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function P(a,m,O){this.props=a,this.context=m,this.refs=v,this.updater=O||S}P.prototype.isReactComponent={},P.prototype.setState=function(a,m){if(typeof a!="object"&&typeof a!="function"&&a!=null)throw Error(b(85));this.updater.enqueueSetState(this,a,m,"setState")},P.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function R(){}R.prototype=P.prototype;function A(a,m,O){this.props=a,this.context=m,this.refs=v,this.updater=O||S}var j=A.prototype=new R;j.constructor=A,e(j,P.prototype),j.isPureReactComponent=!0;var E={current:null},x=Object.prototype.hasOwnProperty,g={key:!0,ref:!0,__self:!0,__source:!0};function y(a,m,O){var G,I={},q=null,oe=null;if(m!=null)for(G in m.ref!==void 0&&(oe=m.ref),m.key!==void 0&&(q=""+m.key),m)x.call(m,G)&&!g.hasOwnProperty(G)&&(I[G]=m[G]);var $=arguments.length-2;if($===1)I.children=O;else if(1<$){for(var Q=Array($),le=0;le<$;le++)Q[le]=arguments[le+2];I.children=Q}if(a&&a.defaultProps)for(G in $=a.defaultProps,$)I[G]===void 0&&(I[G]=$[G]);return{$$typeof:r,type:a,key:q,ref:oe,props:I,_owner:E.current}}function T(a,m){return{$$typeof:r,type:a.type,key:m,ref:a.ref,props:a.props,_owner:a._owner}}function H(a){return typeof a=="object"&&a!==null&&a.$$typeof===r}function M(a){var m={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(O){return m[O]})}var B=/\/+/g,C=[];function k(a,m,O,G){if(C.length){var I=C.pop();return I.result=a,I.keyPrefix=m,I.func=O,I.context=G,I.count=0,I}return{result:a,keyPrefix:m,func:O,context:G,count:0}}function J(a){a.result=null,a.keyPrefix=null,a.func=null,a.context=null,a.count=0,10>C.length&&C.push(a)}function re(a,m,O,G){var I=typeof a;(I==="undefined"||I==="boolean")&&(a=null);var q=!1;if(a===null)q=!0;else switch(I){case"string":case"number":q=!0;break;case"object":switch(a.$$typeof){case r:case n:q=!0}}if(q)return O(G,a,m===""?"."+pe(a,0):m),1;if(q=0,m=m===""?".":m+":",Array.isArray(a))for(var oe=0;oe<a.length;oe++){I=a[oe];var $=m+pe(I,oe);q+=re(I,$,O,G)}else if(a===null||typeof a!="object"?$=null:($=_&&a[_]||a["@@iterator"],$=typeof $=="function"?$:null),typeof $=="function")for(a=$.call(a),oe=0;!(I=a.next()).done;)I=I.value,$=m+pe(I,oe++),q+=re(I,$,O,G);else if(I==="object")throw O=""+a,Error(b(31,O==="[object Object]"?"object with keys {"+Object.keys(a).join(", ")+"}":O,""));return q}function se(a,m,O){return a==null?0:re(a,"",m,O)}function pe(a,m){return typeof a=="object"&&a!==null&&a.key!=null?M(a.key):m.toString(36)}function Me(a,m){a.func.call(a.context,m,a.count++)}function Z(a,m,O){var G=a.result,I=a.keyPrefix;a=a.func.call(a.context,m,a.count++),Array.isArray(a)?ie(a,G,O,function(q){return q}):a!=null&&(H(a)&&(a=T(a,I+(!a.key||m&&m.key===a.key?"":(""+a.key).replace(B,"$&/")+"/")+O)),G.push(a))}function ie(a,m,O,G,I){var q="";O!=null&&(q=(""+O).replace(B,"$&/")+"/"),m=k(m,q,G,I),se(a,Z,m),J(m)}var ye={current:null};function ne(){var a=ye.current;if(a===null)throw Error(b(321));return a}var dt={ReactCurrentDispatcher:ye,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:e};return U.Children={map:function(a,m,O){if(a==null)return a;var G=[];return ie(a,G,null,m,O),G},forEach:function(a,m,O){if(a==null)return a;m=k(null,null,m,O),se(a,Me,m),J(m)},count:function(a){return se(a,function(){return null},null)},toArray:function(a){var m=[];return ie(a,m,null,function(O){return O}),m},only:function(a){if(!H(a))throw Error(b(143));return a}},U.Component=P,U.Fragment=o,U.Profiler=s,U.PureComponent=A,U.StrictMode=i,U.Suspense=l,U.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=dt,U.cloneElement=function(a,m,O){if(a==null)throw Error(b(267,a));var G=e({},a.props),I=a.key,q=a.ref,oe=a._owner;if(m!=null){if(m.ref!==void 0&&(q=m.ref,oe=E.current),m.key!==void 0&&(I=""+m.key),a.type&&a.type.defaultProps)var $=a.type.defaultProps;for(Q in m)x.call(m,Q)&&!g.hasOwnProperty(Q)&&(G[Q]=m[Q]===void 0&&$!==void 0?$[Q]:m[Q])}var Q=arguments.length-2;if(Q===1)G.children=O;else if(1<Q){$=Array(Q);for(var le=0;le<Q;le++)$[le]=arguments[le+2];G.children=$}return{$$typeof:r,type:a.type,key:I,ref:q,props:G,_owner:oe}},U.createContext=function(a,m){return m===void 0&&(m=null),a={$$typeof:d,_calculateChangedBits:m,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null},a.Provider={$$typeof:u,_context:a},a.Consumer=a},U.createElement=y,U.createFactory=function(a){var m=y.bind(null,a);return m.type=a,m},U.createRef=function(){return{current:null}},U.forwardRef=function(a){return{$$typeof:c,render:a}},U.isValidElement=H,U.lazy=function(a){return{$$typeof:f,_ctor:a,_status:-1,_result:null}},U.memo=function(a,m){return{$$typeof:p,type:a,compare:m===void 0?null:m}},U.useCallback=function(a,m){return ne().useCallback(a,m)},U.useContext=function(a,m){return ne().useContext(a,m)},U.useDebugValue=function(){},U.useEffect=function(a,m){return ne().useEffect(a,m)},U.useImperativeHandle=function(a,m,O){return ne().useImperativeHandle(a,m,O)},U.useLayoutEffect=function(a,m){return ne().useLayoutEffect(a,m)},U.useMemo=function(a,m){return ne().useMemo(a,m)},U.useReducer=function(a,m,O){return ne().useReducer(a,m,O)},U.useRef=function(a){return ne().useRef(a)},U.useState=function(a){return ne().useState(a)},U.version="16.14.0",U}(function(e){e.exports=On()})(Cn);function st(e){return X(e)&&D(e.export)?e.export(ot.Render):null}function be(e){console.warn("[vue-renderer]: "+e)}const or={};function Rn(e){!or[e]&&(or[e]=!0)&&be(e)}var Y=(e=>(e[e.OTHER=0]="OTHER",e[e.SETUP=1]="SETUP",e[e.DATA=2]="DATA",e[e.PROPS=3]="PROPS",e[e.CONTEXT=4]="CONTEXT",e))(Y||{});function ir(e,t){switch(t){case 1:return e.$.setupState.__lcSetup?e.$.setupState:e.$.setupState=h.proxyRefs(Object.create(null,{__lcSetup:{get:()=>!0,enumerable:!1,configurable:!1}}));case 2:return h.isReactive(e.$.data)?e.$.data:e.$.data=h.reactive({});case 3:return e.$.props;default:return e.$.ctx}}function ee(e,t,r,n){const o=e.$,i=ir(e,t);if(n){const s=Object.getOwnPropertyDescriptors(r);for(const u in s){if(u in i){be("重复定义 key: "+u);continue}Object.defineProperty(i,u,s[u]),o.accessCache[u]=t}}else for(const s in r){if(s in i){be("重复定义 key: "+s);continue}i[s]=Reflect.get(r,s),o.accessCache[s]=t}if(t===3&&Object.keys(r).length>0){const{propsOptions:[s,u]}=o,d={},c=[];for(const l in r){if(s[l])continue;const p=Reflect.get(r,l);Ke(p)?(d[l]={0:!0,1:!0,type:Boolean,default:p},c.push(l)):kt(p)?d[l]={0:!1,1:!1,type:null}:(d[l]={0:!0,1:!1,type:null,default:p},c.push(l))}Object.keys(d).length>0&&(o.propsOptions=[{...s,...d},[...u,...c]])}}function at(e){return"$"in e}function Pn(e){return!e||!X(e)?!1:!!(at(e)||Object.keys(e).length>0)}function ut(...e){const t=[];if(e.flat().forEach(o=>{Pn(o)&&t.push(o)}),t.length<=1)return t[0];const[r,...n]=t;return n.reduce((o,i)=>{if(at(i)){if(at(o))return i;{const u=o;o=i,i=u}}const s=Object.getOwnPropertyDescriptors(i);return o=Object.create(o,s),h.isProxy(i)?h.reactive(o):o},r)}function te(e){return e?W(e)?e:[e]:[]}const Hn={JSEXPRESSION:"JSExpression",JSFUNCTION:"JSFunction",JSSLOT:"JSSlot",JSBLOCK:"JSBlock",I18N:"i18n"},pt=class{constructor(t){xe(this,"createFunction");xe(this,"exports",{});this.createFunction=t&&!t.thisRequired?r=>new Function("__exports__","__scope__",`with(__exports__) { with(__scope__) { ${r} } }`):r=>new Function("__exports__",`with(__exports__) { ${r} }`)}static cleanCacheModules(){this.cacheModules={}}initModule(t){var o;const r=(o=t.lifeCycles)==null?void 0:o.initModule,n=r&&this.parseSchema(r,!1);return this.exports=D(n)?n(pt.cacheModules,window):{},this}parseSlotScope(t,r){const n={};return te(r).forEach((o,i)=>{n[o]=t[i]}),n}parseI18n(t,r){return this.parseExpression({type:Hn.JSEXPRESSION,value:`this.$t(${JSON.stringify(t.key)})`},r)}parseSchema(t,r){if(Ee(t)||tt(t))return this.parseExpression(t,r);if(rt(t))return this.parseI18n(t,r);if(he(t))return t.trim();if(W(t))return t.map(n=>this.parseSchema(n,r));if(D(t))return t.bind(r);if(_e(t)){if(!t)return t;const n={};return Object.keys(t).forEach(o=>{o.startsWith("__")||(n[o]=this.parseSchema(t[o],r))}),n}return t}parseOnlyJsValue(t){if(!(Ee(t)||Ee(t)||rt(t))){{if(W(t))return t.map(r=>this.parseOnlyJsValue(r));if(_e(t)){const r={};return Object.keys(t).forEach(n=>{n.startsWith("__")||(r[n]=this.parseOnlyJsValue(t[n]))}),r}}return t}}parseExpression(t,r){try{const n=['"use strict";',"var __self = arguments[1];"];n.push("return ");let o;return o=(t.value||"").trim(),r!==!1&&!o.match(/^\([^)]*\)\s*=>/)&&(o=o.replace(/this(\W|$)/g,(s,u)=>`__self${u}`)),o=n.join(`
`)+o,this.createFunction(o)(this.exports,r||{})}catch(n){console.warn("parseExpression.error",n,t,self);return}}};let ue=pt;xe(ue,"cacheModules",{});function Bn(){let e=window.__currentNode;return e||(e=Symbol("__currentNode"),window.__currentNode=e),e}function sr(){let e=window.__rendererContext;return e||(e=Symbol("__rendererContext"),window.__rendererContext=e),e}function ge(){const e=sr();return h.inject(e,()=>{var t,r;const n=(r=(t=h.getCurrentInstance())==null?void 0:t.props)!=null?r:{};return{rerender:()=>{},thisRequiredInJSE:!0,components:we(n,"components",{}),designMode:we(n,"designMode","live"),getNode:we(n,"getNode",()=>null),wrapLeafComp:(o,i,s)=>s,triggerCompGetCtx:we(n,"triggerCompGetCtx",()=>{})}},!0)}function we(e,t,r){return e[t]||e[`__${t}`]||r}const ar=Symbol("hocNode"),An=e=>{const{rerender:t}=ge(),r=h.inject(ar,null),n=jt(e);h.provide(ar,{rerenderSlots:n});debugger;return r?{rerender:n,rerenderRoot:t,rerenderParent:r.rerenderSlots}:{rerender:n,rerenderRoot:t,rerenderParent:t}},Nn=h.defineComponent({name:"Hoc",inheritAttrs:!1,props:Te,setup(e,{slots:t,attrs:r}){const n=h.shallowRef(!0),o=h.shallowRef(e.__schema),i=h.shallowRef();debugger;const s=v=>{o.value=v,i.value=yr(v,f).slots},{rerender:u,rerenderRoot:d,rerenderParent:c}=An(()=>{const v=f?st(f):null;v&&s(v)}),l={};h.onUnmounted(()=>Object.keys(l).forEach(v=>{l[v](),delete l[v]}));const{locked:p,node:f,buildSlots:_,getNode:b,isRootNode:S}=ct(e,(v,P)=>{const R=v.id;if(R){if(P&&l[R])l[R](),delete l[R];else if(!P&&!l[R]){const A=b(R);A&&(l[R]=A.onVisibleChange(()=>u()))}}});if(f){const v=f.onChildrenChange(()=>{d()});v&&h.onUnmounted(v),h.onUnmounted(f.onPropChange(P=>{const{key:R,prop:A,newValue:j,oldValue:E}=P;A.path.length===1?R==="___isLocked___"?p.value=j:Be(j)||Be(E)?d():c():c()})),h.onUnmounted(f.onVisibleChange(P=>{S?n.value=P:c()})),s(st(f))}return h.watch(()=>e.__schema,v=>s(v)),()=>{var j;const{__comp:v,__vnodeProps:P}=e,R=vr(r)[1];if(S&&!n.value)return null;const A=i.value?_(i.value,f):t;return v?Ie(v)?h.h(h.Fragment,(j=A.default)==null?void 0:j.call(A)):h.h(v,h.mergeProps(R,P),A):h.h("div","component not found")}}}),wn=h.defineComponent({inheritAttrs:!1,props:Te,setup:(e,{attrs:t,slots:r})=>{const{triggerCompGetCtx:n}=ge();return()=>{var d;const{__comp:o,__vnodeProps:i,__schema:s}=e,u=vr(t)[1];return Ie(o)?h.h(h.Fragment,(d=r.default)==null?void 0:d.call(r)):o?h.h(o,h.mergeProps(u,i,{onVnodeMounted(c){var p;const l=(p=c.component)==null?void 0:p.proxy;l&&n(s,l)}}),r):null}}});function ur(e){const t=[];return Object.keys(e).forEach(r=>{const n=e[r];n==null||n===""||(typeof n=="object"?t.push(`${r}=${encodeURIComponent(JSON.stringify(n))}`):t.push(`${r}=${encodeURIComponent(String(n))}`))}),t.join("&")}function In(e,t){if(!t)return e;const r=ur(t);return r?e.indexOf("?")>0?`${e}&${r}`:`${e}?${r}`:e}function Ln(e,t){for(const r in e)if(r.toLowerCase()===t)return[e[r],r];return[]}function Mn(e){return["arrayBuffer","blob","formData","json","text"].includes(e)}function Un(e){const t=new FormData;for(const r in e){const n=e[r];n instanceof Blob?t.append(r,n):t.append(r,String(n))}return t}const lr={"application/json":e=>JSON.stringify(e),"multipart/form-data":e=>_e(e)?Un(e):e,"application/x-www-form-urlencoded":e=>ur(e)};function Dn(e,t){const r=Object.keys(lr).find(n=>e.includes(n));return r?lr[r](t):t}class Se extends Error{constructor(t,r,n){super(t),this.code=r,this.data=n}}class hr{constructor(t,r){this.code=t,this.data=r}}async function Gn(e){const{uri:t,method:r,timeout:n,params:o={},headers:i={},responseType:s="json"}=e;let u;const d={Accept:"application/json",...i},c={method:r,headers:d};if(r==="GET"||r==="DELETE"||r==="OPTIONS")u=In(t,o);else{u=t;const[f,_]=Ln(d,"content-type");c.body=Dn(f!=null?f:"application/json",o),f==="multipart/form-data"&&_&&delete d[_]}if(n){const f=new AbortController;c.signal=f.signal,setTimeout(()=>f.abort(),n)}const l=await fetch(u,c),p=l.status;if(p>=200&&p<300)if(p===204){if(r==="DELETE")return new hr(p,null);throw new Se(l.statusText,p)}else{if(!Mn(s))throw new Se(`invalid response type: ${s}`,-1);return new hr(p,await l[s]())}else if(p>=400)try{const f=await l.json();throw new Se(l.statusText,p,f)}catch(f){throw new Se(l.statusText,p)}throw new Se(l.statusText,p)}var fe=(e=>(e.Initial="init",e.Loading="loading",e.Loaded="loaded",e.Error="error",e))(fe||{});const Fn=e=>e,jn=()=>{},kn=()=>!0;function Vn(e,t,r){const n=new ue({thisRequired:r.__thisRequired}),o=h.shallowRef(),i=h.shallowRef(),s=h.ref(fe.Initial),u=h.computed(()=>s.value===fe.Loading),d=h.computed(()=>!!n.parseSchema(e.isInit,r)),{willFetch:c,shouldFetch:l,dataHandler:p,errorHandler:f}=e,_={willFetch:c?n.parseSchema(c,r):Fn,shouldFetch:l?n.parseSchema(l,r):kn,dataHandler:p?n.parseSchema(p,r):S=>S.data,errorHandler:f?n.parseSchema(f,r):jn},b=async(S,v={})=>{try{const{type:P,options:R,id:A}=e,{headers:j,assignToScope:E=!0,...x}=v;if(!t)throw new Error("unsupport fetch type: "+P);if(!(D(_.shouldFetch)?_.shouldFetch():Ke(_.shouldFetch)?_.shouldFetch:!0))throw s.value=fe.Error,new Error(`the ${A} request should not fetch, please check the condition`);const{params:y,headers:T,...H}=n.parseSchema(R!=null?R:{},r);s.value=fe.Loading;const M=await t(_.willFetch({...H,...x,headers:{...T,...j},params:_e(y)&&_e(S)?{...y,...S}:S!=null?S:y}));s.value=fe.Loaded;const B=o.value=_.dataHandler(M);return!kt(o)&&E&&(r[A]=B),B}catch(P){throw s.value=fe.Error,i.value=P,_.errorHandler(P),P}};return h.reactive({data:o,error:i,loading:u,status:s,isInit:d,load:b})}function $n({list:e=[],dataHandler:t},r){const n={},o={};return e.forEach(u=>{const d={dataHandler:t,...u},c=Vn(d,Gn,r),l=(p,f)=>{const _={assignToScope:!1,...f};return c.load(p,_)};n[u.id]=l,o[u.id]=c}),{dataSource:n,dataSourceMap:o,reloadDataSource:(u,d,c)=>{if(u){const p=o[u];if(!p)throw new Error("dataSource not found, id: "+u);return p.load(d,c)}const l=Object.keys(o).map(p=>o[p]).filter(p=>p.isInit).map(p=>p.load());return Promise.all(l)},hasInitDataSource:()=>Object.keys(o).some(u=>o[u].isInit)}}function Xn(e,t,r){const n=e.parseSchema(t,r);if(!_e(n))return;const o={};for(const i in n){const s=n[i],u=D(s)?s:D(s.get)?s.get:Ft,d=!D(s)&&D(s.set)?s.set:Ft,c=h.computed({get:u,set:d});Object.defineProperty(o,i,{enumerable:!0,configurable:!0,get:()=>c.value,set:l=>c.value=l})}ee(r,Y.CONTEXT,o,!0)}function cr(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:e===null?"null":""}function fr(e,t){return cr(e)===cr(t)}function pr(e,t){return W(t)?t.findIndex(r=>fr(r,e)):D(t)&&fr(t,e)?0:-1}function qn(e,t,r){const n=e.parseSchema(t,!1);if(!n||!X(n)&&!W(n)||X(n)&&Object.keys(n).length===0||W(n)&&n.length===0)return;const{propsOptions:[o,i]}=r.$,s={},u=[];for(const d in n){const c=n[d];let l,p;if(he(c)?(l=Ne(c),p={}):(l=Ne(d),p=W(c)||D(c)?{type:c}:c),o[l]){be("prop "+l+"声明重复");continue}const f=pr(Boolean,p.type),_=pr(String,p.type);s[l]={0:f>-1,1:_<0||f<_,...p},(f>-1||"default"in p)&&u.push(l)}Object.keys(s).length>0&&(r.$.propsOptions=[{...o,...s},[...i,...u]])}function Wn(e,t,r){const n=e.parseSchema(t,!1),o=W(n)?n.reduce((i,s)=>(i[s]=null,i),{}):X(n)?n:null;!o||Object.keys(o).length===0||(r.$.emitsOptions=Object.create(r.$.emitsOptions,Object.getOwnPropertyDescriptors(o)))}function Jn(e,t,r){const n=e.parseSchema(t,r),o=D(n)?n():X(n)?n:null;!o||Object.keys(o).length===0||ee(r,Y.DATA,o)}function zn(e,t){const r=t.split(".");return()=>{let n=e;for(let o=0;o<r.length&&n;o++)n=n[r[o]];return n}}function dr(e,t,r,n){const o=n.includes(".")?zn(r,n):()=>r[n];if(he(e)){const i=t[e];D(i)?h.watch(o,i):h.warn(`Invalid watch handler specified by key "${e}"`,i)}else if(D(e))h.watch(o,e);else if(X(e))if(W(e))e.forEach(i=>dr(i,t,r,n));else{const i=D(e.handler)?e.handler:he(e.handler)?t[e.handler]:null;D(i)?h.watch(o,i,e):h.warn(`Invalid watch handler specified by key "${e.handler}"`,i)}else h.warn(`Invalid watch option: "${n}"`,e)}function Zn(e,t,r){const n=e.parseSchema(t,r);if(!n||!X(n)||Object.keys(n).length===0)return;const o=ir(r,Y.CONTEXT);for(const i in n)dr(n[i],o,r,i)}function Yn(e,t,r){const n=e.parseSchema(t,!1);let o;if(W(n))o=n.reduce((s,u)=>(s[u]=u,s),{});else if(X(n))o=n;else return;const i={};for(const s in o){const u=o[s];let d;if(X(u)){const c=u.from||s;"default"in u?d=h.inject(c,u.default,!0):d=h.inject(c)}else d=h.inject(u);h.isRef(d)?Object.defineProperty(i,s,{enumerable:!0,configurable:!0,get:()=>d.value,set:c=>d.value=c}):i[s]=d}ee(r,Y.CONTEXT,i,!0)}function Qn(e,t,r){const n=e.parseSchema(t,r),o=D(n)?n():n;X(o)&&Reflect.ownKeys(o).forEach(i=>{const s=Reflect.get(o,i);h.provide(i,s)})}function Kn(e,t,r,[n,o]){const i=e.parseSchema(t,!1);if(!D(i))return;const s=i.apply(void 0,[n,o]);if(et(s))return s.then(u=>mr(u,r));mr(s,r)}function mr(e,t){if(!ae(e)){if(!X(e)){be("不支持的 setup 返回值类型, type: "+Ye(e));return}ee(t,Y.SETUP,h.toRaw(e))}}function eo(e,t,r){const n=e.parseSchema(t,!1);D(n)&&n.call(r)}function to(e,t,r){const n=e.parseSchema(t,!1);D(n)&&n.call(r)}const _r=Symbol(),Er=e=>void(e[_r]=!0),lt=e=>_r in e,ro=e=>D(e),no=["beforeRouteEnter","beforeRouteUpdate","beforeRouteLeave"],br=Symbol("LOWCODE_ROUTE_META");function oo(e){const t=e.split(".");return r=>{let n=r;for(let o=0;o<t.length&&n;o++)n=n[t[o]];return n}}function io(e,t){var d,c;if(lt(e))return;Er(e);const r=(d=t==null?void 0:t.timeout)!=null?d:6e4,n=new ue(t),o=oo((c=t==null?void 0:t.scopePath)!=null?c:"runtimeScope");function i(l,p,f,_){if(!X(f)||!X(f.lifeCycles))return p;const b={};for(const S of no){const v=f.lifeCycles[S],P=_.parseSchema(v,!1);D(P)&&(b[S]=s(l,P))}return Object.keys(b).length>0?Object.create(p,Object.getOwnPropertyDescriptors(b)):p}function s(l,p){return p.length<3?function(f,_){const b=o(this);return u(p.call(b,f,_))}:function(f,_,b){const S=o(this);return u(p.call(S,f,_,b))}}const u=l=>D(l)?async p=>{let f;const _=Date.now();for(;!(f=o(p));){if(Date.now()-_>=r)throw new Error("lowcode guard wait timeout");await xn()}return l(f)}:et(l)?l.then(u):l;return e.beforeEach((l,p,f)=>{if(l.matched.every(_=>lt(_)))return f();Promise.all(l.matched.map(async _=>{var P;if(lt(_))return;const b=(P=_.components)!=null?P:{},S=b.default,v=_.meta[br];if(S&&vn(v)){let R;ro(S)?(R=await S(),Sn(R)&&(R=R.default)):R=S,b.default=i(_,R,v,n.initModule(v))}Er(_)})).then(()=>f())})}const so={setup:Kn,created:eo,beforeCreate:to,initInject:Yn,initProvide:Qn,initEmits:Wn,initProps:qn,initData:Jn,initWatch:Zn,initComputed:Xn};function ao(e,t,r){function n(o,i,s){var l;const d=((l=e.lifeCycles)!=null?l:{})[o],c=so[o];if(d&&c)return c(r,d,t,[i,s])}return n}const uo=Bn(),lo={beforeMount:h.onBeforeMount,mounted:h.onMounted,beforeUpdate:h.onBeforeUpdate,updated:h.onUpdated,activated:h.onActivated,deactivated:h.onDeactivated,beforeUnmount:h.onBeforeUnmount,renderTracked:h.onRenderTracked,renderTriggered:h.onRenderTriggered,unmounted:h.onUnmounted,errorCaptured:h.onErrorCaptured,serverPrefetch:h.onServerPrefetch},ho={componentDidMount:h.onMounted,componentDidCatch:h.onErrorCaptured,shouldComponentUpdate:h.onBeforeUpdate,componentWillUnmount:h.onBeforeUnmount},ht={...lo,...ho};function Ie(e){return e===h.Fragment}function co(e){return e in ht}function fo(e){const t={};if(X(e))for(const r in e)r in ht&&(t[r]=e[r]);return t}const gr=Symbol("IS_LOCKED"),Le=Symbol("IS_ROOT_NODE");function po(e){const t=h.ref(e),r=h.inject(gr,null),n=h.computed({get:()=>(r==null?void 0:r.value)||t.value,set:o=>t.value=o});return h.provide(gr,n),n}function mo(e){return e?h.provide(Le,!0):(e=h.inject(Le,null),e==null?h.provide(Le,e=!0):e&&h.provide(Le,!1)),e}function ct(e,t=()=>{}){const r=ge(),{getNode:n,wrapLeafComp:o,designMode:i,thisRequiredInJSE:s}=r,u=new ue({thisRequired:s}),d=e.__schema.id?n(e.__schema.id):null,c=d?po(d.isLocked):h.ref(!1),l=i==="design";h.provide(uo,{mode:i,node:d,isDesignerEnv:l});const p=(E,x,g,y)=>{var Me;const T=ut(e.__scope,g);if(he(E))return h.createTextVNode(E);if(!Ae(E)){const Z=u.parseSchema(E,T);return h.createTextVNode(h.toDisplayString(Z))}const{show:H,scence:M}=j(E,T,l);if(!H)return h.createCommentVNode(`${M} ${H}`);const B=E.id?n(E.id):null,{componentName:C}=E;if(!y&&(y=r.components[C],!y)){if(C==="Slot")return te(E.children).flatMap(Z=>p(Z,x,g)).filter(Z=>!ae(Z));if(l)return h.h("div",`component[${C}] not found`);y={setup(Z,{slots:ie}){return Rn("组件未找到, 组件名："+C),h.h("div",h.mergeProps(Z,{class:"lc-component-not-found"}),ie)}}}x=o(C,y,x);const k=Z=>{r.triggerCompGetCtx(E,Z)},{props:J,slots:re}=yr(E),{loop:se,buildLoopScope:pe}=A(E,T);if(!se){const Z=R(J,T,B,null,{ref:k}),[ie,ye]=Sr(Z);return h.h(x,{key:(Me=ie.key)!=null?Me:E.id,__comp:y,__scope:T,__schema:E,__vnodeProps:ie,...ye},S(re,B))}return W(se)?se.map((Z,ie,ye)=>{var O;const ne=pe(Z,ie,ye.length),dt=R(J,T,B,ne,{ref:k}),[a,m]=Sr(dt);return h.h(x,{key:(O=a.key)!=null?O:`${E.id}--${ie}`,__comp:y,__scope:ne,__schema:E,__vnodeProps:a,...m},S(re,B))}):(be("循环对象必须是数组, type: "+Ye(se)),null)},b=l?(E,x,g)=>{const y=p(E,Nn,x,g);return Ae(E)&&h.isVNode(y)&&(y.type===h.Comment?t(E,!1):t(E,!0)),y}:(E,x,g)=>p(E,wn,x,g),S=(E,x,g)=>Object.keys(E).reduce((y,T)=>{const H=E[T],M=T==="default";if(ae(H)||M&&!(x!=null&&x.isContainerNode)&&W(H)&&H.length===0)return y;let B;return W(H)?B=()=>H.map(C=>b(C,g)).filter(C=>!ae(C)):nt(H)?H.id?B=(...C)=>{var J;const k=b(H,[g,u.parseSlotScope(C,(J=H.params)!=null?J:[])]);return te(k)}:B=(...C)=>{var J;const k=u.parseSlotScope(C,(J=H.params)!=null?J:[]);return te(H.children).map(re=>b(re,[g,k])).filter(re=>!ae(re))}:B=()=>te(b(H,g)),y[T]=M&&l&&(x!=null&&x.isContainerNode)?Eo(B,c):B,y},{}),v=(E,x,g,y)=>{var T,H;if(Ee(E)||tt(E))return u.parseExpression(E,x);if(rt(E))return u.parseI18n(E,x);if(Be(E)){let M,B;return y!=null&&y.slotNode?(B=y.slotNode.schema,M=nt(B)?(T=B.params)!=null?T:[]:[]):(B=te(E.value),M=(H=E.params)!=null?H:[]),(...C)=>{const k=u.parseSlotScope(C,M),J=[];return te(B).forEach(re=>{const se=b(re,[g,k]);te(se).forEach(pe=>J.push(pe))}),J}}else{if(W(E))return E.map((M,B)=>v(M,x,g,y==null?void 0:y.get(B)));if(E&&X(E)){const M={};return Object.keys(E).forEach(B=>{if(B.startsWith("__"))return;const C=E[B],k=y==null?void 0:y.get(B);M[B]=v(C,x,g,k)}),M}}return E},P=(E,x,g,y)=>{if(he(E)){const T=E;let H=null;return M=>{let B=x.$.refs;if(Object.keys(B).length===0&&(B=x.$.refs={}),ae(x.__loopRefIndex))B[T]=M,T in x&&(x[T]=M);else{let C=B[T];if(!W(C))C=B[T]=[],T in x&&(C=x[T]=C);else if(T in x){const k=x[T];!W(k)||h.toRaw(k)!==C?C=x[T]=C:C=k}if(ae(M)){const k=C.indexOf(H);k>=0&&C.splice(k,1)}else C[x.__loopRefIndex]=M}H=M}}else{const T=v(E,x,g,y);return he(T)?P(T,x,g,y):T}},R=(E,x,g,y,T)=>{const H={};Object.keys(E).forEach(C=>{xr(H,C,E[C])});const M={},B=y?ut(x,y):x;return Object.keys(H).forEach(C=>{const k=H[C];M[C]=C==="ref"?P(k,B,y,g==null?void 0:g.getProp(C)):v(k,B,y,g==null?void 0:g.getProp(C))}),T&&Object.keys(T).forEach(C=>{xr(M,C,T[C])}),M},A=(E,x)=>{let g=null;const y=["item","index"];return E.loop&&(g=E.loop),E.loopArgs&&E.loopArgs.forEach((T,H)=>{y[H]=T}),{loop:g?u.parseSchema(g,x):null,loopArgs:y,buildLoopScope(T,H,M){var J;const B=(J=x.__loopRefOffset)!=null?J:0,[C,k]=y;return{[C]:T,[k]:H,__loopScope:!0,__loopRefIndex:B+H,__loopRefOffset:M*H}}}},j=(E,x,g)=>{var H,M;const y=g&&(H=E.hidden)!=null?H:!1,T=(M=E.condition)!=null?M:!0;return y?{scence:"hidden",show:!1}:{scence:"condition",show:typeof T=="boolean"?T:!!u.parseSchema(T,x)}};return{node:d,locked:c,isRootNode:mo(e.__isRootNode),getNode:n,renderComp:b,buildProps:R,buildSlots:S}}function ve(e,t){const r=h.computed(()=>e.__schema),n={__comp:null,__scope:t,__isRootNode:!0,__vnodeProps:{},__schema:e.__schema},o=h.computed(()=>{var s;return(s=e.__designMode)!=null?s:"live"}),i=h.computed(()=>e.__components);return{scope:t,schemaRef:r,designModeRef:o,componentsRef:i,...ct(n)}}function Ce(e,t){var x;const{__schema:r,__scope:n,__parser:o}=e,{props:i,state:s,methods:u,lifeCycles:d}=r!=null?r:{},c=h.getCurrentInstance(),l=c.proxy,p=ao(r,l,o);if(p("initEmits"),p("beforeCreate"),p("initProps"),i){const g=o.parseOnlyJsValue(i);ee(l,Y.PROPS,g)}const f=p("setup",c.props,t);if(p("initInject"),u){const g=o.parseSchema(u,l);g&&ee(l,Y.CONTEXT,g)}if(p("initData"),s){const g=o.parseSchema(s);g&&ee(l,Y.DATA,g)}p("initComputed"),p("initWatch"),p("initProvide");const _=o.parseSchema(fo(d),l);Object.keys(_).length>0&&Object.keys(_).forEach(g=>{if(co(g)){const y=_[g];D(y)&&ht[g](y,c)}}),_o(r.css,r.id);const b=(g,y)=>{const{__locale:T,__messages:H}=e;return gn(g,y,T,H)},S=h.computed(()=>e.__locale);ee(l,Y.CONTEXT,{i18n:b,$t:b}),ee(l,Y.DATA,{currentLocale:S});const{dataSource:v,dataSourceMap:P,reloadDataSource:R,hasInitDataSource:A}=$n((x=r.dataSource)!=null?x:{list:[],dataHandler:void 0},l),j=Object.keys(P).filter(g=>!(g in l)).map(g=>[g,h.ref()]);return ee(l,Y.CONTEXT,{dataSource:v,dataSourceMap:P,reloadDataSource:R}),ee(l,Y.SETUP,yn(j)),n&&ee(l,Y.SETUP,n),p("created"),{scope:l,wrapRender:g=>{const y=[];return et(f)&&y.push(f),A()&&y.push(R()),y.length>0?Promise.all(y).then(()=>g):g}}}function _o(e,t){var n;let r=null;t&&(r=document.querySelector(`style[data-id="${t}"]`)),e?(r||(r=document.createElement("style"),t&&r.setAttribute("data-id",t),(document.head||document.getElementsByTagName("head")[0]).appendChild(r)),r.innerHTML!==e&&(r.innerHTML=e)):r&&((n=r.parentElement)==null||n.removeChild(r))}const yr=(e,t)=>{var o;const r={},n={};return r.default=te(e.children),Object.entries((o=e.props)!=null?o:{}).forEach(([i,s])=>{if(Be(s)){const u=t==null?void 0:t.getProp(i,!1);if(u&&u.slotNode){const d=u.slotNode.schema;nt(d)&&(r[i]=d)}else s.value&&(r[i]={componentName:"Slot",params:s.params,children:te(s.value)})}else i==="className"?n.class=s:i==="children"?r.default=s:n[i]=s}),{props:n,slots:r}},xr=(e,t,r)=>{var n;if(t.startsWith("v-model")){const o=t.match(/v-model(?::(\w+))?$/);if(!o)return e;const i=Ne((n=o[1])!=null?n:"modelValue"),s=`onUpdate:${i}`;if(Ee(r)){const u={type:"JSFunction",value:`function ($event) {${r.value} = $event}`};e[s]=s in e?te(e[s]).concat(u):u}e[i]=r}else if(!(t.startsWith("v-")&&Ee(r)))if(t.match(/^on[A-Z]/)&&tt(r)){const o=t.match(/onUpdate(?::?(\w+))$/);o&&(t=`onUpdate:${Ne(o[1])}`),e[t]=t in e?te(e[t]).concat(r):r}else if(t==="ref"&&"ref"in e){const o=r,i=e.ref;D(i)&&D(o)?e.ref=(...s)=>{o(...s),i(...s)}:e.ref=[i,o].filter(D).pop()}else e[t]=r},Eo=(e,t)=>(...r)=>{const n=e(...r);if(!n.length){const o=t.value,i={"lc-container-locked":o,"lc-container-placeholder":!0},s=o?"锁定元素及子元素无法编辑":"拖拽组件或模板到这里";n.push(h.h("div",{class:i},s))}return n},Sr=Qe("key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),vr=Qe(mt),bo=h.defineComponent((e,{slots:t})=>()=>h.h("div",{class:"lc-page",style:{height:"100%"},...e},t)),go=h.defineComponent({name:"PageRenderer",props:K,__renderer__:!0,setup(e,t){const{scope:r,wrapRender:n}=Ce(e,t),{renderComp:o,componentsRef:i,schemaRef:s}=ve(e,r);return n(()=>o(s.value,null,i.value.Page||bo))}}),yo=h.defineComponent({name:"TempRenderer",props:K,__renderer__:!0,setup(e,t){const{scope:r,wrapRender:n}=Ce(e,t),{triggerCompGetCtx:o}=ge(),{renderComp:i,schemaRef:s}=ve(e,r),u=h.getCurrentInstance();return h.onMounted(()=>{u.proxy&&o(s.value,u.proxy)}),n(()=>i(s.value,null,h.Fragment))}}),xo=h.defineComponent({name:"BlockRenderer",props:K,__renderer__:!0,setup(e,t){const{scope:r,wrapRender:n}=Ce(e,t),{triggerCompGetCtx:o}=ge(),{renderComp:i,schemaRef:s,componentsRef:u}=ve(e,r),d=u.value[s.value.componentName]||h.Fragment,c=h.getCurrentInstance();return Ie(d)&&h.onMounted(()=>{c!=null&&c.proxy&&o(s.value,c.proxy)}),n(()=>i(s.value,null,u.value.Block||h.Fragment))}}),So=h.defineComponent({name:"ComponentRenderer",props:K,__renderer__:!0,setup(e,t){const{scope:r,wrapRender:n}=Ce(e,t),{triggerCompGetCtx:o}=ge(),{renderComp:i,schemaRef:s,componentsRef:u}=ve(e,r),d=u.value[s.value.componentName]||h.Fragment,c=h.getCurrentInstance();return Ie(d)&&h.onMounted(()=>{c!=null&&c.proxy&&o(s.value,c.proxy)}),n(()=>i(s.value,null,d))}}),Cr={TempRenderer:yo,PageRenderer:go,BlockRenderer:xo,ComponentRenderer:So};class vo{constructor(){xe(this,"renderers",{...Cr});xe(this,"configProvider",null)}setConfigProvider(t){this.configProvider=t}getConfigProvider(){return this.configProvider}setRenderers(t){this.renderers=t}getRenderers(){return this.renderers}}const ft=new vo,Tr={scope:Object,schema:{type:Object,required:!0},passProps:Object,components:{type:Object,required:!0},designMode:{type:String,default:"live"},device:String,locale:String,messages:{type:Object,default:()=>({})},getNode:Function,onCompGetCtx:Function,thisRequiredInJSE:{type:Boolean,default:!0},disableCompMock:{type:[Array,Boolean],default:!1}},Co=Qe(e=>!e.match(/^[a-z]+([A-Z][a-z]+)*$/)),To=h.defineComponent({props:Tr,setup(e,{slots:t,expose:r}){const n=new ue({thisRequired:e.thisRequiredInJSE}).initModule(e.schema),o=(f,_)=>{var b;_&&((b=e.onCompGetCtx)==null||b.call(e,f,_))},i=f=>{var _,b;return(b=(_=e.getNode)==null?void 0:_.call(e,f))!=null?b:null},s=h.shallowRef(e.schema);h.watch(()=>e.schema,()=>s.value=e.schema);let u=()=>!0;h.watchEffect(()=>{const f=e.disableCompMock;Ke(f)?u=f?()=>!1:()=>!0:f&&(u=_=>!f.includes(_))});const d=new Map,c=h.reactive({designMode:h.computed(()=>e.designMode),components:h.computed(()=>({...ft.getRenderers(),...e.components})),getNode:f=>{var _,b;return(b=(_=e.getNode)==null?void 0:_.call(e,f))!=null?b:null},triggerCompGetCtx:(f,_)=>{var b;(b=e.onCompGetCtx)==null||b.call(e,f,_)},rerender:jt(()=>{const f=e.schema.id,_=f&&i(f);if(_){const b=st(_);b&&(s.value=b)}h.triggerRef(s)}),wrapLeafComp:(f,_,b)=>{let S=d.get(b);if(S){if(S.has(_))return S.get(_)}else S=new Map,d.set(b,S);if(u(f)){const[v,P,R]=Co(_);R&&(b=Object.create(b,Object.getOwnPropertyDescriptors(v)))}return S.set(_,b),b}});h.provide(sr(),c);const l=h.ref();r({runtimeScope:l});const p=()=>{const{components:f}=c,{scope:_,locale:b,messages:S,designMode:v,thisRequiredInJSE:P,passProps:R}=e,{value:A}=s;if(!A)return null;const{componentName:j}=A;let E=f[j]||f[`${j}Renderer`];return E&&!E.__renderer__&&(E=Cr[`${j}Renderer`]),E?h.h(E,{key:A.__ctx?`${A.__ctx.lceKey}_${A.__ctx.idx||"0"}`:A.id,...R,...n.parseOnlyJsValue(A.props),ref:l,__parser:n,__scope:_,__schema:A,__locale:b,__messages:S,__components:f,__designMode:v,__thisRequiredInJSE:P,__getNode:i,__triggerCompGetCtx:o},t):null};return()=>{const{device:f,locale:_}=e,b=ft.getConfigProvider();return b?h.h(b,{device:f,locale:_},{default:p}):p()}}}),Oo=()=>{ue.cleanCacheModules()};F.LOWCODE_ROUTE_META=br,F.SchemaParser=ue,F.baseRendererPropKeys=Or,F.cleanCacledModules=Oo,F.config=ft,F.default=To,F.leafPropKeys=mt,F.leafProps=Te,F.mergeScope=ut,F.rendererProps=K,F.setupLowCodeRouteGuard=io,F.useLeaf=ct,F.useRenderer=ve,F.useRootScope=Ce,F.vueRendererProps=Tr,Object.defineProperties(F,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
