(function(X,c){typeof exports=="object"&&typeof module!="undefined"?c(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],c):(X=typeof globalThis!="undefined"?globalThis:X||self,c(X.LCVueSimulatorRenderer={},X.Vue))})(this,function(X,c){"use strict";var ru=Object.defineProperty;var ou=(X,c,ae)=>c in X?ru(X,c,{enumerable:!0,configurable:!0,writable:!0,value:ae}):X[c]=ae;var wo=(X,c,ae)=>(ou(X,typeof c!="symbol"?c+"":c,ae),ae);/*!
  * vue-router v4.2.2
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const ae=typeof window!="undefined";function hn(e){return e.__esModule||e[Symbol.toStringTag]==="Module"}const z=Object.assign;function pt(e,t){const n={};for(const r in t){const o=t[r];n[r]=ce(o)?o.map(e):e(o)}return n}const ke=()=>{},ce=Array.isArray,To=/\/$/,Po=e=>e.replace(To,"");function dt(e,t,n="/"){let r,o={},i="",s="";const l=t.indexOf("#");let f=t.indexOf("?");return l<f&&l>=0&&(f=-1),f>-1&&(r=t.slice(0,f),i=t.slice(f+1,l>-1?l:t.length),o=e(i)),l>-1&&(r=r||t.slice(0,l),s=t.slice(l,t.length)),r=Ho(r!=null?r:t,n),{fullPath:r+(i&&"?")+i+s,path:r,query:o,hash:s}}function Oo(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}function fn(e,t){return!t||!e.toLowerCase().startsWith(t.toLowerCase())?e:e.slice(t.length)||"/"}function No(e,t,n){const r=t.matched.length-1,o=n.matched.length-1;return r>-1&&r===o&&Pe(t.matched[r],n.matched[o])&&pn(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function Pe(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function pn(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!Ao(e[n],t[n]))return!1;return!0}function Ao(e,t){return ce(e)?dn(e,t):ce(t)?dn(t,e):e===t}function dn(e,t){return ce(t)?e.length===t.length&&e.every((n,r)=>n===t[r]):e.length===1&&e[0]===t}function Ho(e,t){if(e.startsWith("/"))return e;if(!e)return t;const n=t.split("/"),r=e.split("/"),o=r[r.length-1];(o===".."||o===".")&&r.push("");let i=n.length-1,s,l;for(s=0;s<r.length;s++)if(l=r[s],l!==".")if(l==="..")i>1&&i--;else break;return n.slice(0,i).join("/")+"/"+r.slice(s-(s===r.length?1:0)).join("/")}var Oe;(function(e){e.pop="pop",e.push="push"})(Oe||(Oe={}));var Re;(function(e){e.back="back",e.forward="forward",e.unknown=""})(Re||(Re={}));const mt="";function mn(e){if(!e)if(ae){const t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),Po(e)}const Io=/^[^#]+#/;function gn(e,t){return e.replace(Io,"#")+t}function Bo(e,t){const n=document.documentElement.getBoundingClientRect(),r=e.getBoundingClientRect();return{behavior:t.behavior,left:r.left-n.left-(t.left||0),top:r.top-n.top-(t.top||0)}}const ze=()=>({left:window.pageXOffset,top:window.pageYOffset});function Lo(e){let t;if("el"in e){const n=e.el,r=typeof n=="string"&&n.startsWith("#"),o=typeof n=="string"?r?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!o)return;t=Bo(o,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.pageXOffset,t.top!=null?t.top:window.pageYOffset)}function yn(e,t){return(history.state?history.state.position-t:-1)+e}const gt=new Map;function Mo(e,t){gt.set(e,t)}function Uo(e){const t=gt.get(e);return gt.delete(e),t}let ko=()=>location.protocol+"//"+location.host;function En(e,t){const{pathname:n,search:r,hash:o}=t,i=e.indexOf("#");if(i>-1){let l=o.includes(e.slice(i))?e.slice(i).length:1,f=o.slice(l);return f[0]!=="/"&&(f="/"+f),fn(f,"")}return fn(n,e)+r+o}function Do(e,t,n,r){let o=[],i=[],s=null;const l=({state:u})=>{const m=En(e,location),E=n.value,P=t.value;let b=0;if(u){if(n.value=m,t.value=u,s&&s===E){s=null;return}b=P?u.position-P.position:0}else r(m);o.forEach(w=>{w(n.value,E,{delta:b,type:Oe.pop,direction:b?b>0?Re.forward:Re.back:Re.unknown})})};function f(){s=n.value}function h(u){o.push(u);const m=()=>{const E=o.indexOf(u);E>-1&&o.splice(E,1)};return i.push(m),m}function a(){const{history:u}=window;u.state&&u.replaceState(z({},u.state,{scroll:ze()}),"")}function p(){for(const u of i)u();i=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",a)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",a,{passive:!0}),{pauseListeners:f,listen:h,destroy:p}}function bn(e,t,n,r=!1,o=!1){return{back:e,current:t,forward:n,replaced:r,position:window.history.length,scroll:o?ze():null}}function jo(e){const{history:t,location:n}=window,r={value:En(e,n)},o={value:t.state};o.value||i(r.value,{back:null,current:r.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function i(f,h,a){const p=e.indexOf("#"),u=p>-1?(n.host&&document.querySelector("base")?e:e.slice(p))+f:ko()+e+f;try{t[a?"replaceState":"pushState"](h,"",u),o.value=h}catch(m){console.error(m),n[a?"replace":"assign"](u)}}function s(f,h){const a=z({},t.state,bn(o.value.back,f,o.value.forward,!0),h,{position:o.value.position});i(f,a,!0),r.value=f}function l(f,h){const a=z({},o.value,t.state,{forward:f,scroll:ze()});i(a.current,a,!0);const p=z({},bn(r.value,f,null),{position:a.position+1},h);i(f,p,!1),r.value=f}return{location:r,state:o,push:l,replace:s}}function vn(e){e=mn(e);const t=jo(e),n=Do(e,t.state,t.location,t.replace);function r(i,s=!0){s||n.pauseListeners(),history.go(i)}const o=z({location:"",base:e,go:r,createHref:gn.bind(null,e)},t,n);return Object.defineProperty(o,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(o,"state",{enumerable:!0,get:()=>t.state.value}),o}function _n(e=""){let t=[],n=[mt],r=0;e=mn(e);function o(l){r++,r===n.length||n.splice(r),n.push(l)}function i(l,f,{direction:h,delta:a}){const p={direction:h,delta:a,type:Oe.pop};for(const u of t)u(l,f,p)}const s={location:mt,state:{},base:e,createHref:gn.bind(null,e),replace(l){n.splice(r--,1),o(l)},push(l,f){o(l)},listen(l){return t.push(l),()=>{const f=t.indexOf(l);f>-1&&t.splice(f,1)}},destroy(){t=[],n=[mt],r=0},go(l,f=!0){const h=this.location,a=l<0?Re.back:Re.forward;r=Math.max(0,Math.min(r+l,n.length-1)),f&&i(this.location,h,{direction:a,delta:l})}};return Object.defineProperty(s,"location",{enumerable:!0,get:()=>n[r]}),s}function Go(e){return e=location.host?e||location.pathname+location.search:"",e.includes("#")||(e+="#"),vn(e)}function $o(e){return typeof e=="string"||e&&typeof e=="object"}function xn(e){return typeof e=="string"||typeof e=="symbol"}const ge={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Sn=Symbol("");var yt;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(yt||(yt={}));function Ne(e,t){return z(new Error,{type:e,[Sn]:!0},t)}function pe(e,t){return e instanceof Error&&Sn in e&&(t==null||!!(e.type&t))}const Cn="[^/]+?",Fo={sensitive:!1,strict:!1,start:!0,end:!0},Vo=/[.+*?^${}()[\]/\\]/g;function qo(e,t){const n=z({},Fo,t),r=[];let o=n.start?"^":"";const i=[];for(const h of e){const a=h.length?[]:[90];n.strict&&!h.length&&(o+="/");for(let p=0;p<h.length;p++){const u=h[p];let m=40+(n.sensitive?.25:0);if(u.type===0)p||(o+="/"),o+=u.value.replace(Vo,"\\$&"),m+=40;else if(u.type===1){const{value:E,repeatable:P,optional:b,regexp:w}=u;i.push({name:E,repeatable:P,optional:b});const T=w||Cn;if(T!==Cn){m+=10;try{new RegExp(`(${T})`)}catch(_){throw new Error(`Invalid custom RegExp for param "${E}" (${T}): `+_.message)}}let d=P?`((?:${T})(?:/(?:${T}))*)`:`(${T})`;p||(d=b&&h.length<2?`(?:/${d})`:"/"+d),b&&(d+="?"),o+=d,m+=20,b&&(m+=-8),P&&(m+=-20),T===".*"&&(m+=-50)}a.push(m)}r.push(a)}if(n.strict&&n.end){const h=r.length-1;r[h][r[h].length-1]+=.7000000000000001}n.strict||(o+="/?"),n.end?o+="$":n.strict&&(o+="(?:/|$)");const s=new RegExp(o,n.sensitive?"":"i");function l(h){const a=h.match(s),p={};if(!a)return null;for(let u=1;u<a.length;u++){const m=a[u]||"",E=i[u-1];p[E.name]=m&&E.repeatable?m.split("/"):m}return p}function f(h){let a="",p=!1;for(const u of e){(!p||!a.endsWith("/"))&&(a+="/"),p=!1;for(const m of u)if(m.type===0)a+=m.value;else if(m.type===1){const{value:E,repeatable:P,optional:b}=m,w=E in h?h[E]:"";if(ce(w)&&!P)throw new Error(`Provided param "${E}" is an array but it is not repeatable (* or + modifiers)`);const T=ce(w)?w.join("/"):w;if(!T)if(b)u.length<2&&(a.endsWith("/")?a=a.slice(0,-1):p=!0);else throw new Error(`Missing required param "${E}"`);a+=T}}return a||"/"}return{re:s,score:r,keys:i,parse:l,stringify:f}}function Xo(e,t){let n=0;for(;n<e.length&&n<t.length;){const r=t[n]-e[n];if(r)return r;n++}return e.length<t.length?e.length===1&&e[0]===40+40?-1:1:e.length>t.length?t.length===1&&t[0]===40+40?1:-1:0}function zo(e,t){let n=0;const r=e.score,o=t.score;for(;n<r.length&&n<o.length;){const i=Xo(r[n],o[n]);if(i)return i;n++}if(Math.abs(o.length-r.length)===1){if(Rn(r))return 1;if(Rn(o))return-1}return o.length-r.length}function Rn(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const Wo={type:0,value:""},Jo=/[a-zA-Z0-9_]/;function Zo(e){if(!e)return[[]];if(e==="/")return[[Wo]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(m){throw new Error(`ERR (${n})/"${h}": ${m}`)}let n=0,r=n;const o=[];let i;function s(){i&&o.push(i),i=[]}let l=0,f,h="",a="";function p(){h&&(n===0?i.push({type:0,value:h}):n===1||n===2||n===3?(i.length>1&&(f==="*"||f==="+")&&t(`A repeatable param (${h}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:h,regexp:a,repeatable:f==="*"||f==="+",optional:f==="*"||f==="?"})):t("Invalid state to consume buffer"),h="")}function u(){h+=f}for(;l<e.length;){if(f=e[l++],f==="\\"&&n!==2){r=n,n=4;continue}switch(n){case 0:f==="/"?(h&&p(),s()):f===":"?(p(),n=1):u();break;case 4:u(),n=r;break;case 1:f==="("?n=2:Jo.test(f)?u():(p(),n=0,f!=="*"&&f!=="?"&&f!=="+"&&l--);break;case 2:f===")"?a[a.length-1]=="\\"?a=a.slice(0,-1)+f:n=3:a+=f;break;case 3:p(),n=0,f!=="*"&&f!=="?"&&f!=="+"&&l--,a="";break;default:t("Unknown state");break}}return n===2&&t(`Unfinished custom RegExp for param "${h}"`),p(),s(),o}function Qo(e,t,n){const r=qo(Zo(e.path),n),o=z(r,{record:e,parent:t,children:[],alias:[]});return t&&!o.record.aliasOf==!t.record.aliasOf&&t.children.push(o),o}function wn(e,t){const n=[],r=new Map;t=On({strict:!1,end:!0,sensitive:!1},t);function o(a){return r.get(a)}function i(a,p,u){const m=!u,E=Yo(a);E.aliasOf=u&&u.record;const P=On(t,a),b=[E];if("alias"in a){const d=typeof a.alias=="string"?[a.alias]:a.alias;for(const _ of d)b.push(z({},E,{components:u?u.record.components:E.components,path:_,aliasOf:u?u.record:E}))}let w,T;for(const d of b){const{path:_}=d;if(p&&_[0]!=="/"){const R=p.record.path,v=R[R.length-1]==="/"?"":"/";d.path=p.record.path+(_&&v+_)}if(w=Qo(d,p,P),u?u.alias.push(w):(T=T||w,T!==w&&T.alias.push(w),m&&a.name&&!Pn(w)&&s(a.name)),E.children){const R=E.children;for(let v=0;v<R.length;v++)i(R[v],w,u&&u.children[v])}u=u||w,(w.record.components&&Object.keys(w.record.components).length||w.record.name||w.record.redirect)&&f(w)}return T?()=>{s(T)}:ke}function s(a){if(xn(a)){const p=r.get(a);p&&(r.delete(a),n.splice(n.indexOf(p),1),p.children.forEach(s),p.alias.forEach(s))}else{const p=n.indexOf(a);p>-1&&(n.splice(p,1),a.record.name&&r.delete(a.record.name),a.children.forEach(s),a.alias.forEach(s))}}function l(){return n}function f(a){let p=0;for(;p<n.length&&zo(a,n[p])>=0&&(a.record.path!==n[p].record.path||!Nn(a,n[p]));)p++;n.splice(p,0,a),a.record.name&&!Pn(a)&&r.set(a.record.name,a)}function h(a,p){let u,m={},E,P;if("name"in a&&a.name){if(u=r.get(a.name),!u)throw Ne(1,{location:a});P=u.record.name,m=z(Tn(p.params,u.keys.filter(T=>!T.optional).map(T=>T.name)),a.params&&Tn(a.params,u.keys.map(T=>T.name))),E=u.stringify(m)}else if("path"in a)E=a.path,u=n.find(T=>T.re.test(E)),u&&(m=u.parse(E),P=u.record.name);else{if(u=p.name?r.get(p.name):n.find(T=>T.re.test(p.path)),!u)throw Ne(1,{location:a,currentLocation:p});P=u.record.name,m=z({},p.params,a.params),E=u.stringify(m)}const b=[];let w=u;for(;w;)b.unshift(w.record),w=w.parent;return{name:P,path:E,params:m,matched:b,meta:ei(b)}}return e.forEach(a=>i(a)),{addRoute:i,resolve:h,removeRoute:s,getRoutes:l,getRecordMatcher:o}}function Tn(e,t){const n={};for(const r of t)r in e&&(n[r]=e[r]);return n}function Yo(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:Ko(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}}}function Ko(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const r in e.components)t[r]=typeof n=="boolean"?n:n[r];return t}function Pn(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function ei(e){return e.reduce((t,n)=>z(t,n.meta),{})}function On(e,t){const n={};for(const r in e)n[r]=r in t?t[r]:e[r];return n}function Nn(e,t){return t.children.some(n=>n===e||Nn(e,n))}const An=/#/g,ti=/&/g,ni=/\//g,ri=/=/g,oi=/\?/g,Hn=/\+/g,ii=/%5B/g,si=/%5D/g,In=/%5E/g,ai=/%60/g,Bn=/%7B/g,ui=/%7C/g,Ln=/%7D/g,li=/%20/g;function Et(e){return encodeURI(""+e).replace(ui,"|").replace(ii,"[").replace(si,"]")}function ci(e){return Et(e).replace(Bn,"{").replace(Ln,"}").replace(In,"^")}function bt(e){return Et(e).replace(Hn,"%2B").replace(li,"+").replace(An,"%23").replace(ti,"%26").replace(ai,"`").replace(Bn,"{").replace(Ln,"}").replace(In,"^")}function hi(e){return bt(e).replace(ri,"%3D")}function fi(e){return Et(e).replace(An,"%23").replace(oi,"%3F")}function pi(e){return e==null?"":fi(e).replace(ni,"%2F")}function We(e){try{return decodeURIComponent(""+e)}catch(t){}return""+e}function Mn(e){const t={};if(e===""||e==="?")return t;const r=(e[0]==="?"?e.slice(1):e).split("&");for(let o=0;o<r.length;++o){const i=r[o].replace(Hn," "),s=i.indexOf("="),l=We(s<0?i:i.slice(0,s)),f=s<0?null:We(i.slice(s+1));if(l in t){let h=t[l];ce(h)||(h=t[l]=[h]),h.push(f)}else t[l]=f}return t}function vt(e){let t="";for(let n in e){const r=e[n];if(n=hi(n),r==null){r!==void 0&&(t+=(t.length?"&":"")+n);continue}(ce(r)?r.map(i=>i&&bt(i)):[r&&bt(r)]).forEach(i=>{i!==void 0&&(t+=(t.length?"&":"")+n,i!=null&&(t+="="+i))})}return t}function di(e){const t={};for(const n in e){const r=e[n];r!==void 0&&(t[n]=ce(r)?r.map(o=>o==null?null:""+o):r==null?r:""+r)}return t}const Je=Symbol(""),_t=Symbol(""),De=Symbol(""),Ze=Symbol(""),Qe=Symbol("");function je(){let e=[];function t(r){return e.push(r),()=>{const o=e.indexOf(r);o>-1&&e.splice(o,1)}}function n(){e=[]}return{add:t,list:()=>e,reset:n}}function Un(e,t,n){const r=()=>{e[t].delete(n)};c.onUnmounted(r),c.onDeactivated(r),c.onActivated(()=>{e[t].add(n)}),e[t].add(n)}function mi(e){const t=c.inject(Je,{}).value;t&&Un(t,"leaveGuards",e)}function gi(e){const t=c.inject(Je,{}).value;t&&Un(t,"updateGuards",e)}function xe(e,t,n,r,o){const i=r&&(r.enterCallbacks[o]=r.enterCallbacks[o]||[]);return()=>new Promise((s,l)=>{const f=p=>{p===!1?l(Ne(4,{from:n,to:t})):p instanceof Error?l(p):$o(p)?l(Ne(2,{from:t,to:p})):(i&&r.enterCallbacks[o]===i&&typeof p=="function"&&i.push(p),s())},h=e.call(r&&r.instances[o],t,n,f);let a=Promise.resolve(h);e.length<3&&(a=a.then(f)),a.catch(p=>l(p))})}function xt(e,t,n,r){const o=[];for(const i of e)for(const s in i.components){let l=i.components[s];if(!(t!=="beforeRouteEnter"&&!i.instances[s]))if(yi(l)){const h=(l.__vccOpts||l)[t];h&&o.push(xe(h,n,r,i,s))}else{let f=l();o.push(()=>f.then(h=>{if(!h)return Promise.reject(new Error(`Couldn't resolve component "${s}" at "${i.path}"`));const a=hn(h)?h.default:h;i.components[s]=a;const u=(a.__vccOpts||a)[t];return u&&xe(u,n,r,i,s)()}))}}return o}function yi(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function Ei(e){return e.matched.every(t=>t.redirect)?Promise.reject(new Error("Cannot load a route that redirects.")):Promise.all(e.matched.map(t=>t.components&&Promise.all(Object.keys(t.components).reduce((n,r)=>{const o=t.components[r];return typeof o=="function"&&!("displayName"in o)&&n.push(o().then(i=>{if(!i)return Promise.reject(new Error(`Couldn't resolve component "${r}" at "${t.path}". Ensure you passed a function that returns a promise.`));const s=hn(i)?i.default:i;t.components[r]=s})),n},[])))).then(()=>e)}function St(e){const t=c.inject(De),n=c.inject(Ze),r=c.computed(()=>t.resolve(c.unref(e.to))),o=c.computed(()=>{const{matched:f}=r.value,{length:h}=f,a=f[h-1],p=n.matched;if(!a||!p.length)return-1;const u=p.findIndex(Pe.bind(null,a));if(u>-1)return u;const m=Dn(f[h-2]);return h>1&&Dn(a)===m&&p[p.length-1].path!==m?p.findIndex(Pe.bind(null,f[h-2])):u}),i=c.computed(()=>o.value>-1&&vi(n.params,r.value.params)),s=c.computed(()=>o.value>-1&&o.value===n.matched.length-1&&pn(n.params,r.value.params));function l(f={}){return bi(f)?t[c.unref(e.replace)?"replace":"push"](c.unref(e.to)).catch(ke):Promise.resolve()}return{route:r,href:c.computed(()=>r.value.href),isActive:i,isExactActive:s,navigate:l}}const kn=c.defineComponent({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:St,setup(e,{slots:t}){const n=c.reactive(St(e)),{options:r}=c.inject(De),o=c.computed(()=>({[jn(e.activeClass,r.linkActiveClass,"router-link-active")]:n.isActive,[jn(e.exactActiveClass,r.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive}));return()=>{const i=t.default&&t.default(n);return e.custom?i:c.h("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:o.value},i)}}});function bi(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function vi(e,t){for(const n in t){const r=t[n],o=e[n];if(typeof r=="string"){if(r!==o)return!1}else if(!ce(o)||o.length!==r.length||r.some((i,s)=>i!==o[s]))return!1}return!0}function Dn(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const jn=(e,t,n)=>e!=null?e:t!=null?t:n,_i=c.defineComponent({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){const r=c.inject(Qe),o=c.computed(()=>e.route||r.value),i=c.inject(_t,0),s=c.computed(()=>{let h=c.unref(i);const{matched:a}=o.value;let p;for(;(p=a[h])&&!p.components;)h++;return h}),l=c.computed(()=>o.value.matched[s.value]);c.provide(_t,c.computed(()=>s.value+1)),c.provide(Je,l),c.provide(Qe,o);const f=c.ref();return c.watch(()=>[f.value,l.value,e.name],([h,a,p],[u,m,E])=>{a&&(a.instances[p]=h,m&&m!==a&&h&&h===u&&(a.leaveGuards.size||(a.leaveGuards=m.leaveGuards),a.updateGuards.size||(a.updateGuards=m.updateGuards))),h&&a&&(!m||!Pe(a,m)||!u)&&(a.enterCallbacks[p]||[]).forEach(P=>P(h))},{flush:"post"}),()=>{const h=o.value,a=e.name,p=l.value,u=p&&p.components[a];if(!u)return Gn(n.default,{Component:u,route:h});const m=p.props[a],E=m?m===!0?h.params:typeof m=="function"?m(h):m:null,P=w=>{w.component.isUnmounted&&(p.instances[a]=null)},b=c.h(u,z({},E,t,{onVnodeUnmounted:P,ref:f}));return Gn(n.default,{Component:b,route:h})||b}}});function Gn(e,t){if(!e)return null;const n=e(t);return n.length===1?n[0]:n}const Ct=_i;function $n(e){const t=wn(e.routes,e),n=e.parseQuery||Mn,r=e.stringifyQuery||vt,o=e.history,i=je(),s=je(),l=je(),f=c.shallowRef(ge);let h=ge;ae&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const a=pt.bind(null,y=>""+y),p=pt.bind(null,pi),u=pt.bind(null,We);function m(y,C){let x,N;return xn(y)?(x=t.getRecordMatcher(y),N=C):N=y,t.addRoute(N,x)}function E(y){const C=t.getRecordMatcher(y);C&&t.removeRoute(C)}function P(){return t.getRoutes().map(y=>y.record)}function b(y){return!!t.getRecordMatcher(y)}function w(y,C){if(C=z({},C||f.value),typeof y=="string"){const B=dt(n,y,C.path),ee=t.resolve({path:B.path},C),Xe=o.createHref(B.fullPath);return z(B,ee,{params:u(ee.params),hash:We(B.hash),redirectedFrom:void 0,href:Xe})}let x;if("path"in y)x=z({},y,{path:dt(n,y.path,C.path).path});else{const B=z({},y.params);for(const ee in B)B[ee]==null&&delete B[ee];x=z({},y,{params:p(B)}),C.params=p(C.params)}const N=t.resolve(x,C),k=y.hash||"";N.params=a(u(N.params));const U=Oo(r,z({},y,{hash:ci(k),path:N.path})),I=o.createHref(U);return z({fullPath:U,hash:k,query:r===vt?di(y.query):y.query||{}},N,{redirectedFrom:void 0,href:I})}function T(y){return typeof y=="string"?dt(n,y,f.value.path):z({},y)}function d(y,C){if(h!==y)return Ne(8,{from:C,to:y})}function _(y){return O(y)}function R(y){return _(z(T(y),{replace:!0}))}function v(y){const C=y.matched[y.matched.length-1];if(C&&C.redirect){const{redirect:x}=C;let N=typeof x=="function"?x(y):x;return typeof N=="string"&&(N=N.includes("?")||N.includes("#")?N=T(N):{path:N},N.params={}),z({query:y.query,hash:y.hash,params:"path"in N?{}:y.params},N)}}function O(y,C){const x=h=w(y),N=f.value,k=y.state,U=y.force,I=y.replace===!0,B=v(x);if(B)return O(z(T(B),{state:typeof B=="object"?z({},k,B.state):k,force:U,replace:I}),C||x);const ee=x;ee.redirectedFrom=C;let Xe;return!U&&No(r,N,x)&&(Xe=Ne(16,{to:ee,from:N}),be(N,N,!0,!1)),(Xe?Promise.resolve(Xe):L(ee,N)).catch(oe=>pe(oe)?pe(oe,2)?oe:Ee(oe):Y(oe,ee,N)).then(oe=>{if(oe){if(pe(oe,2))return O(z({replace:I},T(oe.to),{state:typeof oe.to=="object"?z({},k,oe.to.state):k,force:U}),C||ee)}else oe=G(ee,N,!0,I,k);return M(ee,N,oe),oe})}function A(y,C){const x=d(y,C);return x?Promise.reject(x):Promise.resolve()}function H(y){const C=_e.values().next().value;return C&&typeof C.runWithContext=="function"?C.runWithContext(y):y()}function L(y,C){let x;const[N,k,U]=xi(y,C);x=xt(N.reverse(),"beforeRouteLeave",y,C);for(const B of N)B.leaveGuards.forEach(ee=>{x.push(xe(ee,y,C))});const I=A.bind(null,y,C);return x.push(I),S(x).then(()=>{x=[];for(const B of i.list())x.push(xe(B,y,C));return x.push(I),S(x)}).then(()=>{x=xt(k,"beforeRouteUpdate",y,C);for(const B of k)B.updateGuards.forEach(ee=>{x.push(xe(ee,y,C))});return x.push(I),S(x)}).then(()=>{x=[];for(const B of y.matched)if(B.beforeEnter&&!C.matched.includes(B))if(ce(B.beforeEnter))for(const ee of B.beforeEnter)x.push(xe(ee,y,C));else x.push(xe(B.beforeEnter,y,C));return x.push(I),S(x)}).then(()=>(y.matched.forEach(B=>B.enterCallbacks={}),x=xt(U,"beforeRouteEnter",y,C),x.push(I),S(x))).then(()=>{x=[];for(const B of s.list())x.push(xe(B,y,C));return x.push(I),S(x)}).catch(B=>pe(B,8)?B:Promise.reject(B))}function M(y,C,x){for(const N of l.list())H(()=>N(y,C,x))}function G(y,C,x,N,k){const U=d(y,C);if(U)return U;const I=C===ge,B=ae?history.state:{};x&&(N||I?o.replace(y.fullPath,z({scroll:I&&B&&B.scroll},k)):o.push(y.fullPath,k)),f.value=y,be(y,C,x,I),Ee()}let Z;function ie(){Z||(Z=o.listen((y,C,x)=>{if(!g.listening)return;const N=w(y),k=v(N);if(k){O(z(k,{replace:!0}),N).catch(ke);return}h=N;const U=f.value;ae&&Mo(yn(U.fullPath,x.delta),ze()),L(N,U).catch(I=>pe(I,12)?I:pe(I,2)?(O(I.to,N).then(B=>{pe(B,20)&&!x.delta&&x.type===Oe.pop&&o.go(-1,!1)}).catch(ke),Promise.reject()):(x.delta&&o.go(-x.delta,!1),Y(I,N,U))).then(I=>{I=I||G(N,U,!1),I&&(x.delta&&!pe(I,8)?o.go(-x.delta,!1):x.type===Oe.pop&&pe(I,20)&&o.go(-1,!1)),M(N,U,I)}).catch(ke)}))}let he=je(),se=je(),me;function Y(y,C,x){Ee(y);const N=se.list();return N.length?N.forEach(k=>k(y,C,x)):console.error(y),Promise.reject(y)}function fe(){return me&&f.value!==ge?Promise.resolve():new Promise((y,C)=>{he.add([y,C])})}function Ee(y){return me||(me=!y,ie(),he.list().forEach(([C,x])=>y?x(y):C()),he.reset()),y}function be(y,C,x,N){const{scrollBehavior:k}=e;if(!ae||!k)return Promise.resolve();const U=!x&&Uo(yn(y.fullPath,0))||(N||!x)&&history.state&&history.state.scroll||null;return c.nextTick().then(()=>k(y,C,U)).then(I=>I&&Lo(I)).catch(I=>Y(I,y,C))}const ve=y=>o.go(y);let ne;const _e=new Set,g={currentRoute:f,listening:!0,addRoute:m,removeRoute:E,hasRoute:b,getRoutes:P,resolve:w,options:e,push:_,replace:R,go:ve,back:()=>ve(-1),forward:()=>ve(1),beforeEach:i.add,beforeResolve:s.add,afterEach:l.add,onError:se.add,isReady:fe,install(y){const C=this;y.component("RouterLink",kn),y.component("RouterView",Ct),y.config.globalProperties.$router=C,Object.defineProperty(y.config.globalProperties,"$route",{enumerable:!0,get:()=>c.unref(f)}),ae&&!ne&&f.value===ge&&(ne=!0,_(o.location).catch(k=>{}));const x={};for(const k in ge)x[k]=c.computed(()=>f.value[k]);y.provide(De,C),y.provide(Ze,c.reactive(x)),y.provide(Qe,f);const N=y.unmount;_e.add(y),y.unmount=function(){_e.delete(y),_e.size<1&&(h=ge,Z&&Z(),Z=null,f.value=ge,ne=!1,me=!1),N()}}};function S(y){return y.reduce((C,x)=>C.then(()=>H(x)),Promise.resolve())}return g}function xi(e,t){const n=[],r=[],o=[],i=Math.max(t.matched.length,e.matched.length);for(let s=0;s<i;s++){const l=t.matched[s];l&&(e.matched.find(h=>Pe(h,l))?r.push(l):n.push(l));const f=e.matched[s];f&&(t.matched.find(h=>Pe(h,f))||o.push(f))}return[n,r,o]}function Si(){return c.inject(De)}function Ci(){return c.inject(Ze)}const Ri=Object.freeze(Object.defineProperty({__proto__:null,get NavigationFailureType(){return yt},RouterLink:kn,RouterView:Ct,START_LOCATION:ge,createMemoryHistory:_n,createRouter:$n,createRouterMatcher:wn,createWebHashHistory:Go,createWebHistory:vn,isNavigationFailure:pe,loadRouteLocation:Ei,matchedRouteKey:Je,onBeforeRouteLeave:mi,onBeforeRouteUpdate:gi,parseQuery:Mn,routeLocationKey:Ze,routerKey:De,routerViewLocationKey:Qe,stringifyQuery:vt,useLink:St,useRoute:Ci,useRouter:Si,viewDepthKey:_t},Symbol.toStringTag,{value:"Module"}));var Rt=function(e,t){return Rt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(n[o]=r[o])},Rt(e,t)};function Ye(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");Rt(e,t);function n(){this.constructor=e}e.prototype=t===null?Object.create(t):(n.prototype=t.prototype,new n)}var $=function(){return $=Object.assign||function(t){for(var n,r=1,o=arguments.length;r<o;r++){n=arguments[r];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},$.apply(this,arguments)};function wi(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]]);return n}function wt(e,t,n){if(n||arguments.length===2)for(var r=0,o=t.length,i;r<o;r++)(i||!(r in t))&&(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}var D;(function(e){e[e.EXPECT_ARGUMENT_CLOSING_BRACE=1]="EXPECT_ARGUMENT_CLOSING_BRACE",e[e.EMPTY_ARGUMENT=2]="EMPTY_ARGUMENT",e[e.MALFORMED_ARGUMENT=3]="MALFORMED_ARGUMENT",e[e.EXPECT_ARGUMENT_TYPE=4]="EXPECT_ARGUMENT_TYPE",e[e.INVALID_ARGUMENT_TYPE=5]="INVALID_ARGUMENT_TYPE",e[e.EXPECT_ARGUMENT_STYLE=6]="EXPECT_ARGUMENT_STYLE",e[e.INVALID_NUMBER_SKELETON=7]="INVALID_NUMBER_SKELETON",e[e.INVALID_DATE_TIME_SKELETON=8]="INVALID_DATE_TIME_SKELETON",e[e.EXPECT_NUMBER_SKELETON=9]="EXPECT_NUMBER_SKELETON",e[e.EXPECT_DATE_TIME_SKELETON=10]="EXPECT_DATE_TIME_SKELETON",e[e.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE=11]="UNCLOSED_QUOTE_IN_ARGUMENT_STYLE",e[e.EXPECT_SELECT_ARGUMENT_OPTIONS=12]="EXPECT_SELECT_ARGUMENT_OPTIONS",e[e.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE=13]="EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE=14]="INVALID_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR=15]="EXPECT_SELECT_ARGUMENT_SELECTOR",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR=16]="EXPECT_PLURAL_ARGUMENT_SELECTOR",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT=17]="EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT=18]="EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT",e[e.INVALID_PLURAL_ARGUMENT_SELECTOR=19]="INVALID_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_PLURAL_ARGUMENT_SELECTOR=20]="DUPLICATE_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_SELECT_ARGUMENT_SELECTOR=21]="DUPLICATE_SELECT_ARGUMENT_SELECTOR",e[e.MISSING_OTHER_CLAUSE=22]="MISSING_OTHER_CLAUSE",e[e.INVALID_TAG=23]="INVALID_TAG",e[e.INVALID_TAG_NAME=25]="INVALID_TAG_NAME",e[e.UNMATCHED_CLOSING_TAG=26]="UNMATCHED_CLOSING_TAG",e[e.UNCLOSED_TAG=27]="UNCLOSED_TAG"})(D||(D={}));var W;(function(e){e[e.literal=0]="literal",e[e.argument=1]="argument",e[e.number=2]="number",e[e.date=3]="date",e[e.time=4]="time",e[e.select=5]="select",e[e.plural=6]="plural",e[e.pound=7]="pound",e[e.tag=8]="tag"})(W||(W={}));var Ae;(function(e){e[e.number=0]="number",e[e.dateTime=1]="dateTime"})(Ae||(Ae={}));function Fn(e){return e.type===W.literal}function Ti(e){return e.type===W.argument}function Vn(e){return e.type===W.number}function qn(e){return e.type===W.date}function Xn(e){return e.type===W.time}function zn(e){return e.type===W.select}function Wn(e){return e.type===W.plural}function Pi(e){return e.type===W.pound}function Jn(e){return e.type===W.tag}function Zn(e){return!!(e&&typeof e=="object"&&e.type===Ae.number)}function Tt(e){return!!(e&&typeof e=="object"&&e.type===Ae.dateTime)}var Qn=/[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,Oi=/(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;function Ni(e){var t={};return e.replace(Oi,function(n){var r=n.length;switch(n[0]){case"G":t.era=r===4?"long":r===5?"narrow":"short";break;case"y":t.year=r===2?"2-digit":"numeric";break;case"Y":case"u":case"U":case"r":throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");case"q":case"Q":throw new RangeError("`q/Q` (quarter) patterns are not supported");case"M":case"L":t.month=["numeric","2-digit","short","long","narrow"][r-1];break;case"w":case"W":throw new RangeError("`w/W` (week) patterns are not supported");case"d":t.day=["numeric","2-digit"][r-1];break;case"D":case"F":case"g":throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");case"E":t.weekday=r===4?"short":r===5?"narrow":"short";break;case"e":if(r<4)throw new RangeError("`e..eee` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][r-4];break;case"c":if(r<4)throw new RangeError("`c..ccc` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][r-4];break;case"a":t.hour12=!0;break;case"b":case"B":throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");case"h":t.hourCycle="h12",t.hour=["numeric","2-digit"][r-1];break;case"H":t.hourCycle="h23",t.hour=["numeric","2-digit"][r-1];break;case"K":t.hourCycle="h11",t.hour=["numeric","2-digit"][r-1];break;case"k":t.hourCycle="h24",t.hour=["numeric","2-digit"][r-1];break;case"j":case"J":case"C":throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");case"m":t.minute=["numeric","2-digit"][r-1];break;case"s":t.second=["numeric","2-digit"][r-1];break;case"S":case"A":throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");case"z":t.timeZoneName=r<4?"short":"long";break;case"Z":case"O":case"v":case"V":case"X":case"x":throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead")}return""}),t}var Ai=/[\t-\r \x85\u200E\u200F\u2028\u2029]/i;function Hi(e){if(e.length===0)throw new Error("Number skeleton cannot be empty");for(var t=e.split(Ai).filter(function(u){return u.length>0}),n=[],r=0,o=t;r<o.length;r++){var i=o[r],s=i.split("/");if(s.length===0)throw new Error("Invalid number skeleton");for(var l=s[0],f=s.slice(1),h=0,a=f;h<a.length;h++){var p=a[h];if(p.length===0)throw new Error("Invalid number skeleton")}n.push({stem:l,options:f})}return n}function Ii(e){return e.replace(/^(.*?)-/,"")}var Yn=/^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g,Kn=/^(@+)?(\+|#+)?[rs]?$/g,Bi=/(\*)(0+)|(#+)(0+)|(0+)/g,er=/^(0+)$/;function tr(e){var t={};return e[e.length-1]==="r"?t.roundingPriority="morePrecision":e[e.length-1]==="s"&&(t.roundingPriority="lessPrecision"),e.replace(Kn,function(n,r,o){return typeof o!="string"?(t.minimumSignificantDigits=r.length,t.maximumSignificantDigits=r.length):o==="+"?t.minimumSignificantDigits=r.length:r[0]==="#"?t.maximumSignificantDigits=r.length:(t.minimumSignificantDigits=r.length,t.maximumSignificantDigits=r.length+(typeof o=="string"?o.length:0)),""}),t}function nr(e){switch(e){case"sign-auto":return{signDisplay:"auto"};case"sign-accounting":case"()":return{currencySign:"accounting"};case"sign-always":case"+!":return{signDisplay:"always"};case"sign-accounting-always":case"()!":return{signDisplay:"always",currencySign:"accounting"};case"sign-except-zero":case"+?":return{signDisplay:"exceptZero"};case"sign-accounting-except-zero":case"()?":return{signDisplay:"exceptZero",currencySign:"accounting"};case"sign-never":case"+_":return{signDisplay:"never"}}}function Li(e){var t;if(e[0]==="E"&&e[1]==="E"?(t={notation:"engineering"},e=e.slice(2)):e[0]==="E"&&(t={notation:"scientific"},e=e.slice(1)),t){var n=e.slice(0,2);if(n==="+!"?(t.signDisplay="always",e=e.slice(2)):n==="+?"&&(t.signDisplay="exceptZero",e=e.slice(2)),!er.test(e))throw new Error("Malformed concise eng/scientific notation");t.minimumIntegerDigits=e.length}return t}function rr(e){var t={},n=nr(e);return n||t}function Mi(e){for(var t={},n=0,r=e;n<r.length;n++){var o=r[n];switch(o.stem){case"percent":case"%":t.style="percent";continue;case"%x100":t.style="percent",t.scale=100;continue;case"currency":t.style="currency",t.currency=o.options[0];continue;case"group-off":case",_":t.useGrouping=!1;continue;case"precision-integer":case".":t.maximumFractionDigits=0;continue;case"measure-unit":case"unit":t.style="unit",t.unit=Ii(o.options[0]);continue;case"compact-short":case"K":t.notation="compact",t.compactDisplay="short";continue;case"compact-long":case"KK":t.notation="compact",t.compactDisplay="long";continue;case"scientific":t=$($($({},t),{notation:"scientific"}),o.options.reduce(function(f,h){return $($({},f),rr(h))},{}));continue;case"engineering":t=$($($({},t),{notation:"engineering"}),o.options.reduce(function(f,h){return $($({},f),rr(h))},{}));continue;case"notation-simple":t.notation="standard";continue;case"unit-width-narrow":t.currencyDisplay="narrowSymbol",t.unitDisplay="narrow";continue;case"unit-width-short":t.currencyDisplay="code",t.unitDisplay="short";continue;case"unit-width-full-name":t.currencyDisplay="name",t.unitDisplay="long";continue;case"unit-width-iso-code":t.currencyDisplay="symbol";continue;case"scale":t.scale=parseFloat(o.options[0]);continue;case"integer-width":if(o.options.length>1)throw new RangeError("integer-width stems only accept a single optional option");o.options[0].replace(Bi,function(f,h,a,p,u,m){if(h)t.minimumIntegerDigits=a.length;else{if(p&&u)throw new Error("We currently do not support maximum integer digits");if(m)throw new Error("We currently do not support exact integer digits")}return""});continue}if(er.test(o.stem)){t.minimumIntegerDigits=o.stem.length;continue}if(Yn.test(o.stem)){if(o.options.length>1)throw new RangeError("Fraction-precision stems only accept a single optional option");o.stem.replace(Yn,function(f,h,a,p,u,m){return a==="*"?t.minimumFractionDigits=h.length:p&&p[0]==="#"?t.maximumFractionDigits=p.length:u&&m?(t.minimumFractionDigits=u.length,t.maximumFractionDigits=u.length+m.length):(t.minimumFractionDigits=h.length,t.maximumFractionDigits=h.length),""});var i=o.options[0];i==="w"?t=$($({},t),{trailingZeroDisplay:"stripIfInteger"}):i&&(t=$($({},t),tr(i)));continue}if(Kn.test(o.stem)){t=$($({},t),tr(o.stem));continue}var s=nr(o.stem);s&&(t=$($({},t),s));var l=Li(o.stem);l&&(t=$($({},t),l))}return t}var Ke={"001":["H","h"],AC:["H","h","hb","hB"],AD:["H","hB"],AE:["h","hB","hb","H"],AF:["H","hb","hB","h"],AG:["h","hb","H","hB"],AI:["H","h","hb","hB"],AL:["h","H","hB"],AM:["H","hB"],AO:["H","hB"],AR:["H","h","hB","hb"],AS:["h","H"],AT:["H","hB"],AU:["h","hb","H","hB"],AW:["H","hB"],AX:["H"],AZ:["H","hB","h"],BA:["H","hB","h"],BB:["h","hb","H","hB"],BD:["h","hB","H"],BE:["H","hB"],BF:["H","hB"],BG:["H","hB","h"],BH:["h","hB","hb","H"],BJ:["H","hB"],BL:["H","hB"],BM:["h","hb","H","hB"],BN:["hb","hB","h","H"],BO:["H","hB","h","hb"],BQ:["H"],BR:["H","hB"],BS:["h","hb","H","hB"],BT:["h","H"],BW:["H","h","hb","hB"],BZ:["H","h","hb","hB"],CA:["h","hb","H","hB"],CC:["H","h","hb","hB"],CD:["hB","H"],CF:["H","h","hB"],CG:["H","hB"],CH:["H","hB","h"],CI:["H","hB"],CK:["H","h","hb","hB"],CL:["H","h","hB","hb"],CM:["H","h","hB"],CN:["H","hB","hb","h"],CO:["h","H","hB","hb"],CP:["H"],CR:["H","h","hB","hb"],CU:["H","h","hB","hb"],CV:["H","hB"],CX:["H","h","hb","hB"],CY:["h","H","hb","hB"],CZ:["H"],DE:["H","hB"],DG:["H","h","hb","hB"],DJ:["h","H"],DK:["H"],DM:["h","hb","H","hB"],DO:["h","H","hB","hb"],DZ:["h","hB","hb","H"],EA:["H","h","hB","hb"],EC:["H","hB","h","hb"],EE:["H","hB"],EG:["h","hB","hb","H"],EH:["h","hB","hb","H"],ER:["h","H"],ES:["H","hB","h","hb"],ET:["hB","hb","h","H"],FI:["H"],FJ:["h","hb","H","hB"],FK:["H","h","hb","hB"],FM:["h","hb","H","hB"],FR:["H","hB"],GA:["H","hB"],GB:["H","h","hb","hB"],GD:["h","hb","H","hB"],GE:["H","hB","h"],GF:["H","hB"],GG:["H","h","hb","hB"],GH:["h","H"],GI:["H","h","hb","hB"],GM:["h","hb","H","hB"],GN:["H","hB"],GP:["H","hB"],GQ:["H","hB","h","hb"],GR:["h","H","hb","hB"],GT:["H","h","hB","hb"],GU:["h","hb","H","hB"],GW:["H","hB"],GY:["h","hb","H","hB"],HK:["h","hB","hb","H"],HN:["H","h","hB","hb"],HR:["H","hB"],IC:["H","h","hB","hb"],ID:["H"],IE:["H","h","hb","hB"],IL:["H","hB"],IM:["H","h","hb","hB"],IN:["h","H"],IO:["H","h","hb","hB"],IQ:["h","hB","hb","H"],IR:["hB","H"],IS:["H"],IT:["H","hB"],JE:["H","h","hb","hB"],JM:["h","hb","H","hB"],JO:["h","hB","hb","H"],JP:["H","h","K"],KE:["hB","hb","H","h"],KG:["H","h","hB","hb"],KH:["hB","h","H","hb"],KI:["h","hb","H","hB"],KM:["H","h","hB","hb"],KN:["h","hb","H","hB"],KP:["h","H","hB","hb"],KR:["h","H","hB","hb"],KW:["h","hB","hb","H"],KY:["h","hb","H","hB"],KZ:["H","hB"],LA:["H","hb","hB","h"],LB:["h","hB","hb","H"],LC:["h","hb","H","hB"],LI:["H","hB","h"],LK:["H","h","hB","hb"],LR:["h","hb","H","hB"],LS:["h","H"],LT:["H","h","hb","hB"],LU:["H","h","hB"],LV:["H","hB","hb","h"],LY:["h","hB","hb","H"],MA:["H","h","hB","hb"],MC:["H","hB"],MD:["H","hB"],ME:["H","hB","h"],MF:["H","hB"],MH:["h","hb","H","hB"],MK:["H","h","hb","hB"],ML:["H"],MM:["hB","hb","H","h"],MN:["H","h","hb","hB"],MO:["h","hB","hb","H"],MP:["h","hb","H","hB"],MQ:["H","hB"],MR:["h","hB","hb","H"],MS:["H","h","hb","hB"],MW:["h","hb","H","hB"],MX:["H","h","hB","hb"],MY:["hb","hB","h","H"],MZ:["H","hB"],NA:["h","H","hB","hb"],NC:["H","hB"],NE:["H"],NF:["H","h","hb","hB"],NG:["H","h","hb","hB"],NI:["H","h","hB","hb"],NL:["H","hB"],NP:["H","h","hB"],NR:["H","h","hb","hB"],NU:["H","h","hb","hB"],NZ:["h","hb","H","hB"],OM:["h","hB","hb","H"],PA:["h","H","hB","hb"],PE:["H","hB","h","hb"],PF:["H","h","hB"],PG:["h","H"],PH:["h","hB","hb","H"],PK:["h","hB","H"],PM:["H","hB"],PN:["H","h","hb","hB"],PR:["h","H","hB","hb"],PS:["h","hB","hb","H"],PT:["H","hB"],PW:["h","H"],PY:["H","h","hB","hb"],QA:["h","hB","hb","H"],RE:["H","hB"],RO:["H","hB"],RS:["H","hB","h"],RU:["H"],SA:["h","hB","hb","H"],SB:["h","hb","H","hB"],SC:["H","h","hB"],SD:["h","hB","hb","H"],SE:["H"],SG:["h","hb","H","hB"],SH:["H","h","hb","hB"],SI:["H","hB"],SJ:["H"],SK:["H"],SL:["h","hb","H","hB"],SM:["H","h","hB"],SN:["H","h","hB"],SO:["h","H"],SR:["H","hB"],SS:["h","hb","H","hB"],ST:["H","hB"],SV:["H","h","hB","hb"],SX:["H","h","hb","hB"],SY:["h","hB","hb","H"],SZ:["h","hb","H","hB"],TA:["H","h","hb","hB"],TC:["h","hb","H","hB"],TD:["h","H","hB"],TF:["H","h","hB"],TG:["H","hB"],TL:["H","hB","hb","h"],TN:["h","hB","hb","H"],TO:["h","H"],TR:["H","hB"],TT:["h","hb","H","hB"],TW:["hB","hb","h","H"],TZ:["hB","hb","H","h"],UA:["H","hB","h"],UG:["hB","hb","H","h"],UM:["h","hb","H","hB"],US:["h","hb","H","hB"],UY:["H","h","hB","hb"],UZ:["H","hB","h"],VA:["H","h","hB"],VC:["h","hb","H","hB"],VE:["h","H","hB","hb"],VG:["h","hb","H","hB"],VI:["h","hb","H","hB"],VU:["h","H"],WF:["H","hB"],WS:["h","H"],XK:["H","hB","h"],YE:["h","hB","hb","H"],YT:["H","hB"],ZA:["H","h","hb","hB"],ZM:["h","hb","H","hB"],"af-ZA":["H","h","hB","hb"],"ar-001":["h","hB","hb","H"],"ca-ES":["H","h","hB"],"en-001":["h","hb","H","hB"],"es-BO":["H","h","hB","hb"],"es-BR":["H","h","hB","hb"],"es-EC":["H","h","hB","hb"],"es-ES":["H","h","hB","hb"],"es-GQ":["H","h","hB","hb"],"es-PE":["H","h","hB","hb"],"fr-CA":["H","h","hB"],"gl-ES":["H","h","hB"],"gu-IN":["hB","hb","h","H"],"hi-IN":["hB","h","H"],"it-CH":["H","h","hB"],"it-IT":["H","h","hB"],"kn-IN":["hB","h","H"],"ml-IN":["hB","h","H"],"mr-IN":["hB","hb","h","H"],"pa-IN":["hB","hb","h","H"],"ta-IN":["hB","h","hb","H"],"te-IN":["hB","h","H"],"zu-ZA":["H","hB","hb","h"]};function Ui(e,t){for(var n="",r=0;r<e.length;r++){var o=e.charAt(r);if(o==="j"){for(var i=0;r+1<e.length&&e.charAt(r+1)===o;)i++,r++;var s=1+(i&1),l=i<2?1:3+(i>>1),f="a",h=ki(t);for((h=="H"||h=="k")&&(l=0);l-- >0;)n+=f;for(;s-- >0;)n=h+n}else o==="J"?n+="H":n+=o}return n}function ki(e){var t=e.hourCycle;if(t===void 0&&e.hourCycles&&e.hourCycles.length&&(t=e.hourCycles[0]),t)switch(t){case"h24":return"k";case"h23":return"H";case"h12":return"h";case"h11":return"K";default:throw new Error("Invalid hourCycle")}var n=e.language,r;n!=="root"&&(r=e.maximize().region);var o=Ke[r||""]||Ke[n||""]||Ke["".concat(n,"-001")]||Ke["001"];return o[0]}var Pt,Di=new RegExp("^".concat(Qn.source,"*")),ji=new RegExp("".concat(Qn.source,"*$"));function j(e,t){return{start:e,end:t}}var Gi=!!String.prototype.startsWith,$i=!!String.fromCodePoint,Fi=!!Object.fromEntries,Vi=!!String.prototype.codePointAt,qi=!!String.prototype.trimStart,Xi=!!String.prototype.trimEnd,zi=!!Number.isSafeInteger,Wi=zi?Number.isSafeInteger:function(e){return typeof e=="number"&&isFinite(e)&&Math.floor(e)===e&&Math.abs(e)<=9007199254740991},Ot=!0;try{var Ji=ar("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");Ot=((Pt=Ji.exec("a"))===null||Pt===void 0?void 0:Pt[0])==="a"}catch(e){Ot=!1}var or=Gi?function(t,n,r){return t.startsWith(n,r)}:function(t,n,r){return t.slice(r,r+n.length)===n},Nt=$i?String.fromCodePoint:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r="",o=t.length,i=0,s;o>i;){if(s=t[i++],s>1114111)throw RangeError(s+" is not a valid code point");r+=s<65536?String.fromCharCode(s):String.fromCharCode(((s-=65536)>>10)+55296,s%1024+56320)}return r},ir=Fi?Object.fromEntries:function(t){for(var n={},r=0,o=t;r<o.length;r++){var i=o[r],s=i[0],l=i[1];n[s]=l}return n},sr=Vi?function(t,n){return t.codePointAt(n)}:function(t,n){var r=t.length;if(!(n<0||n>=r)){var o=t.charCodeAt(n),i;return o<55296||o>56319||n+1===r||(i=t.charCodeAt(n+1))<56320||i>57343?o:(o-55296<<10)+(i-56320)+65536}},Zi=qi?function(t){return t.trimStart()}:function(t){return t.replace(Di,"")},Qi=Xi?function(t){return t.trimEnd()}:function(t){return t.replace(ji,"")};function ar(e,t){return new RegExp(e,t)}var At;if(Ot){var ur=ar("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");At=function(t,n){var r;ur.lastIndex=n;var o=ur.exec(t);return(r=o[1])!==null&&r!==void 0?r:""}}else At=function(t,n){for(var r=[];;){var o=sr(t,n);if(o===void 0||lr(o)||ts(o))break;r.push(o),n+=o>=65536?2:1}return Nt.apply(void 0,r)};var Yi=function(){function e(t,n){n===void 0&&(n={}),this.message=t,this.position={offset:0,line:1,column:1},this.ignoreTag=!!n.ignoreTag,this.locale=n.locale,this.requiresOtherClause=!!n.requiresOtherClause,this.shouldParseSkeletons=!!n.shouldParseSkeletons}return e.prototype.parse=function(){if(this.offset()!==0)throw Error("parser can only be used once");return this.parseMessage(0,"",!1)},e.prototype.parseMessage=function(t,n,r){for(var o=[];!this.isEOF();){var i=this.char();if(i===123){var s=this.parseArgument(t,r);if(s.err)return s;o.push(s.val)}else{if(i===125&&t>0)break;if(i===35&&(n==="plural"||n==="selectordinal")){var l=this.clonePosition();this.bump(),o.push({type:W.pound,location:j(l,this.clonePosition())})}else if(i===60&&!this.ignoreTag&&this.peek()===47){if(r)break;return this.error(D.UNMATCHED_CLOSING_TAG,j(this.clonePosition(),this.clonePosition()))}else if(i===60&&!this.ignoreTag&&Ht(this.peek()||0)){var s=this.parseTag(t,n);if(s.err)return s;o.push(s.val)}else{var s=this.parseLiteral(t,n);if(s.err)return s;o.push(s.val)}}}return{val:o,err:null}},e.prototype.parseTag=function(t,n){var r=this.clonePosition();this.bump();var o=this.parseTagName();if(this.bumpSpace(),this.bumpIf("/>"))return{val:{type:W.literal,value:"<".concat(o,"/>"),location:j(r,this.clonePosition())},err:null};if(this.bumpIf(">")){var i=this.parseMessage(t+1,n,!0);if(i.err)return i;var s=i.val,l=this.clonePosition();if(this.bumpIf("</")){if(this.isEOF()||!Ht(this.char()))return this.error(D.INVALID_TAG,j(l,this.clonePosition()));var f=this.clonePosition(),h=this.parseTagName();return o!==h?this.error(D.UNMATCHED_CLOSING_TAG,j(f,this.clonePosition())):(this.bumpSpace(),this.bumpIf(">")?{val:{type:W.tag,value:o,children:s,location:j(r,this.clonePosition())},err:null}:this.error(D.INVALID_TAG,j(l,this.clonePosition())))}else return this.error(D.UNCLOSED_TAG,j(r,this.clonePosition()))}else return this.error(D.INVALID_TAG,j(r,this.clonePosition()))},e.prototype.parseTagName=function(){var t=this.offset();for(this.bump();!this.isEOF()&&es(this.char());)this.bump();return this.message.slice(t,this.offset())},e.prototype.parseLiteral=function(t,n){for(var r=this.clonePosition(),o="";;){var i=this.tryParseQuote(n);if(i){o+=i;continue}var s=this.tryParseUnquoted(t,n);if(s){o+=s;continue}var l=this.tryParseLeftAngleBracket();if(l){o+=l;continue}break}var f=j(r,this.clonePosition());return{val:{type:W.literal,value:o,location:f},err:null}},e.prototype.tryParseLeftAngleBracket=function(){return!this.isEOF()&&this.char()===60&&(this.ignoreTag||!Ki(this.peek()||0))?(this.bump(),"<"):null},e.prototype.tryParseQuote=function(t){if(this.isEOF()||this.char()!==39)return null;switch(this.peek()){case 39:return this.bump(),this.bump(),"'";case 123:case 60:case 62:case 125:break;case 35:if(t==="plural"||t==="selectordinal")break;return null;default:return null}this.bump();var n=[this.char()];for(this.bump();!this.isEOF();){var r=this.char();if(r===39)if(this.peek()===39)n.push(39),this.bump();else{this.bump();break}else n.push(r);this.bump()}return Nt.apply(void 0,n)},e.prototype.tryParseUnquoted=function(t,n){if(this.isEOF())return null;var r=this.char();return r===60||r===123||r===35&&(n==="plural"||n==="selectordinal")||r===125&&t>0?null:(this.bump(),Nt(r))},e.prototype.parseArgument=function(t,n){var r=this.clonePosition();if(this.bump(),this.bumpSpace(),this.isEOF())return this.error(D.EXPECT_ARGUMENT_CLOSING_BRACE,j(r,this.clonePosition()));if(this.char()===125)return this.bump(),this.error(D.EMPTY_ARGUMENT,j(r,this.clonePosition()));var o=this.parseIdentifierIfPossible().value;if(!o)return this.error(D.MALFORMED_ARGUMENT,j(r,this.clonePosition()));if(this.bumpSpace(),this.isEOF())return this.error(D.EXPECT_ARGUMENT_CLOSING_BRACE,j(r,this.clonePosition()));switch(this.char()){case 125:return this.bump(),{val:{type:W.argument,value:o,location:j(r,this.clonePosition())},err:null};case 44:return this.bump(),this.bumpSpace(),this.isEOF()?this.error(D.EXPECT_ARGUMENT_CLOSING_BRACE,j(r,this.clonePosition())):this.parseArgumentOptions(t,n,o,r);default:return this.error(D.MALFORMED_ARGUMENT,j(r,this.clonePosition()))}},e.prototype.parseIdentifierIfPossible=function(){var t=this.clonePosition(),n=this.offset(),r=At(this.message,n),o=n+r.length;this.bumpTo(o);var i=this.clonePosition(),s=j(t,i);return{value:r,location:s}},e.prototype.parseArgumentOptions=function(t,n,r,o){var i,s=this.clonePosition(),l=this.parseIdentifierIfPossible().value,f=this.clonePosition();switch(l){case"":return this.error(D.EXPECT_ARGUMENT_TYPE,j(s,f));case"number":case"date":case"time":{this.bumpSpace();var h=null;if(this.bumpIf(",")){this.bumpSpace();var a=this.clonePosition(),p=this.parseSimpleArgStyleIfPossible();if(p.err)return p;var u=Qi(p.val);if(u.length===0)return this.error(D.EXPECT_ARGUMENT_STYLE,j(this.clonePosition(),this.clonePosition()));var m=j(a,this.clonePosition());h={style:u,styleLocation:m}}var E=this.tryParseArgumentClose(o);if(E.err)return E;var P=j(o,this.clonePosition());if(h&&or(h==null?void 0:h.style,"::",0)){var b=Zi(h.style.slice(2));if(l==="number"){var p=this.parseNumberSkeletonFromString(b,h.styleLocation);return p.err?p:{val:{type:W.number,value:r,location:P,style:p.val},err:null}}else{if(b.length===0)return this.error(D.EXPECT_DATE_TIME_SKELETON,P);var w=b;this.locale&&(w=Ui(b,this.locale));var u={type:Ae.dateTime,pattern:w,location:h.styleLocation,parsedOptions:this.shouldParseSkeletons?Ni(w):{}},T=l==="date"?W.date:W.time;return{val:{type:T,value:r,location:P,style:u},err:null}}}return{val:{type:l==="number"?W.number:l==="date"?W.date:W.time,value:r,location:P,style:(i=h==null?void 0:h.style)!==null&&i!==void 0?i:null},err:null}}case"plural":case"selectordinal":case"select":{var d=this.clonePosition();if(this.bumpSpace(),!this.bumpIf(","))return this.error(D.EXPECT_SELECT_ARGUMENT_OPTIONS,j(d,$({},d)));this.bumpSpace();var _=this.parseIdentifierIfPossible(),R=0;if(l!=="select"&&_.value==="offset"){if(!this.bumpIf(":"))return this.error(D.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,j(this.clonePosition(),this.clonePosition()));this.bumpSpace();var p=this.tryParseDecimalInteger(D.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,D.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);if(p.err)return p;this.bumpSpace(),_=this.parseIdentifierIfPossible(),R=p.val}var v=this.tryParsePluralOrSelectOptions(t,l,n,_);if(v.err)return v;var E=this.tryParseArgumentClose(o);if(E.err)return E;var O=j(o,this.clonePosition());return l==="select"?{val:{type:W.select,value:r,options:ir(v.val),location:O},err:null}:{val:{type:W.plural,value:r,options:ir(v.val),offset:R,pluralType:l==="plural"?"cardinal":"ordinal",location:O},err:null}}default:return this.error(D.INVALID_ARGUMENT_TYPE,j(s,f))}},e.prototype.tryParseArgumentClose=function(t){return this.isEOF()||this.char()!==125?this.error(D.EXPECT_ARGUMENT_CLOSING_BRACE,j(t,this.clonePosition())):(this.bump(),{val:!0,err:null})},e.prototype.parseSimpleArgStyleIfPossible=function(){for(var t=0,n=this.clonePosition();!this.isEOF();){var r=this.char();switch(r){case 39:{this.bump();var o=this.clonePosition();if(!this.bumpUntil("'"))return this.error(D.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,j(o,this.clonePosition()));this.bump();break}case 123:{t+=1,this.bump();break}case 125:{if(t>0)t-=1;else return{val:this.message.slice(n.offset,this.offset()),err:null};break}default:this.bump();break}}return{val:this.message.slice(n.offset,this.offset()),err:null}},e.prototype.parseNumberSkeletonFromString=function(t,n){var r=[];try{r=Hi(t)}catch(o){return this.error(D.INVALID_NUMBER_SKELETON,n)}return{val:{type:Ae.number,tokens:r,location:n,parsedOptions:this.shouldParseSkeletons?Mi(r):{}},err:null}},e.prototype.tryParsePluralOrSelectOptions=function(t,n,r,o){for(var i,s=!1,l=[],f=new Set,h=o.value,a=o.location;;){if(h.length===0){var p=this.clonePosition();if(n!=="select"&&this.bumpIf("=")){var u=this.tryParseDecimalInteger(D.EXPECT_PLURAL_ARGUMENT_SELECTOR,D.INVALID_PLURAL_ARGUMENT_SELECTOR);if(u.err)return u;a=j(p,this.clonePosition()),h=this.message.slice(p.offset,this.offset())}else break}if(f.has(h))return this.error(n==="select"?D.DUPLICATE_SELECT_ARGUMENT_SELECTOR:D.DUPLICATE_PLURAL_ARGUMENT_SELECTOR,a);h==="other"&&(s=!0),this.bumpSpace();var m=this.clonePosition();if(!this.bumpIf("{"))return this.error(n==="select"?D.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT:D.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,j(this.clonePosition(),this.clonePosition()));var E=this.parseMessage(t+1,n,r);if(E.err)return E;var P=this.tryParseArgumentClose(m);if(P.err)return P;l.push([h,{value:E.val,location:j(m,this.clonePosition())}]),f.add(h),this.bumpSpace(),i=this.parseIdentifierIfPossible(),h=i.value,a=i.location}return l.length===0?this.error(n==="select"?D.EXPECT_SELECT_ARGUMENT_SELECTOR:D.EXPECT_PLURAL_ARGUMENT_SELECTOR,j(this.clonePosition(),this.clonePosition())):this.requiresOtherClause&&!s?this.error(D.MISSING_OTHER_CLAUSE,j(this.clonePosition(),this.clonePosition())):{val:l,err:null}},e.prototype.tryParseDecimalInteger=function(t,n){var r=1,o=this.clonePosition();this.bumpIf("+")||this.bumpIf("-")&&(r=-1);for(var i=!1,s=0;!this.isEOF();){var l=this.char();if(l>=48&&l<=57)i=!0,s=s*10+(l-48),this.bump();else break}var f=j(o,this.clonePosition());return i?(s*=r,Wi(s)?{val:s,err:null}:this.error(n,f)):this.error(t,f)},e.prototype.offset=function(){return this.position.offset},e.prototype.isEOF=function(){return this.offset()===this.message.length},e.prototype.clonePosition=function(){return{offset:this.position.offset,line:this.position.line,column:this.position.column}},e.prototype.char=function(){var t=this.position.offset;if(t>=this.message.length)throw Error("out of bound");var n=sr(this.message,t);if(n===void 0)throw Error("Offset ".concat(t," is at invalid UTF-16 code unit boundary"));return n},e.prototype.error=function(t,n){return{val:null,err:{kind:t,message:this.message,location:n}}},e.prototype.bump=function(){if(!this.isEOF()){var t=this.char();t===10?(this.position.line+=1,this.position.column=1,this.position.offset+=1):(this.position.column+=1,this.position.offset+=t<65536?1:2)}},e.prototype.bumpIf=function(t){if(or(this.message,t,this.offset())){for(var n=0;n<t.length;n++)this.bump();return!0}return!1},e.prototype.bumpUntil=function(t){var n=this.offset(),r=this.message.indexOf(t,n);return r>=0?(this.bumpTo(r),!0):(this.bumpTo(this.message.length),!1)},e.prototype.bumpTo=function(t){if(this.offset()>t)throw Error("targetOffset ".concat(t," must be greater than or equal to the current offset ").concat(this.offset()));for(t=Math.min(t,this.message.length);;){var n=this.offset();if(n===t)break;if(n>t)throw Error("targetOffset ".concat(t," is at invalid UTF-16 code unit boundary"));if(this.bump(),this.isEOF())break}},e.prototype.bumpSpace=function(){for(;!this.isEOF()&&lr(this.char());)this.bump()},e.prototype.peek=function(){if(this.isEOF())return null;var t=this.char(),n=this.offset(),r=this.message.charCodeAt(n+(t>=65536?2:1));return r!=null?r:null},e}();function Ht(e){return e>=97&&e<=122||e>=65&&e<=90}function Ki(e){return Ht(e)||e===47}function es(e){return e===45||e===46||e>=48&&e<=57||e===95||e>=97&&e<=122||e>=65&&e<=90||e==183||e>=192&&e<=214||e>=216&&e<=246||e>=248&&e<=893||e>=895&&e<=8191||e>=8204&&e<=8205||e>=8255&&e<=8256||e>=8304&&e<=8591||e>=11264&&e<=12271||e>=12289&&e<=55295||e>=63744&&e<=64975||e>=65008&&e<=65533||e>=65536&&e<=983039}function lr(e){return e>=9&&e<=13||e===32||e===133||e>=8206&&e<=8207||e===8232||e===8233}function ts(e){return e>=33&&e<=35||e===36||e>=37&&e<=39||e===40||e===41||e===42||e===43||e===44||e===45||e>=46&&e<=47||e>=58&&e<=59||e>=60&&e<=62||e>=63&&e<=64||e===91||e===92||e===93||e===94||e===96||e===123||e===124||e===125||e===126||e===161||e>=162&&e<=165||e===166||e===167||e===169||e===171||e===172||e===174||e===176||e===177||e===182||e===187||e===191||e===215||e===247||e>=8208&&e<=8213||e>=8214&&e<=8215||e===8216||e===8217||e===8218||e>=8219&&e<=8220||e===8221||e===8222||e===8223||e>=8224&&e<=8231||e>=8240&&e<=8248||e===8249||e===8250||e>=8251&&e<=8254||e>=8257&&e<=8259||e===8260||e===8261||e===8262||e>=8263&&e<=8273||e===8274||e===8275||e>=8277&&e<=8286||e>=8592&&e<=8596||e>=8597&&e<=8601||e>=8602&&e<=8603||e>=8604&&e<=8607||e===8608||e>=8609&&e<=8610||e===8611||e>=8612&&e<=8613||e===8614||e>=8615&&e<=8621||e===8622||e>=8623&&e<=8653||e>=8654&&e<=8655||e>=8656&&e<=8657||e===8658||e===8659||e===8660||e>=8661&&e<=8691||e>=8692&&e<=8959||e>=8960&&e<=8967||e===8968||e===8969||e===8970||e===8971||e>=8972&&e<=8991||e>=8992&&e<=8993||e>=8994&&e<=9e3||e===9001||e===9002||e>=9003&&e<=9083||e===9084||e>=9085&&e<=9114||e>=9115&&e<=9139||e>=9140&&e<=9179||e>=9180&&e<=9185||e>=9186&&e<=9254||e>=9255&&e<=9279||e>=9280&&e<=9290||e>=9291&&e<=9311||e>=9472&&e<=9654||e===9655||e>=9656&&e<=9664||e===9665||e>=9666&&e<=9719||e>=9720&&e<=9727||e>=9728&&e<=9838||e===9839||e>=9840&&e<=10087||e===10088||e===10089||e===10090||e===10091||e===10092||e===10093||e===10094||e===10095||e===10096||e===10097||e===10098||e===10099||e===10100||e===10101||e>=10132&&e<=10175||e>=10176&&e<=10180||e===10181||e===10182||e>=10183&&e<=10213||e===10214||e===10215||e===10216||e===10217||e===10218||e===10219||e===10220||e===10221||e===10222||e===10223||e>=10224&&e<=10239||e>=10240&&e<=10495||e>=10496&&e<=10626||e===10627||e===10628||e===10629||e===10630||e===10631||e===10632||e===10633||e===10634||e===10635||e===10636||e===10637||e===10638||e===10639||e===10640||e===10641||e===10642||e===10643||e===10644||e===10645||e===10646||e===10647||e===10648||e>=10649&&e<=10711||e===10712||e===10713||e===10714||e===10715||e>=10716&&e<=10747||e===10748||e===10749||e>=10750&&e<=11007||e>=11008&&e<=11055||e>=11056&&e<=11076||e>=11077&&e<=11078||e>=11079&&e<=11084||e>=11085&&e<=11123||e>=11124&&e<=11125||e>=11126&&e<=11157||e===11158||e>=11159&&e<=11263||e>=11776&&e<=11777||e===11778||e===11779||e===11780||e===11781||e>=11782&&e<=11784||e===11785||e===11786||e===11787||e===11788||e===11789||e>=11790&&e<=11798||e===11799||e>=11800&&e<=11801||e===11802||e===11803||e===11804||e===11805||e>=11806&&e<=11807||e===11808||e===11809||e===11810||e===11811||e===11812||e===11813||e===11814||e===11815||e===11816||e===11817||e>=11818&&e<=11822||e===11823||e>=11824&&e<=11833||e>=11834&&e<=11835||e>=11836&&e<=11839||e===11840||e===11841||e===11842||e>=11843&&e<=11855||e>=11856&&e<=11857||e===11858||e>=11859&&e<=11903||e>=12289&&e<=12291||e===12296||e===12297||e===12298||e===12299||e===12300||e===12301||e===12302||e===12303||e===12304||e===12305||e>=12306&&e<=12307||e===12308||e===12309||e===12310||e===12311||e===12312||e===12313||e===12314||e===12315||e===12316||e===12317||e>=12318&&e<=12319||e===12320||e===12336||e===64830||e===64831||e>=65093&&e<=65094}function It(e){e.forEach(function(t){if(delete t.location,zn(t)||Wn(t))for(var n in t.options)delete t.options[n].location,It(t.options[n].value);else Vn(t)&&Zn(t.style)||(qn(t)||Xn(t))&&Tt(t.style)?delete t.style.location:Jn(t)&&It(t.children)})}function ns(e,t){t===void 0&&(t={}),t=$({shouldParseSkeletons:!0,requiresOtherClause:!0},t);var n=new Yi(e,t).parse();if(n.err){var r=SyntaxError(D[n.err.kind]);throw r.location=n.err.location,r.originalMessage=n.err.message,r}return t!=null&&t.captureLocation||It(n.val),n.val}function Bt(e,t){var n=t&&t.cache?t.cache:us,r=t&&t.serializer?t.serializer:as,o=t&&t.strategy?t.strategy:os;return o(e,{cache:n,serializer:r})}function rs(e){return e==null||typeof e=="number"||typeof e=="boolean"}function cr(e,t,n,r){var o=rs(r)?r:n(r),i=t.get(o);return typeof i=="undefined"&&(i=e.call(this,r),t.set(o,i)),i}function hr(e,t,n){var r=Array.prototype.slice.call(arguments,3),o=n(r),i=t.get(o);return typeof i=="undefined"&&(i=e.apply(this,r),t.set(o,i)),i}function Lt(e,t,n,r,o){return n.bind(t,e,r,o)}function os(e,t){var n=e.length===1?cr:hr;return Lt(e,this,n,t.cache.create(),t.serializer)}function is(e,t){return Lt(e,this,hr,t.cache.create(),t.serializer)}function ss(e,t){return Lt(e,this,cr,t.cache.create(),t.serializer)}var as=function(){return JSON.stringify(arguments)};function Mt(){this.cache=Object.create(null)}Mt.prototype.get=function(e){return this.cache[e]},Mt.prototype.set=function(e,t){this.cache[e]=t};var us={create:function(){return new Mt}},Ut={variadic:is,monadic:ss},He;(function(e){e.MISSING_VALUE="MISSING_VALUE",e.INVALID_VALUE="INVALID_VALUE",e.MISSING_INTL_API="MISSING_INTL_API"})(He||(He={}));var et=function(e){Ye(t,e);function t(n,r,o){var i=e.call(this,n)||this;return i.code=r,i.originalMessage=o,i}return t.prototype.toString=function(){return"[formatjs Error: ".concat(this.code,"] ").concat(this.message)},t}(Error),fr=function(e){Ye(t,e);function t(n,r,o,i){return e.call(this,'Invalid values for "'.concat(n,'": "').concat(r,'". Options are "').concat(Object.keys(o).join('", "'),'"'),He.INVALID_VALUE,i)||this}return t}(et),ls=function(e){Ye(t,e);function t(n,r,o){return e.call(this,'Value for "'.concat(n,'" must be of type ').concat(r),He.INVALID_VALUE,o)||this}return t}(et),cs=function(e){Ye(t,e);function t(n,r){return e.call(this,'The intl string context variable "'.concat(n,'" was not provided to the string "').concat(r,'"'),He.MISSING_VALUE,r)||this}return t}(et),te;(function(e){e[e.literal=0]="literal",e[e.object=1]="object"})(te||(te={}));function hs(e){return e.length<2?e:e.reduce(function(t,n){var r=t[t.length-1];return!r||r.type!==te.literal||n.type!==te.literal?t.push(n):r.value+=n.value,t},[])}function fs(e){return typeof e=="function"}function tt(e,t,n,r,o,i,s){if(e.length===1&&Fn(e[0]))return[{type:te.literal,value:e[0].value}];for(var l=[],f=0,h=e;f<h.length;f++){var a=h[f];if(Fn(a)){l.push({type:te.literal,value:a.value});continue}if(Pi(a)){typeof i=="number"&&l.push({type:te.literal,value:n.getNumberFormat(t).format(i)});continue}var p=a.value;if(!(o&&p in o))throw new cs(p,s);var u=o[p];if(Ti(a)){(!u||typeof u=="string"||typeof u=="number")&&(u=typeof u=="string"||typeof u=="number"?String(u):""),l.push({type:typeof u=="string"?te.literal:te.object,value:u});continue}if(qn(a)){var m=typeof a.style=="string"?r.date[a.style]:Tt(a.style)?a.style.parsedOptions:void 0;l.push({type:te.literal,value:n.getDateTimeFormat(t,m).format(u)});continue}if(Xn(a)){var m=typeof a.style=="string"?r.time[a.style]:Tt(a.style)?a.style.parsedOptions:r.time.medium;l.push({type:te.literal,value:n.getDateTimeFormat(t,m).format(u)});continue}if(Vn(a)){var m=typeof a.style=="string"?r.number[a.style]:Zn(a.style)?a.style.parsedOptions:void 0;m&&m.scale&&(u=u*(m.scale||1)),l.push({type:te.literal,value:n.getNumberFormat(t,m).format(u)});continue}if(Jn(a)){var E=a.children,P=a.value,b=o[P];if(!fs(b))throw new ls(P,"function",s);var w=tt(E,t,n,r,o,i),T=b(w.map(function(R){return R.value}));Array.isArray(T)||(T=[T]),l.push.apply(l,T.map(function(R){return{type:typeof R=="string"?te.literal:te.object,value:R}}))}if(zn(a)){var d=a.options[u]||a.options.other;if(!d)throw new fr(a.value,u,Object.keys(a.options),s);l.push.apply(l,tt(d.value,t,n,r,o));continue}if(Wn(a)){var d=a.options["=".concat(u)];if(!d){if(!Intl.PluralRules)throw new et(`Intl.PluralRules is not available in this environment.
Try polyfilling it using "@formatjs/intl-pluralrules"
`,He.MISSING_INTL_API,s);var _=n.getPluralRules(t,{type:a.pluralType}).select(u-(a.offset||0));d=a.options[_]||a.options.other}if(!d)throw new fr(a.value,u,Object.keys(a.options),s);l.push.apply(l,tt(d.value,t,n,r,o,u-(a.offset||0)));continue}}return hs(l)}function ps(e,t){return t?$($($({},e||{}),t||{}),Object.keys(e).reduce(function(n,r){return n[r]=$($({},e[r]),t[r]||{}),n},{})):e}function ds(e,t){return t?Object.keys(e).reduce(function(n,r){return n[r]=ps(e[r],t[r]),n},$({},e)):e}function kt(e){return{create:function(){return{get:function(t){return e[t]},set:function(t,n){e[t]=n}}}}}function ms(e){return e===void 0&&(e={number:{},dateTime:{},pluralRules:{}}),{getNumberFormat:Bt(function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return new((t=Intl.NumberFormat).bind.apply(t,wt([void 0],n,!1)))},{cache:kt(e.number),strategy:Ut.variadic}),getDateTimeFormat:Bt(function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return new((t=Intl.DateTimeFormat).bind.apply(t,wt([void 0],n,!1)))},{cache:kt(e.dateTime),strategy:Ut.variadic}),getPluralRules:Bt(function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return new((t=Intl.PluralRules).bind.apply(t,wt([void 0],n,!1)))},{cache:kt(e.pluralRules),strategy:Ut.variadic})}}var gs=function(){function e(t,n,r,o){n===void 0&&(n=e.defaultLocale);var i=this;if(this.formatterCache={number:{},dateTime:{},pluralRules:{}},this.format=function(f){var h=i.formatToParts(f);if(h.length===1)return h[0].value;var a=h.reduce(function(p,u){return!p.length||u.type!==te.literal||typeof p[p.length-1]!="string"?p.push(u.value):p[p.length-1]+=u.value,p},[]);return a.length<=1?a[0]||"":a},this.formatToParts=function(f){return tt(i.ast,i.locales,i.formatters,i.formats,f,void 0,i.message)},this.resolvedOptions=function(){var f;return{locale:((f=i.resolvedLocale)===null||f===void 0?void 0:f.toString())||Intl.NumberFormat.supportedLocalesOf(i.locales)[0]}},this.getAst=function(){return i.ast},this.locales=n,this.resolvedLocale=e.resolveLocale(n),typeof t=="string"){if(this.message=t,!e.__parse)throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");var s=o||{};s.formatters;var l=wi(s,["formatters"]);this.ast=e.__parse(t,$($({},l),{locale:this.resolvedLocale}))}else this.ast=t;if(!Array.isArray(this.ast))throw new TypeError("A message must be provided as a String or AST.");this.formats=ds(e.formats,r),this.formatters=o&&o.formatters||ms(this.formatterCache)}return Object.defineProperty(e,"defaultLocale",{get:function(){return e.memoizedDefaultLocale||(e.memoizedDefaultLocale=new Intl.NumberFormat().resolvedOptions().locale),e.memoizedDefaultLocale},enumerable:!1,configurable:!0}),e.memoizedDefaultLocale=null,e.resolveLocale=function(t){if(typeof Intl.Locale!="undefined"){var n=Intl.NumberFormat.supportedLocalesOf(t);return n.length>0?new Intl.Locale(n[0]):new Intl.Locale(typeof t=="string"?t:t[0])}},e.__parse=ns,e.formats={number:{integer:{maximumFractionDigits:0},currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},e}(),ys=Object.defineProperty,Es=(e,t,n)=>t in e?ys(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,nt=(e,t,n)=>(Es(e,typeof t!="symbol"?t+"":t,n),n);const pr=()=>{};function bs(e){const t={};for(const n of e)J(n)&&n.length>=2&&(t[n[0]]=n[1]);return t}function dr(e,t){let n=null;return t?function(){n&&clearTimeout(n),n=setTimeout(()=>{n=null,e.apply(this)},t)}:function(){n||(n=setTimeout(()=>{n=null,e.apply(this)}))}}const Dt=e=>Object.prototype.toString.call(e);function vs(e){return new Promise(t=>setTimeout(t,e))}const jt=e=>{const t=new Set(Se(e)?e.split(","):J(e)?e:[]),n=V(e)?e:r=>t.has(r);return r=>{const o=Object.keys(r);if(o.every(f=>!n(f)))return[{},r,0];let i=0;const s={},l={};for(const f of o)n(f)?(s[f]=r[f],i++):l[f]=r[f];return[s,l,i]}};function de(e){return e==null}function mr(e){return e===void 0}function Se(e){return typeof e=="string"}function F(e){return!de(e)&&typeof e=="object"}function Gt(e){return typeof e=="boolean"}function J(e){return Array.isArray(e)}function V(e){return typeof e=="function"}function $t(e){return F(e)&&V(e.then)&&V(e.catch)}function Ie(e){return!de(e)&&Dt(e)==="[object Object]"}function gr(e){return e&&(Reflect.get(e,"__esModule")||Reflect.get(e,Symbol.toStringTag)==="Module")}function _s(e){return/\.css$/.test(e)}function xs(e){return F(e)&&e.nodeType===Node.ELEMENT_NODE}function rt(e){return e?F(e)&&(e.type==="JSFunction"||e.extType==="function"):!1}function ot(e){return F(e)&&e.type==="JSSlot"}function Be(e){return F(e)&&e.type==="JSExpression"&&e.extType!=="function"}function Ft(e){return F(e)&&e.type==="i18n"}function Ss(e){return!!(V(e)||F(e)&&("render"in e||"setup"in e||"template"in e))}function it(e){return e&&e.componentName}function Vt(e){return it(e)&&e.componentName==="Slot"}function Cs(e){return F(e)&&e.componentName==="Component"}function Rs(e){return it(e)&&(e.componentName==="Block"||e.componentName==="Page"||e.componentName==="Component")}function qt(e){return typeof e!="string"?e:window[e]||ws(e)}function ws(e){if(/^[a-z-]+$/.test(e))return c.defineComponent((t,{attrs:n,slots:r})=>()=>c.h(e,n,r))}function yr(e,t){const n=t.length;if(n<1||!e)return e;let r=0,o;for(;r<n;){const i=t[r];let s;try{o=e[i]}catch(l){s=l,o=null}if(r===0&&o==null&&i==="default"){if(s)return n===1?e:null;o=e}else if(o==null)return null;e=o,r++}return o}function Ts(e,t,n){if(!n)return qt(t);const r=n.exportName||n.componentName||t,o=e[n.package]||r,i=qt(o),s=n.exportName&&n.subName?n.subName.split("."):[];return n.destructuring?s.unshift(r):gr(i)&&s.unshift("default"),yr(i,s)}function Ps(e,t,n){const r={};return Object.keys(t).forEach(o=>{let i=t[o];Cs(i)?n&&(r[o]=n(i)):Ss(i)?r[o]=i:(i=Ts(e,o,i),i&&(r[o]=i))}),r}function Er(e,t){return t.filter(n=>n&&n.name).reduce((n,r)=>{const{name:o,content:i,type:s}=r;if(s==="npm"){const{package:l,exportName:f,destructuring:h}=i!=null?i:{};if(e[l]){const a=qt(e[l]);a&&(n[o]=h&&f?a[f]:a)}}else s==="function"&&(n[o]=rt(i)?new Function(`return ${i.value}`)():r.content);return n},{})}var K;(function(e){e[e.Environment=1]="Environment",e[e.Library=2]="Library",e[e.Theme=3]="Theme",e[e.Runtime=4]="Runtime",e[e.Components=5]="Components",e[e.App=6]="App"})(K||(K={}));var Os=[K.Environment,K.Library,K.Theme,K.Runtime,K.Components,K.App],ye;(function(e){e.JSUrl="jsUrl",e.CSSUrl="cssUrl",e.CSSText="cssText",e.JSText="jsText",e.Bundle="bundle"})(ye||(ye={}));function br(){const e={},t=new Promise((n,r)=>{e.resolve=n,e.reject=r});return e.promise=()=>t,e}function Ns(e){const t=document.createElement("script");t.text=e,document.head.appendChild(t),document.head.removeChild(t)}function As(e){const t=document.createElement("script");t.onload=r,t.onerror=r;const n=br();function r(o){t.onload=null,t.onerror=null,o.type==="load"?n.resolve():n.reject()}return t.src=e,t.async=!1,document.head.appendChild(t),n.promise()}function Hs(e){return e&&e.type}function Is(e){return e&&e.type===ye.Bundle}function Bs(e,t,n,r){return t?{type:e,content:t,level:n,id:r}:null}function vr(e,t,n,r){for(const o of n)Xt(e,t,o,r)}function Xt(e,t,n,r){if(!n)return;if(J(n))return vr(e,t,n,r);if(Is(n)){if(n.assets){J(n.assets)?vr(e,t,n.assets,n.level||r):Xt(e,t,n.assets,n.level||r);return}return}Hs(n)||(n=Bs(_s(n)?ye.CSSUrl:ye.JSUrl,n,r));let o=n.level||r;(!o||K[o]==null)&&(o=K.App),n.level=o,n.type===ye.CSSUrl||n.type==ye.CSSText?t[o].push(n):e[o].push(n)}class _r{constructor(t,n){nt(this,"lastContent"),nt(this,"lastUrl"),nt(this,"placeholder"),this.level=t,this.id=n;let r=null;if(n&&(r=document.head.querySelector(`style[data-id="${n}"]`)),!r){r=document.createTextNode("");const o=document.head.querySelector(`meta[level="${t}"]`);o?document.head.insertBefore(r,o):document.head.appendChild(r)}this.placeholder=r}applyText(t){if(this.lastContent===t)return;this.lastContent=t,this.lastUrl=void 0;const n=document.createElement("style");n.setAttribute("type","text/css"),this.id&&n.setAttribute("data-id",this.id),n.appendChild(document.createTextNode(t)),document.head.insertBefore(n,this.placeholder.parentNode===document.head?this.placeholder.nextSibling:null),document.head.removeChild(this.placeholder),this.placeholder=n}applyUrl(t){if(this.lastUrl===t)return;this.lastContent=void 0,this.lastUrl=t;const n=document.createElement("link");n.onload=o,n.onerror=o;const r=br();function o(i){n.onload=null,n.onerror=null,i.type==="load"?r.resolve():r.reject()}return n.href=t,n.rel="stylesheet",this.id&&n.setAttribute("data-id",this.id),document.head.insertBefore(n,this.placeholder.parentNode===document.head?this.placeholder.nextSibling:null),document.head.removeChild(this.placeholder),this.placeholder=n,r.promise()}}let Ls=class{constructor(){nt(this,"stylePoints",new Map)}async load(t){const n={},r={};Os.forEach(s=>{n[s]=[],r[s]=[]}),Xt(r,n,t);const o=n[K.Environment].concat(n[K.Library],n[K.Theme],n[K.Runtime],n[K.App]),i=r[K.Environment].concat(r[K.Library],r[K.Theme],r[K.Runtime],r[K.App]);await Promise.all(o.map(({content:s,level:l,type:f,id:h})=>this.loadStyle(s,l,f===ye.CSSUrl,h))),await Promise.all(i.map(({content:s,type:l})=>this.loadScript(s,l===ye.JSUrl)))}loadStyle(t,n,r,o){if(!t)return;let i;return o?(i=this.stylePoints.get(o),i||(i=new _r(n,o),this.stylePoints.set(o,i))):i=new _r(n),r?i.applyUrl(t):i.applyText(t)}loadScript(t,n){if(t)return n?As(t):Ns(t)}async loadAsyncLibrary(t){const n=[],r=[];for(const o in t)t[o].async&&(n.push(window[t[o].library]),r.push(t[o].library));await Promise.all(n).then(o=>{o.length>0&&o.map((i,s)=>(window[r[s]]=i,i))})}};function st(e){return e&&e.replace(/-[a-zA-Z]/g,t=>t.charAt(1).toLocaleUpperCase())}var xr;(function(e){e.Initial="init",e.Loading="loading",e.Loaded="loaded",e.Error="error"})(xr||(xr={}));var Sr;(function(e){e.ADDED="added",e.DELETED="deleted",e.MODIFIED="modified",e.COMPOSITE="composite"})(Sr||(Sr={}));var Cr;(function(e){e.Children="Children",e.Prop="Prop"})(Cr||(Cr={}));var Rr;(function(e){e.Children="Children",e.Prop="Prop"})(Rr||(Rr={}));var wr;(function(e){e[e.REPAINT=0]="REPAINT"})(wr||(wr={}));var Tr;(function(e){e[e.REPAINT=0]="REPAINT"})(Tr||(Tr={}));var zt;(function(e){e.Render="render",e.Serilize="serilize",e.Save="save",e.Clone="clone",e.Init="init",e.Upgrade="upgrade"})(zt||(zt={}));var Pr;(function(e){e.Render="render",e.Serilize="serilize",e.Save="save",e.Clone="clone",e.Init="init",e.Upgrade="upgrade"})(Pr||(Pr={}));var Or;(function(e){e.Node="node",e.NodeData="nodedata"})(Or||(Or={}));var Nr;(function(e){e.Node="node",e.NodeData="nodedata"})(Nr||(Nr={}));var Ar;(function(e){e.SET_VALUE="SET_VALUE",e.SUB_VALUE_CHANGE="SUB_VALUE_CHANGE"})(Ar||(Ar={}));var Hr;(function(e){e.SET_VALUE="SET_VALUE",e.SUB_VALUE_CHANGE="SUB_VALUE_CHANGE"})(Hr||(Hr={}));var Ir={},Ms={get exports(){return Ir},set exports(e){Ir=e}},q={};/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var Wt,Br;function Us(){if(Br)return Wt;Br=1;var e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function r(i){if(i==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(i)}function o(){try{if(!Object.assign)return!1;var i=new String("abc");if(i[5]="de",Object.getOwnPropertyNames(i)[0]==="5")return!1;for(var s={},l=0;l<10;l++)s["_"+String.fromCharCode(l)]=l;var f=Object.getOwnPropertyNames(s).map(function(a){return s[a]});if(f.join("")!=="0123456789")return!1;var h={};return"abcdefghijklmnopqrst".split("").forEach(function(a){h[a]=a}),Object.keys(Object.assign({},h)).join("")==="abcdefghijklmnopqrst"}catch(a){return!1}}return Wt=o()?Object.assign:function(i,s){for(var l,f=r(i),h,a=1;a<arguments.length;a++){l=Object(arguments[a]);for(var p in l)t.call(l,p)&&(f[p]=l[p]);if(e){h=e(l);for(var u=0;u<h.length;u++)n.call(l,h[u])&&(f[h[u]]=l[h[u]])}}return f},Wt}/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Lr;function ks(){if(Lr)return q;Lr=1;var e=Us(),t=typeof Symbol=="function"&&Symbol.for,n=t?Symbol.for("react.element"):60103,r=t?Symbol.for("react.portal"):60106,o=t?Symbol.for("react.fragment"):60107,i=t?Symbol.for("react.strict_mode"):60108,s=t?Symbol.for("react.profiler"):60114,l=t?Symbol.for("react.provider"):60109,f=t?Symbol.for("react.context"):60110,h=t?Symbol.for("react.forward_ref"):60112,a=t?Symbol.for("react.suspense"):60113,p=t?Symbol.for("react.memo"):60115,u=t?Symbol.for("react.lazy"):60116,m=typeof Symbol=="function"&&Symbol.iterator;function E(g){for(var S="https://reactjs.org/docs/error-decoder.html?invariant="+g,y=1;y<arguments.length;y++)S+="&args[]="+encodeURIComponent(arguments[y]);return"Minified React error #"+g+"; visit "+S+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var P={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(g,S,y){this.props=g,this.context=S,this.refs=b,this.updater=y||P}w.prototype.isReactComponent={},w.prototype.setState=function(g,S){if(typeof g!="object"&&typeof g!="function"&&g!=null)throw Error(E(85));this.updater.enqueueSetState(this,g,S,"setState")},w.prototype.forceUpdate=function(g){this.updater.enqueueForceUpdate(this,g,"forceUpdate")};function T(){}T.prototype=w.prototype;function d(g,S,y){this.props=g,this.context=S,this.refs=b,this.updater=y||P}var _=d.prototype=new T;_.constructor=d,e(_,w.prototype),_.isPureReactComponent=!0;var R={current:null},v=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function A(g,S,y){var C,x={},N=null,k=null;if(S!=null)for(C in S.ref!==void 0&&(k=S.ref),S.key!==void 0&&(N=""+S.key),S)v.call(S,C)&&!O.hasOwnProperty(C)&&(x[C]=S[C]);var U=arguments.length-2;if(U===1)x.children=y;else if(1<U){for(var I=Array(U),B=0;B<U;B++)I[B]=arguments[B+2];x.children=I}if(g&&g.defaultProps)for(C in U=g.defaultProps,U)x[C]===void 0&&(x[C]=U[C]);return{$$typeof:n,type:g,key:N,ref:k,props:x,_owner:R.current}}function H(g,S){return{$$typeof:n,type:g.type,key:S,ref:g.ref,props:g.props,_owner:g._owner}}function L(g){return typeof g=="object"&&g!==null&&g.$$typeof===n}function M(g){var S={"=":"=0",":":"=2"};return"$"+(""+g).replace(/[=:]/g,function(y){return S[y]})}var G=/\/+/g,Z=[];function ie(g,S,y,C){if(Z.length){var x=Z.pop();return x.result=g,x.keyPrefix=S,x.func=y,x.context=C,x.count=0,x}return{result:g,keyPrefix:S,func:y,context:C,count:0}}function he(g){g.result=null,g.keyPrefix=null,g.func=null,g.context=null,g.count=0,10>Z.length&&Z.push(g)}function se(g,S,y,C){var x=typeof g;(x==="undefined"||x==="boolean")&&(g=null);var N=!1;if(g===null)N=!0;else switch(x){case"string":case"number":N=!0;break;case"object":switch(g.$$typeof){case n:case r:N=!0}}if(N)return y(C,g,S===""?"."+Y(g,0):S),1;if(N=0,S=S===""?".":S+":",Array.isArray(g))for(var k=0;k<g.length;k++){x=g[k];var U=S+Y(x,k);N+=se(x,U,y,C)}else if(g===null||typeof g!="object"?U=null:(U=m&&g[m]||g["@@iterator"],U=typeof U=="function"?U:null),typeof U=="function")for(g=U.call(g),k=0;!(x=g.next()).done;)x=x.value,U=S+Y(x,k++),N+=se(x,U,y,C);else if(x==="object")throw y=""+g,Error(E(31,y==="[object Object]"?"object with keys {"+Object.keys(g).join(", ")+"}":y,""));return N}function me(g,S,y){return g==null?0:se(g,"",S,y)}function Y(g,S){return typeof g=="object"&&g!==null&&g.key!=null?M(g.key):S.toString(36)}function fe(g,S){g.func.call(g.context,S,g.count++)}function Ee(g,S,y){var C=g.result,x=g.keyPrefix;g=g.func.call(g.context,S,g.count++),Array.isArray(g)?be(g,C,y,function(N){return N}):g!=null&&(L(g)&&(g=H(g,x+(!g.key||S&&S.key===g.key?"":(""+g.key).replace(G,"$&/")+"/")+y)),C.push(g))}function be(g,S,y,C,x){var N="";y!=null&&(N=(""+y).replace(G,"$&/")+"/"),S=ie(S,N,C,x),me(g,Ee,S),he(S)}var ve={current:null};function ne(){var g=ve.current;if(g===null)throw Error(E(321));return g}var _e={ReactCurrentDispatcher:ve,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:R,IsSomeRendererActing:{current:!1},assign:e};return q.Children={map:function(g,S,y){if(g==null)return g;var C=[];return be(g,C,null,S,y),C},forEach:function(g,S,y){if(g==null)return g;S=ie(null,null,S,y),me(g,fe,S),he(S)},count:function(g){return me(g,function(){return null},null)},toArray:function(g){var S=[];return be(g,S,null,function(y){return y}),S},only:function(g){if(!L(g))throw Error(E(143));return g}},q.Component=w,q.Fragment=o,q.Profiler=s,q.PureComponent=d,q.StrictMode=i,q.Suspense=a,q.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=_e,q.cloneElement=function(g,S,y){if(g==null)throw Error(E(267,g));var C=e({},g.props),x=g.key,N=g.ref,k=g._owner;if(S!=null){if(S.ref!==void 0&&(N=S.ref,k=R.current),S.key!==void 0&&(x=""+S.key),g.type&&g.type.defaultProps)var U=g.type.defaultProps;for(I in S)v.call(S,I)&&!O.hasOwnProperty(I)&&(C[I]=S[I]===void 0&&U!==void 0?U[I]:S[I])}var I=arguments.length-2;if(I===1)C.children=y;else if(1<I){U=Array(I);for(var B=0;B<I;B++)U[B]=arguments[B+2];C.children=U}return{$$typeof:n,type:g.type,key:x,ref:N,props:C,_owner:k}},q.createContext=function(g,S){return S===void 0&&(S=null),g={$$typeof:f,_calculateChangedBits:S,_currentValue:g,_currentValue2:g,_threadCount:0,Provider:null,Consumer:null},g.Provider={$$typeof:l,_context:g},g.Consumer=g},q.createElement=A,q.createFactory=function(g){var S=A.bind(null,g);return S.type=g,S},q.createRef=function(){return{current:null}},q.forwardRef=function(g){return{$$typeof:h,render:g}},q.isValidElement=L,q.lazy=function(g){return{$$typeof:u,_ctor:g,_status:-1,_result:null}},q.memo=function(g,S){return{$$typeof:p,type:g,compare:S===void 0?null:S}},q.useCallback=function(g,S){return ne().useCallback(g,S)},q.useContext=function(g,S){return ne().useContext(g,S)},q.useDebugValue=function(){},q.useEffect=function(g,S){return ne().useEffect(g,S)},q.useImperativeHandle=function(g,S,y){return ne().useImperativeHandle(g,S,y)},q.useLayoutEffect=function(g,S){return ne().useLayoutEffect(g,S)},q.useMemo=function(g,S){return ne().useMemo(g,S)},q.useReducer=function(g,S,y){return ne().useReducer(g,S,y)},q.useRef=function(g){return ne().useRef(g)},q.useState=function(g){return ne().useState(g)},q.version="16.14.0",q}(function(e){e.exports=ks()})(Ms);function at(e){return F(e)&&V(e.export)?e.export(zt.Render):null}function Ds(){let e=window.__currentNode;return e||(e=Symbol("__currentNode"),window.__currentNode=e),e}function Mr(){let e=window.__rendererContext;return e||(e=Symbol("__rendererContext"),window.__rendererContext=e),e}function Le(){const e=Mr();return c.inject(e,()=>{var t,n;const r=(n=(t=c.getCurrentInstance())==null?void 0:t.props)!=null?n:{};return{rerender:()=>{},thisRequiredInJSE:!0,components:ut(r,"components",{}),designMode:ut(r,"designMode","live"),getNode:ut(r,"getNode",()=>null),wrapLeafComp:(o,i,s)=>s,triggerCompGetCtx:ut(r,"triggerCompGetCtx",()=>{})}},!0)}function ut(e,t,n){return e[t]||e[`__${t}`]||n}var js=Object.defineProperty,Gs=(e,t,n)=>t in e?js(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,Ge=(e,t,n)=>(Gs(e,typeof t!="symbol"?t+"":t,n),n);const Me={__scope:{type:Object,default:void 0},__schema:{type:Object,required:!0},__designMode:{type:String,default:"live"},__components:{type:Object,required:!0},__locale:{type:String,default:void 0},__messages:{type:Object,default:()=>({})},__getNode:{type:Function,required:!0},__triggerCompGetCtx:{type:Function,required:!0},__thisRequiredInJSE:{type:Boolean,default:!0},__props:{type:Object,default:()=>({})},__parser:{type:Object,required:!0}},$s=Object.keys(Me),lt={__comp:{type:Object,required:!0},__scope:{type:Object,default:()=>({})},__schema:{type:Object,default:()=>({})},__vnodeProps:{type:Object,default:()=>({})},__isRootNode:Boolean},Ur=Object.keys(lt);function Fs(e,t={},n="zh-CN",r={}){return!r||!r[n]||!r[n][e]?"":new gs(r[n][e],n).format(t)}function Ue(e){console.warn("[vue-renderer]: "+e)}const kr={};function Vs(e){!kr[e]&&(kr[e]=!0)&&Ue(e)}var re=(e=>(e[e.OTHER=0]="OTHER",e[e.SETUP=1]="SETUP",e[e.DATA=2]="DATA",e[e.PROPS=3]="PROPS",e[e.CONTEXT=4]="CONTEXT",e))(re||{});function Dr(e,t){switch(t){case 1:return e.$.setupState.__lcSetup?e.$.setupState:e.$.setupState=c.proxyRefs(Object.create(null,{__lcSetup:{get:()=>!0,enumerable:!1,configurable:!1}}));case 2:return c.isReactive(e.$.data)?e.$.data:e.$.data=c.reactive({});case 3:return e.$.props;default:return e.$.ctx}}function ue(e,t,n,r){const o=e.$,i=Dr(e,t);if(r){const s=Object.getOwnPropertyDescriptors(n);for(const l in s){if(l in i){Ue("重复定义 key: "+l);continue}Object.defineProperty(i,l,s[l]),o.accessCache[l]=t}}else for(const s in n){if(s in i){Ue("重复定义 key: "+s);continue}i[s]=Reflect.get(n,s),o.accessCache[s]=t}if(t===3&&Object.keys(n).length>0){const{propsOptions:[s,l]}=o,f={},h=[];for(const a in n){if(s[a])continue;const p=Reflect.get(n,a);Gt(p)?(f[a]={0:!0,1:!0,type:Boolean,default:p},h.push(a)):mr(p)?f[a]={0:!1,1:!1,type:null}:(f[a]={0:!0,1:!1,type:null,default:p},h.push(a))}Object.keys(f).length>0&&(o.propsOptions=[{...s,...f},[...l,...h]])}}function Jt(e){return"$"in e}function qs(e){return!e||!F(e)?!1:!!(Jt(e)||Object.keys(e).length>0)}function Zt(...e){const t=[];if(e.flat().forEach(o=>{qs(o)&&t.push(o)}),t.length<=1)return t[0];const[n,...r]=t;return r.reduce((o,i)=>{if(Jt(i)){if(Jt(o))return i;{const l=o;o=i,i=l}}const s=Object.getOwnPropertyDescriptors(i);return o=Object.create(o,s),c.isProxy(i)?c.reactive(o):o},n)}function le(e){return e?J(e)?e:[e]:[]}const Xs={JSEXPRESSION:"JSExpression",JSFUNCTION:"JSFunction",JSSLOT:"JSSlot",JSBLOCK:"JSBlock",I18N:"i18n"},jr=class{constructor(e){Ge(this,"createFunction"),Ge(this,"exports",{}),this.createFunction=e&&!e.thisRequired?t=>new Function("__exports__","__scope__",`with(__exports__) { with(__scope__) { ${t} } }`):t=>new Function("__exports__",`with(__exports__) { ${t} }`)}static cleanCacheModules(){this.cacheModules={}}initModule(e){var t;const n=(t=e.lifeCycles)==null?void 0:t.initModule,r=n&&this.parseSchema(n,!1);return this.exports=V(r)?r(jr.cacheModules,window):{},this}parseSlotScope(e,t){const n={};return le(t).forEach((r,o)=>{n[r]=e[o]}),n}parseI18n(e,t){return this.parseExpression({type:Xs.JSEXPRESSION,value:`this.$t(${JSON.stringify(e.key)})`},t)}parseSchema(e,t){if(Be(e)||rt(e))return this.parseExpression(e,t);if(Ft(e))return this.parseI18n(e,t);if(Se(e))return e.trim();if(J(e))return e.map(n=>this.parseSchema(n,t));if(V(e))return e.bind(t);if(Ie(e)){if(!e)return e;const n={};return Object.keys(e).forEach(r=>{r.startsWith("__")||(n[r]=this.parseSchema(e[r],t))}),n}return e}parseOnlyJsValue(e){if(!(Be(e)||Be(e)||Ft(e))){{if(J(e))return e.map(t=>this.parseOnlyJsValue(t));if(Ie(e)){const t={};return Object.keys(e).forEach(n=>{n.startsWith("__")||(t[n]=this.parseOnlyJsValue(e[n]))}),t}}return e}}parseExpression(e,t){try{const n=['"use strict";',"var __self = arguments[1];"];n.push("return ");let r;return r=(e.value||"").trim(),t!==!1&&!r.match(/^\([^)]*\)\s*=>/)&&(r=r.replace(/this(\W|$)/g,(o,i)=>`__self${i}`)),r=n.join(`
`)+r,this.createFunction(r)(this.exports,t||{})}catch(n){console.warn("parseExpression.error",n,e,self);return}}};let Ce=jr;Ge(Ce,"cacheModules",{});const Gr=Symbol("hocNode"),zs=e=>{const{rerender:t}=Le(),n=c.inject(Gr,null),r=dr(e);return c.provide(Gr,{rerenderSlots:r}),n?{rerender:r,rerenderRoot:t,rerenderParent:n.rerenderSlots}:{rerender:r,rerenderRoot:t,rerenderParent:t}},Ws=c.defineComponent({name:"Hoc",inheritAttrs:!1,props:lt,setup(e,{slots:t,attrs:n}){const r=c.shallowRef(!0),o=c.shallowRef(e.__schema),i=c.shallowRef(),s=b=>{o.value=b,i.value=eo(b,u).slots},{rerender:l,rerenderRoot:f,rerenderParent:h}=zs(()=>{const b=u?at(u):null;b&&s(b)}),a={};c.onUnmounted(()=>Object.keys(a).forEach(b=>{a[b](),delete a[b]}));const{locked:p,node:u,buildSlots:m,getNode:E,isRootNode:P}=en(e,(b,w)=>{const T=b.id;if(T){if(w&&a[T])a[T](),delete a[T];else if(!w&&!a[T]){const d=E(T);d&&(a[T]=d.onVisibleChange(()=>l()))}}});if(u){const b=u.onChildrenChange(()=>{f()});b&&c.onUnmounted(b),c.onUnmounted(u.onPropChange(w=>{const{key:T,prop:d,newValue:_,oldValue:R}=w;d.path.length===1?T==="___isLocked___"?p.value=_:ot(_)||ot(R)?f():h():h()})),c.onUnmounted(u.onVisibleChange(w=>{P?r.value=w:h()})),s(at(u))}return c.watch(()=>e.__schema,b=>s(b)),()=>{var b;const{__comp:w,__vnodeProps:T}=e,d=ro(n)[1];if(P&&!r.value)return null;const _=i.value?m(i.value,u):t;return w?ct(w)?c.h(c.Fragment,(b=_.default)==null?void 0:b.call(_)):c.h(w,c.mergeProps(d,T),_):c.h("div","component not found")}}}),Js=c.defineComponent({inheritAttrs:!1,props:lt,setup:(e,{attrs:t,slots:n})=>{const{triggerCompGetCtx:r}=Le();return()=>{var o;const{__comp:i,__vnodeProps:s,__schema:l}=e,f=ro(t)[1];return ct(i)?c.h(c.Fragment,(o=n.default)==null?void 0:o.call(n)):i?c.h(i,c.mergeProps(f,s,{onVnodeMounted(h){var a;const p=(a=h.component)==null?void 0:a.proxy;p&&r(l,p)}}),n):null}}});function $r(e){const t=[];return Object.keys(e).forEach(n=>{const r=e[n];r==null||r===""||(typeof r=="object"?t.push(`${n}=${encodeURIComponent(JSON.stringify(r))}`):t.push(`${n}=${encodeURIComponent(String(r))}`))}),t.join("&")}function Zs(e,t){if(!t)return e;const n=$r(t);return n?e.indexOf("?")>0?`${e}&${n}`:`${e}?${n}`:e}function Qs(e,t){for(const n in e)if(n.toLowerCase()===t)return[e[n],n];return[]}function Ys(e){return["arrayBuffer","blob","formData","json","text"].includes(e)}function Ks(e){const t=new FormData;for(const n in e){const r=e[n];r instanceof Blob?t.append(n,r):t.append(n,String(r))}return t}const Fr={"application/json":e=>JSON.stringify(e),"multipart/form-data":e=>Ie(e)?Ks(e):e,"application/x-www-form-urlencoded":e=>$r(e)};function ea(e,t){const n=Object.keys(Fr).find(r=>e.includes(r));return n?Fr[n](t):t}class $e extends Error{constructor(t,n,r){super(t),this.code=n,this.data=r}}class Vr{constructor(t,n){this.code=t,this.data=n}}async function ta(e){const{uri:t,method:n,timeout:r,params:o={},headers:i={},responseType:s="json"}=e;let l;const f={Accept:"application/json",...i},h={method:n,headers:f};if(n==="GET"||n==="DELETE"||n==="OPTIONS")l=Zs(t,o);else{l=t;const[u,m]=Qs(f,"content-type");h.body=ea(u!=null?u:"application/json",o),u==="multipart/form-data"&&m&&delete f[m]}if(r){const u=new AbortController;h.signal=u.signal,setTimeout(()=>u.abort(),r)}const a=await fetch(l,h),p=a.status;if(p>=200&&p<300)if(p===204){if(n==="DELETE")return new Vr(p,null);throw new $e(a.statusText,p)}else{if(!Ys(s))throw new $e(`invalid response type: ${s}`,-1);return new Vr(p,await a[s]())}else if(p>=400)try{const u=await a.json();throw new $e(a.statusText,p,u)}catch(u){throw new $e(a.statusText,p)}throw new $e(a.statusText,p)}var we=(e=>(e.Initial="init",e.Loading="loading",e.Loaded="loaded",e.Error="error",e))(we||{});const na=e=>e,ra=()=>{},oa=()=>!0;function ia(e,t,n){const r=new Ce({thisRequired:n.__thisRequired}),o=c.shallowRef(),i=c.shallowRef(),s=c.ref(we.Initial),l=c.computed(()=>s.value===we.Loading),f=c.computed(()=>!!r.parseSchema(e.isInit,n)),{willFetch:h,shouldFetch:a,dataHandler:p,errorHandler:u}=e,m={willFetch:h?r.parseSchema(h,n):na,shouldFetch:a?r.parseSchema(a,n):oa,dataHandler:p?r.parseSchema(p,n):E=>E.data,errorHandler:u?r.parseSchema(u,n):ra};return c.reactive({data:o,error:i,loading:l,status:s,isInit:f,load:async(E,P={})=>{try{const{type:b,options:w,id:T}=e,{headers:d,assignToScope:_=!0,...R}=P;if(!t)throw new Error("unsupport fetch type: "+b);if(!(V(m.shouldFetch)?m.shouldFetch():!Gt(m.shouldFetch)||m.shouldFetch))throw s.value=we.Error,new Error(`the ${T} request should not fetch, please check the condition`);const{params:v,headers:O,...A}=r.parseSchema(w!=null?w:{},n);s.value=we.Loading;const H=await t(m.willFetch({...A,...R,headers:{...O,...d},params:Ie(v)&&Ie(E)?{...v,...E}:E!=null?E:v}));s.value=we.Loaded;const L=o.value=m.dataHandler(H);return!mr(o)&&_&&(n[T]=L),L}catch(b){throw s.value=we.Error,i.value=b,m.errorHandler(b),b}}})}function sa({list:e=[],dataHandler:t},n){const r={},o={};return e.forEach(i=>{const s={dataHandler:t,...i},l=ia(s,ta,n),f=(h,a)=>{const p={assignToScope:!1,...a};return l.load(h,p)};r[i.id]=f,o[i.id]=l}),{dataSource:r,dataSourceMap:o,reloadDataSource:(i,s,l)=>{if(i){const h=o[i];if(!h)throw new Error("dataSource not found, id: "+i);return h.load(s,l)}const f=Object.keys(o).map(h=>o[h]).filter(h=>h.isInit).map(h=>h.load());return Promise.all(f)},hasInitDataSource:()=>Object.keys(o).some(i=>o[i].isInit)}}function aa(e,t,n){const r=e.parseSchema(t,n);if(!Ie(r))return;const o={};for(const i in r){const s=r[i],l=V(s)?s:V(s.get)?s.get:pr,f=!V(s)&&V(s.set)?s.set:pr,h=c.computed({get:l,set:f});Object.defineProperty(o,i,{enumerable:!0,configurable:!0,get:()=>h.value,set:a=>h.value=a})}ue(n,re.CONTEXT,o,!0)}function qr(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:e===null?"null":""}function Xr(e,t){return qr(e)===qr(t)}function zr(e,t){return J(t)?t.findIndex(n=>Xr(n,e)):V(t)&&Xr(t,e)?0:-1}function ua(e,t,n){const r=e.parseSchema(t,!1);if(!r||!F(r)&&!J(r)||F(r)&&Object.keys(r).length===0||J(r)&&r.length===0)return;const{propsOptions:[o,i]}=n.$,s={},l=[];for(const f in r){const h=r[f];let a,p;if(Se(h)?(a=st(h),p={}):(a=st(f),p=J(h)||V(h)?{type:h}:h),o[a]){Ue("prop "+a+"声明重复");continue}const u=zr(Boolean,p.type),m=zr(String,p.type);s[a]={0:u>-1,1:m<0||u<m,...p},(u>-1||"default"in p)&&l.push(a)}Object.keys(s).length>0&&(n.$.propsOptions=[{...o,...s},[...i,...l]])}function la(e,t,n){const r=e.parseSchema(t,!1),o=J(r)?r.reduce((i,s)=>(i[s]=null,i),{}):F(r)?r:null;!o||Object.keys(o).length===0||(n.$.emitsOptions=Object.create(n.$.emitsOptions,Object.getOwnPropertyDescriptors(o)))}function ca(e,t,n){const r=e.parseSchema(t,n),o=V(r)?r():F(r)?r:null;!o||Object.keys(o).length===0||ue(n,re.DATA,o)}function ha(e,t){const n=t.split(".");return()=>{let r=e;for(let o=0;o<n.length&&r;o++)r=r[n[o]];return r}}function Wr(e,t,n,r){const o=r.includes(".")?ha(n,r):()=>n[r];if(Se(e)){const i=t[e];V(i)?c.watch(o,i):c.warn(`Invalid watch handler specified by key "${e}"`,i)}else if(V(e))c.watch(o,e);else if(F(e))if(J(e))e.forEach(i=>Wr(i,t,n,r));else{const i=V(e.handler)?e.handler:Se(e.handler)?t[e.handler]:null;V(i)?c.watch(o,i,e):c.warn(`Invalid watch handler specified by key "${e.handler}"`,i)}else c.warn(`Invalid watch option: "${r}"`,e)}function fa(e,t,n){const r=e.parseSchema(t,n);if(!r||!F(r)||Object.keys(r).length===0)return;const o=Dr(n,re.CONTEXT);for(const i in r)Wr(r[i],o,n,i)}function pa(e,t,n){const r=e.parseSchema(t,!1);let o;if(J(r))o=r.reduce((s,l)=>(s[l]=l,s),{});else if(F(r))o=r;else return;const i={};for(const s in o){const l=o[s];let f;if(F(l)){const h=l.from||s;"default"in l?f=c.inject(h,l.default,!0):f=c.inject(h)}else f=c.inject(l);c.isRef(f)?Object.defineProperty(i,s,{enumerable:!0,configurable:!0,get:()=>f.value,set:h=>f.value=h}):i[s]=f}ue(n,re.CONTEXT,i,!0)}function da(e,t,n){const r=e.parseSchema(t,n),o=V(r)?r():r;F(o)&&Reflect.ownKeys(o).forEach(i=>{const s=Reflect.get(o,i);c.provide(i,s)})}function ma(e,t,n,[r,o]){const i=e.parseSchema(t,!1);if(!V(i))return;const s=i.apply(void 0,[r,o]);if($t(s))return s.then(l=>Jr(l,n));Jr(s,n)}function Jr(e,t){if(!de(e)){if(!F(e)){Ue("不支持的 setup 返回值类型, type: "+Dt(e));return}ue(t,re.SETUP,c.toRaw(e))}}function ga(e,t,n){const r=e.parseSchema(t,!1);V(r)&&r.call(n)}function ya(e,t,n){const r=e.parseSchema(t,!1);V(r)&&r.call(n)}const Zr=Symbol(),Qr=e=>void(e[Zr]=!0),Qt=e=>Zr in e,Ea=e=>V(e),ba=["beforeRouteEnter","beforeRouteUpdate","beforeRouteLeave"],Yt=Symbol("LOWCODE_ROUTE_META");function va(e){const t=e.split(".");return n=>{let r=n;for(let o=0;o<t.length&&r;o++)r=r[t[o]];return r}}function Yr(e,t){var n,r;if(Qt(e))return;Qr(e);const o=(n=t==null?void 0:t.timeout)!=null?n:6e4,i=new Ce(t),s=va((r=t==null?void 0:t.scopePath)!=null?r:"runtimeScope");function l(a,p,u,m){if(!F(u)||!F(u.lifeCycles))return p;const E={};for(const P of ba){const b=u.lifeCycles[P],w=m.parseSchema(b,!1);V(w)&&(E[P]=f(a,w))}return Object.keys(E).length>0?Object.create(p,Object.getOwnPropertyDescriptors(E)):p}function f(a,p){return p.length<3?function(u,m){const E=s(this);return h(p.call(E,u,m))}:function(u,m,E){const P=s(this);return h(p.call(P,u,m,E))}}const h=a=>V(a)?async p=>{let u;const m=Date.now();for(;!(u=s(p));){if(Date.now()-m>=o)throw new Error("lowcode guard wait timeout");await vs()}return a(u)}:$t(a)?a.then(h):a;return e.beforeEach((a,p,u)=>{if(a.matched.every(m=>Qt(m)))return u();Promise.all(a.matched.map(async m=>{var E;if(Qt(m))return;const P=(E=m.components)!=null?E:{},b=P.default,w=m.meta[Yt];if(b&&Rs(w)){let T;Ea(b)?(T=await b(),gr(T)&&(T=T.default)):T=b,P.default=l(m,T,w,i.initModule(w))}Qr(m)})).then(()=>u())})}const _a={setup:ma,created:ga,beforeCreate:ya,initInject:pa,initProvide:da,initEmits:la,initProps:ua,initData:ca,initWatch:fa,initComputed:aa};function xa(e,t,n){function r(o,i,s){var l;const f=((l=e.lifeCycles)!=null?l:{})[o],h=_a[o];if(f&&h)return h(n,f,t,[i,s])}return r}const Sa=Ds(),Ca={beforeMount:c.onBeforeMount,mounted:c.onMounted,beforeUpdate:c.onBeforeUpdate,updated:c.onUpdated,activated:c.onActivated,deactivated:c.onDeactivated,beforeUnmount:c.onBeforeUnmount,renderTracked:c.onRenderTracked,renderTriggered:c.onRenderTriggered,unmounted:c.onUnmounted,errorCaptured:c.onErrorCaptured,serverPrefetch:c.onServerPrefetch},Ra={componentDidMount:c.onMounted,componentDidCatch:c.onErrorCaptured,shouldComponentUpdate:c.onBeforeUpdate,componentWillUnmount:c.onBeforeUnmount},Kt={...Ca,...Ra};function ct(e){return e===c.Fragment}function wa(e){return e in Kt}function Ta(e){const t={};if(F(e))for(const n in e)n in Kt&&(t[n]=e[n]);return t}const Kr=Symbol("IS_LOCKED"),ht=Symbol("IS_ROOT_NODE");function Pa(e){const t=c.ref(e),n=c.inject(Kr,null),r=c.computed({get:()=>(n==null?void 0:n.value)||t.value,set:o=>t.value=o});return c.provide(Kr,r),r}function Oa(e){return e?c.provide(ht,!0):(e=c.inject(ht,null),e==null?c.provide(ht,e=!0):e&&c.provide(ht,!1)),e}function en(e,t=()=>{}){const n=Le(),{getNode:r,wrapLeafComp:o,designMode:i,thisRequiredInJSE:s}=n,l=new Ce({thisRequired:s}),f=e.__schema.id?r(e.__schema.id):null,h=f?Pa(f.isLocked):c.ref(!1),a=i==="design";c.provide(Sa,{mode:i,node:f,isDesignerEnv:a});const p=(d,_,R,v)=>{var O;const A=Zt(e.__scope,R);if(Se(d))return c.createTextVNode(d);if(!it(d)){const Y=l.parseSchema(d,A);return c.createTextVNode(c.toDisplayString(Y))}const{show:H,scence:L}=T(d,A,a);if(!H)return c.createCommentVNode(`${L} ${H}`);const M=d.id?r(d.id):null,{componentName:G}=d;if(!v&&(v=n.components[G],!v)){if(G==="Slot")return le(d.children).flatMap(Y=>p(Y,_,R)).filter(Y=>!de(Y));if(a)return c.h("div",`component[${G}] not found`);v={setup(Y,{slots:fe}){return Vs("组件未找到, 组件名："+G),c.h("div",c.mergeProps(Y,{class:"lc-component-not-found"}),fe)}}}_=o(G,v,_);const Z=Y=>{n.triggerCompGetCtx(d,Y)},{props:ie,slots:he}=eo(d),{loop:se,buildLoopScope:me}=w(d,A);if(!se){const Y=b(ie,A,M,null,{ref:Z}),[fe,Ee]=no(Y);return c.h(_,{key:(O=fe.key)!=null?O:d.id,__comp:v,__scope:A,__schema:d,__vnodeProps:fe,...Ee},m(he,M))}return J(se)?se.map((Y,fe,Ee)=>{var be;const ve=me(Y,fe,Ee.length),ne=b(ie,A,M,ve,{ref:Z}),[_e,g]=no(ne);return c.h(_,{key:(be=_e.key)!=null?be:`${d.id}--${fe}`,__comp:v,__scope:ve,__schema:d,__vnodeProps:_e,...g},m(he,M))}):(Ue("循环对象必须是数组, type: "+Dt(se)),null)},u=a?(d,_,R)=>{const v=p(d,Ws,_,R);return it(d)&&c.isVNode(v)&&(v.type===c.Comment?t(d,!1):t(d,!0)),v}:(d,_,R)=>p(d,Js,_,R),m=(d,_,R)=>Object.keys(d).reduce((v,O)=>{const A=d[O],H=O==="default";if(de(A)||H&&!(_!=null&&_.isContainerNode)&&J(A)&&A.length===0)return v;let L;return J(A)?L=()=>A.map(M=>u(M,R)).filter(M=>!de(M)):Vt(A)?A.id?L=(...M)=>{var G;const Z=u(A,[R,l.parseSlotScope(M,(G=A.params)!=null?G:[])]);return le(Z)}:L=(...M)=>{var G;const Z=l.parseSlotScope(M,(G=A.params)!=null?G:[]);return le(A.children).map(ie=>u(ie,[R,Z])).filter(ie=>!de(ie))}:L=()=>le(u(A,R)),v[O]=H&&a&&_!=null&&_.isContainerNode?Aa(L,h):L,v},{}),E=(d,_,R,v)=>{var O,A;if(Be(d)||rt(d))return l.parseExpression(d,_);if(Ft(d))return l.parseI18n(d,_);if(ot(d)){let H,L;return v!=null&&v.slotNode?(L=v.slotNode.schema,H=Vt(L)?(O=L.params)!=null?O:[]:[]):(L=le(d.value),H=(A=d.params)!=null?A:[]),(...M)=>{const G=l.parseSlotScope(M,H),Z=[];return le(L).forEach(ie=>{const he=u(ie,[R,G]);le(he).forEach(se=>Z.push(se))}),Z}}else{if(J(d))return d.map((H,L)=>E(H,_,R,v==null?void 0:v.get(L)));if(d&&F(d)){const H={};return Object.keys(d).forEach(L=>{if(L.startsWith("__"))return;const M=d[L],G=v==null?void 0:v.get(L);H[L]=E(M,_,R,G)}),H}}return d},P=(d,_,R,v)=>{if(Se(d)){const O=d;let A=null;return H=>{let L=_.$.refs;if(Object.keys(L).length===0&&(L=_.$.refs={}),de(_.__loopRefIndex))L[O]=H,O in _&&(_[O]=H);else{let M=L[O];if(!J(M))M=L[O]=[],O in _&&(M=_[O]=M);else if(O in _){const G=_[O];!J(G)||c.toRaw(G)!==M?M=_[O]=M:M=G}if(de(H)){const G=M.indexOf(A);G>=0&&M.splice(G,1)}else M[_.__loopRefIndex]=H}A=H}}else{const O=E(d,_,R,v);return Se(O)?P(O,_,R,v):O}},b=(d,_,R,v,O)=>{const A={};Object.keys(d).forEach(M=>{to(A,M,d[M])});const H={},L=v?Zt(_,v):_;return Object.keys(A).forEach(M=>{const G=A[M];H[M]=M==="ref"?P(G,L,v,R==null?void 0:R.getProp(M)):E(G,L,v,R==null?void 0:R.getProp(M))}),O&&Object.keys(O).forEach(M=>{to(H,M,O[M])}),H},w=(d,_)=>{let R=null;const v=["item","index"];return d.loop&&(R=d.loop),d.loopArgs&&d.loopArgs.forEach((O,A)=>{v[A]=O}),{loop:R?l.parseSchema(R,_):null,loopArgs:v,buildLoopScope(O,A,H){var L;const M=(L=_.__loopRefOffset)!=null?L:0,[G,Z]=v;return{[G]:O,[Z]:A,__loopScope:!0,__loopRefIndex:M+A,__loopRefOffset:H*A}}}},T=(d,_,R)=>{var v,O;const A=R&&(v=d.hidden)!=null?v:!1,H=(O=d.condition)!=null?O:!0;return A?{scence:"hidden",show:!1}:{scence:"condition",show:typeof H=="boolean"?H:!!l.parseSchema(H,_)}};return{node:f,locked:h,isRootNode:Oa(e.__isRootNode),getNode:r,renderComp:u,buildProps:b,buildSlots:m}}function Fe(e,t){const n=c.computed(()=>e.__schema),r={__comp:null,__scope:t,__isRootNode:!0,__vnodeProps:{},__schema:e.__schema},o=c.computed(()=>{var s;return(s=e.__designMode)!=null?s:"live"}),i=c.computed(()=>e.__components);return{scope:t,schemaRef:n,designModeRef:o,componentsRef:i,...en(r)}}function Ve(e,t){var n;const{__schema:r,__scope:o,__parser:i}=e,{props:s,state:l,methods:f,lifeCycles:h}=r!=null?r:{},a=c.getCurrentInstance(),p=a.proxy,u=xa(r,p,i);if(u("initEmits"),u("beforeCreate"),u("initProps"),s){const v=i.parseOnlyJsValue(s);ue(p,re.PROPS,v)}const m=u("setup",a.props,t);if(u("initInject"),f){const v=i.parseSchema(f,p);v&&ue(p,re.CONTEXT,v)}if(u("initData"),l){const v=i.parseSchema(l);v&&ue(p,re.DATA,v)}u("initComputed"),u("initWatch"),u("initProvide");const E=i.parseSchema(Ta(h),p);Object.keys(E).length>0&&Object.keys(E).forEach(v=>{if(wa(v)){const O=E[v];V(O)&&Kt[v](O,a)}}),Na(r.css,r.id);const P=(v,O)=>{const{__locale:A,__messages:H}=e;return Fs(v,O,A,H)},b=c.computed(()=>e.__locale);ue(p,re.CONTEXT,{i18n:P,$t:P}),ue(p,re.DATA,{currentLocale:b});const{dataSource:w,dataSourceMap:T,reloadDataSource:d,hasInitDataSource:_}=sa((n=r.dataSource)!=null?n:{list:[],dataHandler:void 0},p),R=Object.keys(T).filter(v=>!(v in p)).map(v=>[v,c.ref()]);return ue(p,re.CONTEXT,{dataSource:w,dataSourceMap:T,reloadDataSource:d}),ue(p,re.SETUP,bs(R)),o&&ue(p,re.SETUP,o),u("created"),{scope:p,wrapRender:v=>{const O=[];return $t(m)&&O.push(m),_()&&O.push(d()),O.length>0?Promise.all(O).then(()=>v):v}}}function Na(e,t){var n;let r=null;t&&(r=document.querySelector(`style[data-id="${t}"]`)),e?(r||(r=document.createElement("style"),t&&r.setAttribute("data-id",t),(document.head||document.getElementsByTagName("head")[0]).appendChild(r)),r.innerHTML!==e&&(r.innerHTML=e)):r&&((n=r.parentElement)==null||n.removeChild(r))}const eo=(e,t)=>{var n;const r={},o={};return r.default=le(e.children),Object.entries((n=e.props)!=null?n:{}).forEach(([i,s])=>{if(ot(s)){const l=t==null?void 0:t.getProp(i,!1);if(l&&l.slotNode){const f=l.slotNode.schema;Vt(f)&&(r[i]=f)}else s.value&&(r[i]={componentName:"Slot",params:s.params,children:le(s.value)})}else i==="className"?o.class=s:i==="children"?r.default=s:o[i]=s}),{props:o,slots:r}},to=(e,t,n)=>{var r;if(t.startsWith("v-model")){const o=t.match(/v-model(?::(\w+))?$/);if(!o)return e;const i=st((r=o[1])!=null?r:"modelValue"),s=`onUpdate:${i}`;if(Be(n)){const l={type:"JSFunction",value:`function ($event) {${n.value} = $event}`};e[s]=s in e?le(e[s]).concat(l):l}e[i]=n}else if(!(t.startsWith("v-")&&Be(n)))if(t.match(/^on[A-Z]/)&&rt(n)){const o=t.match(/onUpdate(?::?(\w+))$/);o&&(t=`onUpdate:${st(o[1])}`),e[t]=t in e?le(e[t]).concat(n):n}else if(t==="ref"&&"ref"in e){const o=n,i=e.ref;V(i)&&V(o)?e.ref=(...s)=>{o(...s),i(...s)}:e.ref=[i,o].filter(V).pop()}else e[t]=n},Aa=(e,t)=>(...n)=>{const r=e(...n);if(!r.length){const o=t.value,i={"lc-container-locked":o,"lc-container-placeholder":!0},s=o?"锁定元素及子元素无法编辑":"拖拽组件或模板到这里";r.push(c.h("div",{class:i},s))}return r},no=jt("key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ro=jt(Ur),Ha=c.defineComponent((e,{slots:t})=>()=>c.h("div",{class:"lc-page",style:{height:"100%"},...e},t)),Ia=c.defineComponent({name:"PageRenderer",props:Me,__renderer__:!0,setup(e,t){const{scope:n,wrapRender:r}=Ve(e,t),{renderComp:o,componentsRef:i,schemaRef:s}=Fe(e,n);return r(()=>o(s.value,null,i.value.Page||Ha))}}),Ba=c.defineComponent({name:"TempRenderer",props:Me,__renderer__:!0,setup(e,t){const{scope:n,wrapRender:r}=Ve(e,t),{triggerCompGetCtx:o}=Le(),{renderComp:i,schemaRef:s}=Fe(e,n),l=c.getCurrentInstance();return c.onMounted(()=>{l.proxy&&o(s.value,l.proxy)}),r(()=>i(s.value,null,c.Fragment))}}),La=c.defineComponent({name:"BlockRenderer",props:Me,__renderer__:!0,setup(e,t){const{scope:n,wrapRender:r}=Ve(e,t),{triggerCompGetCtx:o}=Le(),{renderComp:i,schemaRef:s,componentsRef:l}=Fe(e,n),f=l.value[s.value.componentName]||c.Fragment,h=c.getCurrentInstance();return ct(f)&&c.onMounted(()=>{h!=null&&h.proxy&&o(s.value,h.proxy)}),r(()=>i(s.value,null,l.value.Block||c.Fragment))}}),Ma=c.defineComponent({name:"ComponentRenderer",props:Me,__renderer__:!0,setup(e,t){const{scope:n,wrapRender:r}=Ve(e,t),{triggerCompGetCtx:o}=Le(),{renderComp:i,schemaRef:s,componentsRef:l}=Fe(e,n),f=l.value[s.value.componentName]||c.Fragment,h=c.getCurrentInstance();return ct(f)&&c.onMounted(()=>{h!=null&&h.proxy&&o(s.value,h.proxy)}),r(()=>i(s.value,null,f))}}),oo={TempRenderer:Ba,PageRenderer:Ia,BlockRenderer:La,ComponentRenderer:Ma};class Ua{constructor(){Ge(this,"renderers",{...oo}),Ge(this,"configProvider",null)}setConfigProvider(t){this.configProvider=t}getConfigProvider(){return this.configProvider}setRenderers(t){this.renderers=t}getRenderers(){return this.renderers}}const qe=new Ua,io={scope:Object,schema:{type:Object,required:!0},passProps:Object,components:{type:Object,required:!0},designMode:{type:String,default:"live"},device:String,locale:String,messages:{type:Object,default:()=>({})},getNode:Function,onCompGetCtx:Function,thisRequiredInJSE:{type:Boolean,default:!0},disableCompMock:{type:[Array,Boolean],default:!1}},ka=jt(e=>!e.match(/^[a-z]+([A-Z][a-z]+)*$/)),ft=c.defineComponent({props:io,setup(e,{slots:t,expose:n}){const r=new Ce({thisRequired:e.thisRequiredInJSE}).initModule(e.schema),o=(u,m)=>{var E;m&&((E=e.onCompGetCtx)==null||E.call(e,u,m))},i=u=>{var m,E;return(E=(m=e.getNode)==null?void 0:m.call(e,u))!=null?E:null},s=c.shallowRef(e.schema);c.watch(()=>e.schema,()=>s.value=e.schema);let l=()=>!0;c.watchEffect(()=>{const u=e.disableCompMock;Gt(u)?l=u?()=>!1:()=>!0:u&&(l=m=>!u.includes(m))});const f=new Map,h=c.reactive({designMode:c.computed(()=>e.designMode),components:c.computed(()=>({...qe.getRenderers(),...e.components})),getNode:u=>{var m,E;return(E=(m=e.getNode)==null?void 0:m.call(e,u))!=null?E:null},triggerCompGetCtx:(u,m)=>{var E;(E=e.onCompGetCtx)==null||E.call(e,u,m)},rerender:dr(()=>{const u=e.schema.id,m=u&&i(u);if(m){const E=at(m);E&&(s.value=E)}c.triggerRef(s)}),wrapLeafComp:(u,m,E)=>{let P=f.get(E);if(P){if(P.has(m))return P.get(m)}else P=new Map,f.set(E,P);if(l(u)){const[b,w,T]=ka(m);T&&(E=Object.create(E,Object.getOwnPropertyDescriptors(b)))}return P.set(m,E),E}});c.provide(Mr(),h);const a=c.ref();n({runtimeScope:a});const p=()=>{const{components:u}=h,{scope:m,locale:E,messages:P,designMode:b,thisRequiredInJSE:w,passProps:T}=e,{value:d}=s;if(!d)return null;const{componentName:_}=d;let R=u[_]||u[`${_}Renderer`];return R&&!R.__renderer__&&(R=oo[`${_}Renderer`]),R?c.h(R,{key:d.__ctx?`${d.__ctx.lceKey}_${d.__ctx.idx||"0"}`:d.id,...T,...r.parseOnlyJsValue(d.props),ref:a,__parser:r,__scope:m,__schema:d,__locale:E,__messages:P,__components:u,__designMode:b,__thisRequiredInJSE:w,__getNode:i,__triggerCompGetCtx:o},t):null};return()=>{const{device:u,locale:m}=e,E=qe.getConfigProvider();return E?c.h(E,{device:u,locale:m},{default:p}):p()}}}),Da=()=>{Ce.cleanCacheModules()},ja=c.defineComponent({props:{simulator:{type:Object,required:!0}},render(){const{simulator:e,$slots:t}=this,{layout:n,getComponent:r}=e;if(n){const{Component:o,props:i={},componentName:s}=n;if(o)return c.h(o,{...i,key:"layout",simulator:e},t);const l=s&&r(s);if(l)return c.h(l,{...i,key:"layout",simulator:e},t)}return c.renderSlot(t,"default")}}),Ga=c.defineComponent({props:{simulator:{type:Object,required:!0}},render(){const{simulator:e}=this;return c.h(ja,{simulator:e},{default:()=>c.h(Ct)})}}),$a=c.defineComponent({props:{simulator:{type:Object,required:!0},documentInstance:{type:Object,required:!0}},setup:()=>({renderer:c.ref()}),render(){const{documentInstance:e,simulator:t}=this,{schema:n,scope:r,messages:o}=e,{designMode:i,device:s,locale:l,components:f}=t;return c.h(c.Suspense,null,{default:()=>c.h(ft,{ref:"renderer",scope:r,schema:n,locale:l,device:s,messages:o,components:f,designMode:i,disableCompMock:t.disableCompMock,thisRequiredInJSE:t.thisRequiredInJSE,getNode:h=>e.getNode(h),onCompGetCtx:(h,a)=>e.mountInstance(h.id,a)})})}}),so=c.defineComponent({name:"Leaf",render(){return c.renderSlot(this.$slots,"default")}});Object.assign(so,{displayName:"Leaf",componentMetadata:{componentName:"Leaf",configure:{props:[{name:"children",setter:"StringSetter"}],supports:!1}}});const ao=c.defineComponent({render(){return c.h("div",{class:"lc-container"},this.$slots)}});Object.assign(ao,{displayName:"Slot",componentMetadata:{componentName:"Slot",configure:{props:[{name:"___title",title:"插槽标题",setter:"StringSetter",defaultValue:"插槽容器"},{name:"___params",title:"插槽入参",setter:{componentName:"ArraySetter",props:{itemSetter:{componentName:"StringSetter",props:{placeholder:"参数名称"}}}}}],component:{isContainer:!0,disableBehaviors:"*"},supports:!1}}});const uo=c.defineComponent((e,{slots:t})=>()=>c.h("div",{class:"lc-page",...e},t));Object.assign(uo,{displayName:"Page",componentMetadata:{componentName:"Page",configure:{supports:{style:!0,className:!0},component:{isContainer:!0,disableBehaviors:"*"}}}});const Q=window.LCSimulatorHost,lo=document.createRange();function co(e){return e.parentNode?xs(e)?[e.getBoundingClientRect()]:(lo.selectNode(e),Array.from(lo.getClientRects())):[]}const tn=Symbol("_LCDocId"),ho=Symbol("_LCNodeId"),fo=Symbol("_LCVueInstance"),po=Symbol("_LCVueCompRecord");function mo(e){return F(e)&&!de(e.__vueParentComponent)}function go(e){return F(e)&&tn in e}function Fa(e){return F(e)&&po in e}function nn(e,t,n){return{did:e,nid:t,cid:n,[po]:!0}}function rn(e){return{docId:e[tn],nodeId:e[ho],instance:e[fo]}}function Va(e,t){e[tn]=t.docId,e[ho]=t.nodeId,e[fo]=t.instance}function qa(e){return e.nodeType===8}function Xa(e){return e.nodeType===3}function za(e){return F(e)&&"nodeType"in e&&(e.nodeType===Node.ELEMENT_NODE||e.nodeType===Node.TEXT_NODE)}function on(e){return qa(e)||Xa(e)&&e.nodeValue===""}function Wa(e,t){return document.contains(e)?Ja(e,t):null}function Ja(e,t){for(;e;){if(mo(e)){const n=e.__vueParentComponent;return yo(n,t)}if(go(e)){const{nodeId:n,docId:r,instance:o}=rn(e);if(!t||t===n)return{docId:r,nodeId:n,instance:nn(r,n,o.$.uid)}}e=e.parentElement}return null}function yo(e,t){for(;e;){const n=e.vnode.el;if(n&&go(n)){const{nodeId:r,docId:o,instance:i}=rn(n);if(!t||t===r)return{docId:o,nodeId:r,instance:nn(o,r,i.$.uid)}}e=e.parent}return null}function Za(e){const t=[],n=e.$el;if(on(n)){const r=e.$;Eo(t,r,n,o=>o.previousSibling),sn(t,r),Eo(t,r,n,o=>o.nextSibling)}else t.push(n);return t}function Eo(e,t,n,r){let o=r(n);for(;o;){if(on(o)){o=r(o);continue}if(mo(o)){const i=o.__vueParentComponent;if(_o(t,i)){e.unshift(o),o=r(o);continue}}break}}function sn(e,t){const n=t.subTree,r=n.el;return vo(r)?(e.push(r),!0):J(n.children)&&n.children.length>0?bo(e,n.children):n.component?sn(e,n.component):!1}function bo(e,t){const n=t.map(({el:r})=>r).filter(vo);return n.length>0?(e.push(...n),!0):t.length>0&&t.some(r=>J(r.children)&&r.children.length>0?bo(e,r.children.filter(o=>c.isVNode(o))):r.component?sn(e,r.component):!1)}function vo(e){return e&&za(e)&&!on(e)?co(e).some(n=>n.width||n.height):!1}function _o(e,t){return t==null||e.uid>t.uid?!1:e.uid===t.uid?!0:_o(e,t.parent)}function an(...e){return console.warn("[vue-simulator-renderer]:",...e)}class Qa{constructor(){wo(this,"states",new Set)}setDragging(t){t?this.addState("dragging"):this.removeState("dragging")}setXResizing(t){t?this.addState("x-resizing"):this.removeState("x-resizing")}setYResizing(t){t?this.addState("y-resizing"):this.removeState("y-resizing")}setCopy(t){t?this.addState("copy"):this.removeState("copy")}isCopy(){return this.states.has("copy")}release(){for(const t of this.states)this.removeState(t)}addState(t){this.states.has(t)||(this.states.add(t),document.documentElement.classList.add(`lc-cursor-${t}`))}removeState(t){this.states.has(t)&&(this.states.delete(t),document.documentElement.classList.remove(`lc-cursor-${t}`))}}const un=new Qa;let xo=!0;const So=e=>xo?null:(e.preventDefault(),e.stopPropagation(),!1);document.addEventListener("selectstart",So,!0),document.addEventListener("dragstart",So,!0);function Ya(e){xo=e}function Co(e,t){if(F(e)&&F(t)){const n=Object.assign({},e);return Object.keys(t).forEach(r=>{Reflect.set(n,r,Co(e[r],t[r]))}),n}return t!=null?t:e}function Ro(e){return"/"+(e.endsWith("/index.vue")?e.slice(0,e.length-10):e.replace(/\.(\w*)$/,"")).replace(/^\//,"")}function Ka(e){return Ro(e).replace(/[/-_][\w]/,n=>n[1].toUpperCase())}Object.assign(window,{VueRouter:Ri});const ln=new Ls,eu={Slot:ao,Leaf:so,Page:uo};function tu(e,t){const n=new Map,r=new Map,o=c.ref(Date.now()),i=c.computed(()=>{var u;return o.value,(u=at(e))!=null?u:{fileName:"/",componentName:"Page"}}),s=u=>u.$.isMounted,l=(u,m,E)=>{const P=E?E.map(b=>nn(u,m,b.$.uid)):null;Q.setInstance(u,m,P)},f=u=>r.get(u),h=(u,m)=>{const E=e.id;if(m==null){let T=n.get(u);T&&(T=T.filter(s),T.length>0?(n.set(u,T),l(E,u,T)):(n.delete(u),l(E,u,null)));return}const P=m.$el,b=rn(P).nodeId;b&&b!==u&&a(b,m),c.onUnmounted(()=>a(u,m),m.$),Va(P,{nodeId:u,docId:E,instance:m});let w=n.get(u);if(w){const T=w.length;w=w.filter(s);let d=w.length!==T;if(w.includes(m)||(w.push(m),d=!0),!d)return}else w=[m];r.set(m.$.uid,m),n.set(u,w),l(E,u,w)},a=(u,m)=>{const E=n.get(u);if(E){const P=E.indexOf(m);if(P>-1){const[b]=E.splice(P,1);r.delete(b.$.uid),l(e.id,u,E)}}},p=u=>u?e.getNode(u):null;return c.reactive({id:c.computed(()=>e.id),path:c.computed(()=>{var u;return Ro((u=i.value.fileName)!=null?u:"")}),key:c.computed(()=>`${e.id}:${o.value}`),scope:c.computed(()=>{var b;const u=i.value,{utils:m,constants:E,...P}=t.appHelper;return{utils:{...m,...Er(Q.libraryMap,(b=Reflect.get(u,"utils"))!=null?b:[])},constants:{...E,...Reflect.get(u,"constants")},...P}}),schema:i,document:c.computed(()=>e),messages:c.computed(()=>Co(t.i18n,Reflect.get(i.value,"i18n"))),instancesMap:c.computed(()=>n),getNode:p,mountInstance:h,unmountIntance:a,getComponentInstance:f,rerender:()=>{o.value=Date.now(),Ce.cleanCacheModules()}})}function nu(){const e=c.shallowRef({}),t=c.shallowRef("default"),n=c.shallowRef(),r=c.shallowRef(Q.autoRender),o=c.shallowRef("design"),i=c.shallowRef({}),s=c.shallowRef({}),l=c.shallowRef({}),f=c.shallowRef(!0),h=c.shallowRef({}),a=c.shallowRef([]),p=c.shallowRef(!0),u=c.reactive({i18n:{},appHelper:{utils:{},constants:{}}});console.log("context-----------------"),console.log(window);const m=[],E=new Map;function P(){s.value={...eu,...Ps(i.value,l.value,b.createComponent)}}const b=c.reactive({config:c.markRaw(qe),layout:e,device:t,locale:n,designMode:o,libraryMap:i,components:s,autoRender:r,componentsMap:l,disableCompMock:f,documentInstances:a,requestHandlersMap:h,thisRequiredInJSE:p,isSimulatorRenderer:!0});b.app=c.markRaw(c.createApp(Ga,{simulator:b})),b.router=c.markRaw($n({history:_n("/"),routes:[]})),b.getComponent=d=>{const _=d.split("."),R=[];for(;_.length>0;){const v=s.value[d];if(v)return yr(v,R);const O=_.pop();if(!O)break;R.unshift(O),d=_.join(".")}return null},b.getClosestNodeInstance=(d,_)=>{var R;if(Fa(d)){const{cid:v,did:O}=d,A=E.get(O),H=(R=A==null?void 0:A.getComponentInstance(v))!=null?R:null;return H&&yo(H.$,_)}return Wa(d,_)},b.findDOMNodes=d=>{if(d){const{did:_,cid:R}=d,v=E.get(_),O=v==null?void 0:v.getComponentInstance(R);return O?Za(O):null}return null},b.getComponent=d=>s.value[d];let w=0;b.createComponent=({css:d,..._})=>{const R=`Component-${_.id||w++}`,v=c.defineComponent({props:ft.props,setup:(O,{slots:A})=>{let H=document.getElementById(R);if(d&&!H){const L=window.document;H=L.createElement("style"),H.setAttribute("type","text/css"),H.setAttribute("id",R),H.appendChild(L.createTextNode(d)),L.head.appendChild(H)}return()=>c.h(ft,{schema:_,locale:b.locale,device:b.device,passProps:O,components:s.value},A)}});return _.fileName&&(v.name=Ka(_.fileName)),_.props&&(v.props=Object.keys(_.props)),v},b.getClientRects=d=>co(d),b.setNativeSelection=d=>Ya(d),b.setDraggingState=d=>un.setDragging(d),b.setCopyState=d=>un.setCopy(d),b.clearState=()=>un.release(),b.rerender=()=>a.value.forEach(d=>d.rerender()),b.dispose=()=>{b.app.unmount(),m.forEach(d=>d())},b.getCurrentDocument=()=>{var R;const d=Q.project.currentDocument,_=a.value;return d&&(R=_.find(v=>v.id===d.id))!=null?R:null},b.load=d=>ln.load(d),b.loadAsyncLibrary=async d=>{await ln.loadAsyncLibrary(d),P()};let T=!1;return b.run=()=>{if(T)return;T=!0;const d="app";let _=document.getElementById(d);_||(_=document.createElement("div"),document.body.appendChild(_),_.id=d),document.documentElement.classList.add("engine-page"),document.body.classList.add("engine-document"),b.app.use(b.router).mount(_),Q.project.setRendererReady(b)},m.push(Q.connect(b,()=>{var _,R,v;const d=Q.project.get("config");e.value=(_=d.layout)!=null?_:{},f.value=(R=d.disableCompMock)!=null?R:!1,(i.value!==Q.libraryMap||l.value!==Q.designer.componentsMap)&&(i.value=Q.libraryMap||{},l.value=Q.designer.componentsMap,P()),n.value=Q.locale,t.value=Q.device,o.value=Q.designMode,h.value=Q.requestHandlersMap,p.value=(v=Q.thisRequiredInJSE)!=null?v:!0,a.value.forEach(O=>O.rerender()),Yr(b.router,{thisRequired:p.value,scopePath:"renderer.runtimeScope"})})),m.push(Q.autorun(()=>{const{router:d}=b;a.value=Q.project.documents.map(R=>{let v=E.get(R.id);return v?d.hasRoute(v.id)&&d.removeRoute(v.id):(v=tu(R,u),E.set(R.id,v)),d.addRoute({name:v.id,path:v.path,meta:{[Yt]:v.schema},component:$a,props:((O,A)=>()=>({key:O.key,simulator:A,documentInstance:O}))(v,b)}),v}),d.getRoutes().forEach(R=>{const v=R.name;a.value.some(A=>A.id===v)||(d.removeRoute(v),E.delete(v))});const _=b.getCurrentDocument();_&&d.replace({name:_.id,force:!0})})),Q.componentsConsumer.consume(async d=>{d&&(await ln.load(d),P())}),Q.injectionConsumer.consume(d=>{var _;if(d.appHelper){const{utils:R,constants:v,...O}=d.appHelper;Object.assign(u.appHelper,{utils:J(R)?Er(Q.libraryMap,R):R!=null?R:{},constants:v!=null?v:{},...O})}u.i18n=(_=d.i18n)!=null?_:{}}),b}const cn=nu(),su="",Te=window;typeof Te!="undefined"&&(Te.SimulatorRenderer=cn),Te.addEventListener("load",()=>{Te.__VUE_HMR_RUNTIME__||(an("检测到您正在使用 vue 运行时的生产环境版本"),an("这将导致画布的部分功能异常，请使用非生产环境版本代替"),an("https://unpkg.com/vue/dist/vue.runtime.global.js"))}),Te.addEventListener("beforeunload",()=>{Te.LCSimulatorHost=null,Te.SimulatorRenderer=null,cn.dispose()}),X.LOWCODE_ROUTE_META=Yt,X.SchemaParser=Ce,X.VueRenderer=ft,X.baseRendererPropKeys=$s,X.cleanCacledModules=Da,X.config=qe,X.default=cn,X.leafPropKeys=Ur,X.leafProps=lt,X.mergeScope=Zt,X.rendererProps=Me,X.setupLowCodeRouteGuard=Yr,X.useLeaf=en,X.useRenderer=Fe,X.useRootScope=Ve,X.vueRendererConfig=qe,X.vueRendererProps=io,Object.defineProperties(X,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
